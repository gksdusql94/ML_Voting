{"cells":[{"cell_type":"markdown","metadata":{"id":"rUaTK5H3mLXR"},"source":["#Recall the Data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32593,"status":"ok","timestamp":1715812929013,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"fBhyqe_BBPSp","outputId":"d7fa4c02-31ec-4e27-ebda-e5169e803f56"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.25.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.15.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.11.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.63.0)\n","Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.2)\n","Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.27.0)\n","Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (5.3.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.4.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.5)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.6.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\n","2.2.1+cu121\n"]}],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import torchvision.datasets as datasets\n","import torchvision.transforms as transforms\n","import random\n","from torch.utils.data import Dataset, DataLoader\n","import pandas as pd\n","!pip install pandas numpy scikit-learn tensorflow\n","import pandas as pd\n","from sklearn.preprocessing import StandardScaler\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","print(torch.__version__)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16175,"status":"ok","timestamp":1715812945183,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"1rsTqBZBeOrX","outputId":"18b0b244-075b-4e5e-f0d0-b3ecabeb3183"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1584,"status":"ok","timestamp":1715812946756,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"Se53dGmgkI38","outputId":"53793291-c8c5-4f9f-cbc0-254463058053"},"outputs":[{"name":"stderr","output_type":"stream","text":["<ipython-input-3-7f905cc06cbe>:1: DtypeWarning: Columns (2,3,4) have mixed types. Specify dtype option on import or set low_memory=False.\n","  finaldata = pd.read_csv(\"/content/drive/MyDrive/capstone_yb/Voting ML/DATA/cleaned_finaldata.csv\")\n"]}],"source":["finaldata = pd.read_csv(\"/content/drive/MyDrive/capstone_yb/Voting ML/DATA/cleaned_finaldata.csv\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1715812946756,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"Kid0PrNN4tye","outputId":"9d88efaf-6c98-422b-8b71-61ddeafbeafe"},"outputs":[{"data":{"text/plain":["House Hold Less than $50,000                    float64\n","House Hold $50,000 to $99,999                   float64\n","House Hold $100,000 to $149,999                 float64\n","House Hold $150,000 to $199,999                 float64\n","House Hold $200,000 or more                     float64\n","Families Less than $50,000                      float64\n","Families $50,000 to $99,999                     float64\n","Families $100,000 to 149,999                    float64\n","Families $150,000 to $199,999                   float64\n","Families $200,000 or more                       float64\n","Married-couple Families Less than $50,000       float64\n","Married-couple Families $50,000 to $99,999      float64\n","Married-couple Families $100,000 to 149,999     float64\n","Married-couple Families $150,000 to $199,999    float64\n","Married-couple Families $200,000 or more        float64\n","Nonfamily households Less than $50,000          float64\n","Nonfamily households $50,000 to $99,999         float64\n","Nonfamily households $100,000 to 149,999        float64\n","Nonfamily households $150,000 to $199,999       float64\n","Nonfamily households $200,000 or more           float64\n","dtype: object"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["X = finaldata.drop(columns=['Geography', 'Geographic Area Name','Biden_proportion','Estimate!!Households!!Median income (dollars)','Vote Count', 'Precinct','County',\n","                            'Estimate!!Families!!Median income (dollars)','Estimate!!Nonfamily households!!Median income (dollars)', 'Estimate!!Married-couple families!!Median income (dollars)'])\n","X = X.astype(float)\n","X.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NjC0YvPY4xb_"},"outputs":[],"source":["y = finaldata['Biden_proportion']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DpsiHsiq5ODV"},"outputs":[],"source":["import copy\n","import numpy as np\n","import tqdm\n","from sklearn.model_selection import train_test_split\n","\n","\n","# train-test split of the dataset / chaning split of data to Pytorch\n","X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True)\n","X_train = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train = torch.tensor(y_train.values, dtype=torch.float32).reshape(-1, 1)\n","X_test = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test = torch.tensor(y_test.values, dtype=torch.float32).reshape(-1, 1)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1715812947016,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"ci6tKcDL7cGB","outputId":"c771459a-f32f-43d1-ff0c-c82f55175c19"},"outputs":[{"name":"stdout","output_type":"stream","text":["torch.Size([36754, 20])\n","torch.Size([36754, 1])\n"]}],"source":["print(X_train.shape)\n","print(y_train.shape)"]},{"cell_type":"markdown","metadata":{"id":"aqi1L_J9lghk"},"source":["#Increase the number of layers+ Change the size of each layer"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xjSDGThrlW-1"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader"]},{"cell_type":"markdown","metadata":{"id":"xoF_2fl-F0hi"},"source":["Neural Network Architecture:\n","\n","Original Model (SimpleNN): It includes two linear layers (an input and an output layer) with ReLU activation function. This structure is relatively simple and performs basic feature extraction.\n","\n","Improved Model (DeepNN): This model increases depth by adding multiple hidden layers. This allows the model to learn more complex patterns and generally improves prediction performance."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zWh43mzHlqhh"},"outputs":[],"source":["# Define the neural network class\n","'''class SimpleNN(nn.Module):\n","    def __init__(self):\n","        super(SimpleNN, self).__init__()\n","        self.fc1 = nn.Linear(20, 32)\n","        self.fc2 = nn.Linear(32, 1)\n","        self.relu = nn.ReLU()''from sklearn.model_selection import train_test_split'''\n","\n","class DeepNN(nn.Module):\n","    def __init__(self):\n","        super(DeepNN, self).__init__()\n","        self.fc1 = nn.Linear(20, 32)  # Input layer\n","        self.bn1 = nn.BatchNorm1d(32)  # Batch normalization after first linear layer\n","        self.fc2 = nn.Linear(32, 64)  # First hidden layer\n","        self.bn2 = nn.BatchNorm1d(64)  # Batch normalization after second linear layer\n","        self.dropout = nn.Dropout(0.5)  # Dropout for regularization\n","        self.fc3 = nn.Linear(64, 64)  # Second hidden layer\n","        self.bn3 = nn.BatchNorm1d(64)  # Batch normalization after third linear layer\n","        self.fc4 = nn.Linear(64, 1)    # Output layer\n","        self.relu = nn.ReLU()  # ReLU activation used throughout\n","\n","    def forward(self, x):\n","        x = self.relu(self.bn1(self.fc1(x)))  # Activation -> BatchNorm\n","        x = self.relu(self.bn2(self.fc2(x)))  # Activation -> BatchNorm\n","        x = self.dropout(x)  # Applying dropout after activation\n","        x = self.relu(self.bn3(self.fc3(x)))  # Activation -> BatchNorm\n","        x = self.fc4(x)  # Output layer does not need activation if regression\n","        return x\n","\n","# Instantiate the model\n","model = DeepNN()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1715812947153,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"kqmcwWP1Wmsn","outputId":"63c0c3b9-c5e2-46af-a515-89acf39e870a"},"outputs":[{"data":{"text/plain":["39"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["county_info = finaldata['County'].unique().tolist()\n","len(county_info)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GHwEJe1_mlPr"},"outputs":[],"source":["class CountyDataset(Dataset): #classcification\n","    def __init__(self, finaldata):\n","        f =  finaldata.drop(columns=['Geography', 'Geographic Area Name','Biden_proportion','Estimate!!Households!!Median income (dollars)','Vote Count', 'Precinct','County',\n","                            'Estimate!!Families!!Median income (dollars)','Estimate!!Nonfamily households!!Median income (dollars)', 'Estimate!!Married-couple families!!Median income (dollars)']).astype(float)\n","        self.X = f.values.tolist()\n","        self.y = finaldata['Biden_proportion'].tolist()\n","        self.county_info = finaldata['County'].tolist()\n","\n","    def __len__(self):\n","        return len(self.X)\n","\n","    def __getitem__(self, idx):\n","        return torch.tensor(self.X[idx], dtype=torch.float32), torch.tensor(self.y[idx], dtype=torch.float32), self.county_info[idx]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8KYDOAiaxaWT"},"outputs":[],"source":["dataset = CountyDataset(finaldata)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iIjWzjpNxeFG"},"outputs":[],"source":["class CountyDataLoader: #load the data with county\n","    def __init__(self, dataset, random_state=None):\n","        self.dataset = dataset\n","        self.counties = list(set(dataset.county_info))\n","        self.random_state = random_state\n","\n","    def __iter__(self): #load the data with each county\n","        for county in self.counties:\n","            county_indices = [i for i, c in enumerate(self.dataset.county_info) if c == county]\n","            batch_X = [self.dataset.X[i] for i in county_indices]\n","            batch_y = [self.dataset.y[i] for i in county_indices]\n","            yield batch_X, batch_y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"57rqMn10vXct"},"outputs":[],"source":["county_dataloader = CountyDataLoader(dataset)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mjO-CP7i0zl8"},"outputs":[],"source":["# Define the custom loss function\n","def custom_loss(predictions, county_statistics):\n","    # Calculate the average prediction within the batch\n","    avg_prediction = torch.mean(predictions)\n","\n","    # Assume county_statistics is a tuple containing the required statistics (e.g., Biden proportion)\n","    biden_proportion = county_statistics[0]\n","\n","    # Calculate the MSE loss(Mean Squared Error)\n","    mse_loss = nn.MSELoss()(avg_prediction, biden_proportion)\n","\n","    return mse_loss"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HsKsJA30vZ5O"},"outputs":[],"source":["# Define the loss function\n","class LossFunction(nn.Module):\n","    def __init__(self):\n","        super(LossFunction, self).__init__()\n","\n","    def forward(self, predictions, mean_l): #calculate MSE\n","        mean_p = torch.mean(predictions)\n","        mean_l = torch.tensor(mean_l, dtype=torch.float32)\n","\n","        return torch.square(mean_p - mean_l)"]},{"cell_type":"markdown","metadata":{"id":"wnRg68FBkpKX"},"source":["#Same Optimizer: SGD"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"Y-3RyCZ4knf6","outputId":"4438775e-f524-4bd4-efb9-2a9b4b594281"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch [1/500], Loss: 0.0016902312636375427\n","Epoch [11/500], Loss: 0.01160120777785778\n","Epoch [21/500], Loss: 0.010818789713084698\n","Epoch [31/500], Loss: 0.010936754755675793\n","Epoch [41/500], Loss: 0.010153600946068764\n","Epoch [51/500], Loss: 0.011961684562265873\n","Epoch [61/500], Loss: 0.011994392611086369\n","Epoch [71/500], Loss: 0.010746338404715061\n","Epoch [81/500], Loss: 0.012186144478619099\n","Epoch [91/500], Loss: 0.01229118648916483\n","Epoch [101/500], Loss: 0.010162792168557644\n","Epoch [111/500], Loss: 0.010823502205312252\n","Epoch [121/500], Loss: 0.011859607882797718\n","Epoch [131/500], Loss: 0.011282544583082199\n","Epoch [141/500], Loss: 0.013090183027088642\n","Epoch [151/500], Loss: 0.013287335634231567\n","Epoch [161/500], Loss: 0.013292008079588413\n","Epoch [171/500], Loss: 0.011231156066060066\n","Epoch [181/500], Loss: 0.012458673678338528\n","Epoch [191/500], Loss: 0.011675206013023853\n","Epoch [201/500], Loss: 0.011080969125032425\n","Epoch [211/500], Loss: 0.012279875576496124\n","Epoch [221/500], Loss: 0.012395736761391163\n","Epoch [231/500], Loss: 0.011889784596860409\n","Epoch [241/500], Loss: 0.010672430507838726\n","Epoch [251/500], Loss: 0.011923449113965034\n","Epoch [261/500], Loss: 0.012605629861354828\n","Epoch [271/500], Loss: 0.013718824833631516\n","Epoch [281/500], Loss: 0.011608566157519817\n","Epoch [291/500], Loss: 0.012637772597372532\n","Epoch [301/500], Loss: 0.010352101176977158\n","Epoch [311/500], Loss: 0.011269999668002129\n","Epoch [321/500], Loss: 0.011204035952687263\n","Epoch [331/500], Loss: 0.011307844892144203\n","Epoch [341/500], Loss: 0.01268296130001545\n","Epoch [351/500], Loss: 0.012690279632806778\n","Epoch [361/500], Loss: 0.011060536839067936\n","Epoch [371/500], Loss: 0.011889849789440632\n","Epoch [381/500], Loss: 0.012034782208502293\n","Epoch [391/500], Loss: 0.012308717705309391\n","Epoch [401/500], Loss: 0.010742569342255592\n","Epoch [411/500], Loss: 0.010047368705272675\n","Epoch [421/500], Loss: 0.01194535382091999\n","Epoch [431/500], Loss: 0.00942586176097393\n","Epoch [441/500], Loss: 0.011331118643283844\n","Epoch [451/500], Loss: 0.010029429569840431\n","Epoch [461/500], Loss: 0.010183858685195446\n","Epoch [471/500], Loss: 0.011605329811573029\n","Epoch [481/500], Loss: 0.010698246769607067\n","Epoch [491/500], Loss: 0.0113843884319067\n"]}],"source":["optimizer = torch.optim.SGD(model.parameters(), lr=0.001) #SGD optimizer\n","import torch\n","num_epochs = 500\n","losses = []\n","for epoch in range(num_epochs):\n","    for i,(train_X, train_y)  in enumerate(county_dataloader):\n","      epoch_loss = 0.0\n","      if i<32:\n","\n","        # Convert lists to PyTorch tensors\n","        features = torch.tensor(train_X)\n","        target = torch.tensor(train_y)\n","\n","        # Forward pass, loss computation, and backward pass\n","        outputs = model(features)\n","        # print(outputs) # issue here\n","        loss = custom_loss(outputs, target)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        epoch_loss += loss.item()\n","        average_epoch_loss = epoch_loss /50\n","       # losses.append(loss.item())\n","        losses.append(average_epoch_loss)\n","\n","    if epoch % 10 == 0:\n","        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"4rb1gTaukve7"},"outputs":[],"source":["import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"eXRVYbM-kuOM","outputId":"bc832d48-90d4-49fd-bc2c-1207a921bae4"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(losses[10:], label='Training Loss') #The code plots only the data points for the training loss after excluding the first 10 epochs.\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"fYCH7G1Fk-Kl","outputId":"570d76c9-70b1-4017-fdea-77870d611797"},"outputs":[{"name":"stdout","output_type":"stream","text":["Average RMSE: (0.19760883446623156, 7)\n"]}],"source":["import numpy as np\n","import time\n","\n","rmse_total = 0\n","num_batches = 0\n","losses = []\n","timestamps = []\n","epoch_test_loss = 0.0\n","\n","for i, (val_X, val_y) in enumerate(county_dataloader):\n","    if i >= 32:\n","        start_time = time.time()\n","        var = 0.0\n","\n","        features = torch.tensor(val_X)\n","        target = torch.tensor(val_y)\n","\n","        outputs = model(features)\n","        loss = custom_loss(outputs, target)\n","\n","        rmse_total += loss.item()\n","        var += loss.item()\n","        avg = var / 12\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        num_batches += 1\n","        end_time = time.time()\n","        losses.append(avg)\n","        timestamps.append(end_time - start_time)\n","\n","average_rmse = np.sqrt(rmse_total / max(num_batches, 1))\n","\n","print(f'Average RMSE: {average_rmse, num_batches}')\n"]},{"cell_type":"markdown","metadata":{"id":"_oe3RfX8lCUp"},"source":["Original(Simple NN+ SGD) RMSE: Average RMSE: (0.27092237316695306, 7)\n"]},{"cell_type":"markdown","metadata":{"id":"faHTxH5smikb"},"source":["#Use a different optimizer (ADAM, ADAGRAD)"]},{"cell_type":"markdown","metadata":{"id":"zYgK2Khek7vM"},"source":[" MY prediction: To improve the model's performance, we'll switch to using the Adam optimizer. Adam is well-regarded for its effectiveness across a wide range of deep learning models and provides a good starting point for many problems. One of the key advantages of Adam is its ability to automatically adjust the learning rate during training, which often leads to better performance in comparison to optimizers that keep the learning rate constant.\n","\n","SGD(previous) is a simpler and older optimization technique that has been extensively used due to its straightforward implementation and reliable performance across various types of problems. However, in complex scenarios involving deep learning, Adam is often preferred because of its robustness and ease of use, particularly in settings where choosing the right learning rate is critical for achieving good results."]},{"cell_type":"markdown","source":["##ADAM"],"metadata":{"id":"J1ghs9oBfiz4"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Y6l1xrVszh12","outputId":"82bc6d70-8a80-4997-df9d-d5268fa480c7"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch [1/500], Loss: 0.01540370937436819\n","Epoch [11/500], Loss: 0.0005605406477116048\n","Epoch [21/500], Loss: 0.001515284995548427\n","Epoch [31/500], Loss: 0.0049661435186862946\n","Epoch [41/500], Loss: 0.0004311050579417497\n","Epoch [51/500], Loss: 1.912142579385545e-05\n","Epoch [61/500], Loss: 0.00019197205256205052\n","Epoch [71/500], Loss: 0.0005274685099720955\n","Epoch [81/500], Loss: 0.0023357148747891188\n","Epoch [91/500], Loss: 1.1675788300635759e-05\n","Epoch [101/500], Loss: 0.0013871948467567563\n","Epoch [111/500], Loss: 0.005039393436163664\n","Epoch [121/500], Loss: 0.002006157534196973\n","Epoch [131/500], Loss: 0.000769845035392791\n","Epoch [141/500], Loss: 0.0003438386193010956\n","Epoch [151/500], Loss: 0.00032806844683364034\n","Epoch [161/500], Loss: 8.227911894209683e-05\n","Epoch [171/500], Loss: 1.1318477390886983e-06\n","Epoch [181/500], Loss: 0.0002961463760584593\n","Epoch [191/500], Loss: 0.0018856109818443656\n","Epoch [201/500], Loss: 0.0014972620410844684\n","Epoch [211/500], Loss: 6.980981197557412e-06\n","Epoch [221/500], Loss: 0.00030146900098770857\n","Epoch [231/500], Loss: 0.0007299342541955411\n","Epoch [241/500], Loss: 0.003987729083746672\n","Epoch [251/500], Loss: 0.0046197110787034035\n","Epoch [261/500], Loss: 0.0002773006272036582\n","Epoch [271/500], Loss: 0.0028542957734316587\n","Epoch [281/500], Loss: 0.0005640062154270709\n","Epoch [291/500], Loss: 0.00010657761595211923\n","Epoch [301/500], Loss: 2.5305160306743346e-05\n","Epoch [311/500], Loss: 8.400412480114028e-05\n","Epoch [321/500], Loss: 1.2888440323877148e-05\n","Epoch [331/500], Loss: 0.002624334068968892\n","Epoch [341/500], Loss: 6.952032708795741e-05\n","Epoch [351/500], Loss: 0.0001311623927904293\n","Epoch [361/500], Loss: 0.0019369940273463726\n","Epoch [371/500], Loss: 0.0008547221077606082\n","Epoch [381/500], Loss: 9.155186853604391e-05\n","Epoch [391/500], Loss: 0.001471994910389185\n","Epoch [401/500], Loss: 0.003080815775319934\n","Epoch [411/500], Loss: 0.004954070318490267\n","Epoch [421/500], Loss: 0.0004342567117419094\n","Epoch [431/500], Loss: 0.0031107293907552958\n","Epoch [441/500], Loss: 5.36948318767827e-05\n","Epoch [451/500], Loss: 0.0004716998082585633\n","Epoch [461/500], Loss: 0.00033659691689535975\n","Epoch [471/500], Loss: 0.0035498649813234806\n","Epoch [481/500], Loss: 0.002535384614020586\n","Epoch [491/500], Loss: 4.976103446097113e-05\n"]}],"source":["optimizer2 = optim.Adam(model.parameters(), lr=0.001) #New: SGD ->> ADAM\n","#optimizer = torch.optim.SGD(model.parameters(), lr=0.001) : Original\n","#optimizer = optim.Nadam(model.parameters(), lr=0.001)\n","#optimizer = optim.RMSprop(model.parameters(), lr=0.001)\n","\n","import torch\n","num_epochs = 500\n","losses = []\n","for epoch in range(num_epochs):\n","    for i,(train_X, train_y)  in enumerate(county_dataloader):\n","      epoch_loss = 0.0\n","      if i<32:\n","\n","        # Convert lists to PyTorch tensors\n","        features = torch.tensor(train_X)\n","        target = torch.tensor(train_y)\n","\n","        # Forward pass, loss computation, and backward pass\n","        outputs = model(features)\n","        # print(outputs) # issue here\n","        loss = custom_loss(outputs, target)\n","        optimizer2.zero_grad()\n","        loss.backward()\n","        optimizer2.step()\n","        epoch_loss += loss.item()\n","        average_epoch_loss = epoch_loss /50\n","       # losses.append(loss.item())\n","        losses.append(average_epoch_loss)\n","\n","    if epoch % 10 == 0:\n","        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"rOsYwIy0AheP","outputId":"37fb63dc-8b65-4a91-e082-b38d5bd0296e"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(losses[10:], label='Training Loss') #The code plots only the data points for the training loss after excluding the first 10 epochs.\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"4G5sRB1b-CRh"},"outputs":[],"source":["optimizer = torch.optim.SGD(model.parameters(), lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"1OhNXI7wzupj","outputId":"6c7d47f8-dd96-4096-e0e0-b59ae55368c8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch [1/500], Loss: 0.0001872780849225819\n","Epoch [11/500], Loss: 0.000631410744972527\n","Epoch [21/500], Loss: 0.00036291166907176375\n","Epoch [31/500], Loss: 0.0014113145880401134\n","Epoch [41/500], Loss: 0.00451246090233326\n","Epoch [51/500], Loss: 0.0005796530749648809\n","Epoch [61/500], Loss: 5.956563472864218e-05\n","Epoch [71/500], Loss: 0.00013113918248564005\n","Epoch [81/500], Loss: 0.00025427588843740523\n","Epoch [91/500], Loss: 0.0005682068294845521\n","Epoch [101/500], Loss: 0.00012975111894775182\n","Epoch [111/500], Loss: 0.00020722627232316881\n","Epoch [121/500], Loss: 5.506264278665185e-05\n","Epoch [131/500], Loss: 0.00022211654868442565\n","Epoch [141/500], Loss: 0.00024951001978479326\n","Epoch [151/500], Loss: 0.00018409342737868428\n","Epoch [161/500], Loss: 0.0008010242599993944\n","Epoch [171/500], Loss: 0.000382954312954098\n","Epoch [181/500], Loss: 0.0005315709277056158\n","Epoch [191/500], Loss: 5.3108993597561494e-05\n","Epoch [201/500], Loss: 0.0002552843652665615\n","Epoch [211/500], Loss: 0.00030929650529287755\n","Epoch [221/500], Loss: 0.0004764145705848932\n","Epoch [231/500], Loss: 0.0009858492994681\n","Epoch [241/500], Loss: 0.00016246447921730578\n","Epoch [251/500], Loss: 0.0005471099866554141\n","Epoch [261/500], Loss: 1.5994819477782585e-05\n","Epoch [271/500], Loss: 0.00012304651318117976\n","Epoch [281/500], Loss: 0.0013816837454214692\n","Epoch [291/500], Loss: 0.00014247612853068858\n","Epoch [301/500], Loss: 0.0001312395470449701\n","Epoch [311/500], Loss: 0.00016057900211308151\n","Epoch [321/500], Loss: 7.634137728018686e-05\n","Epoch [331/500], Loss: 0.0004006062517873943\n","Epoch [341/500], Loss: 0.0001207360764965415\n","Epoch [351/500], Loss: 0.0006269971490837634\n","Epoch [361/500], Loss: 0.00013605105050373822\n","Epoch [371/500], Loss: 0.0006485852063633502\n","Epoch [381/500], Loss: 4.773775071953423e-05\n","Epoch [391/500], Loss: 2.1603627828881145e-05\n","Epoch [401/500], Loss: 0.0013918518088757992\n","Epoch [411/500], Loss: 8.9323686552234e-05\n","Epoch [421/500], Loss: 0.00048405834240838885\n","Epoch [431/500], Loss: 0.00042486318852752447\n","Epoch [441/500], Loss: 2.5471241315244697e-05\n","Epoch [451/500], Loss: 0.0008794513996690512\n","Epoch [461/500], Loss: 0.0006785373552702367\n","Epoch [471/500], Loss: 0.00015278522914741188\n","Epoch [481/500], Loss: 1.926060031109955e-05\n","Epoch [491/500], Loss: 7.160261884564534e-05\n"]}],"source":["import torch\n","num_epochs = 500\n","losses = []\n","for epoch in range(num_epochs):\n","    for i,(train_X, train_y)  in enumerate(county_dataloader):\n","      epoch_loss = 0.0\n","      if i<32:\n","\n","        # Convert lists to PyTorch tensors\n","        features = torch.tensor(train_X)\n","        target = torch.tensor(train_y)\n","\n","        # Forward pass, loss computation, and backward pass\n","        outputs = model(features)\n","        # print(outputs) # issue here\n","        loss = custom_loss(outputs, target)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        epoch_loss += loss.item()\n","        average_epoch_loss = epoch_loss /50\n","       # losses.append(loss.item())\n","        losses.append(average_epoch_loss)\n","\n","    if epoch % 10 == 0:\n","        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Ahhe0kItC5rA","outputId":"6a91c25c-f032-43b5-9c39-613679bdee47"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(losses[10:], label='Training Loss') #The code plots only the data points for the training loss after excluding the first 10 epochs.\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"z2na8RWiM2I_"},"source":["We switched to the Adam optimizer to enhance the model's performance, touted for its efficacy across a broad spectrum of deep learning models and its capability to automatically adjust the learning rate during training. However, actual experimental results indicated that using Adam led to unstable and inconsistent loss values. Despite Adam's advantages, such as adapting the learning rate, it does not always guarantee stable convergence in the training process.\n","\n","On the other hand, SGD (Stochastic Gradient Descent), though simpler and more traditional, proved to be more stable in reducing loss during our experiments. This stability underscores that SGD remains a viable option even in complex deep learning scenarios. The automatic adjustment of the learning rate by Adam can be beneficial, but it does not universally translate to the best outcome in every situation.\n","\n","These observations suggest that the choice of optimizer significantly impacts model performance, and the optimal optimizer may vary depending on the specific data or model architecture. Therefore, it is crucial to experiment with various optimizers under different settings and conditions to derive the best results."]},{"cell_type":"markdown","metadata":{"id":"pd9sno-ZKYI_"},"source":["In summary, the text advocates for the use of the Adam optimizer in complex deep learning tasks due to its adaptive learning rate capabilities, which generally yield better performance compared to the traditional SGD optimizer."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M5QqEvsgNKfG"},"outputs":[],"source":["model.eval()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"hAQiMqax4Noz","outputId":"2565ebc4-85fa-47f0-fc00-7606a740e895"},"outputs":[{"name":"stdout","output_type":"stream","text":["Average RMSE: (0.35734397367269594, 7)\n"]}],"source":["import numpy as np\n","import time\n","\n","rmse_total = 0\n","num_batches = 0\n","losses = []\n","timestamps = []\n","epoch_test_loss = 0.0\n","\n","for i, (val_X, val_y) in enumerate(county_dataloader):\n","    if i >= 32:\n","        start_time = time.time()\n","        var = 0.0\n","\n","        features = torch.tensor(val_X)\n","        target = torch.tensor(val_y)\n","\n","        outputs = model(features)\n","        loss = custom_loss(outputs, target)\n","\n","        rmse_total += loss.item()\n","        var += loss.item()\n","        avg = var / 12\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        num_batches += 1\n","        end_time = time.time()\n","        losses.append(avg)\n","        timestamps.append(end_time - start_time)\n","\n","average_rmse = np.sqrt(rmse_total / max(num_batches, 1))\n","\n","print(f'Average RMSE: {average_rmse, num_batches}') #Average RMSE: (0.27092237316695306, 7)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"k-3dHIJiRO33","outputId":"cffdf903-1cb1-4799-d126-3c1a1fa2dfc0"},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, 'Loss Versus Time for Test Data')"]},"execution_count":28,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Plotting the loss versus time for both training and test data\n","plt.plot(timestamps, losses, marker='o')\n","plt.xlabel('Time (seconds)')\n","plt.ylabel('Loss')\n","plt.title('Loss Versus Time for Test Data')\n"]},{"cell_type":"markdown","metadata":{"id":"XwaeiKLLvcou"},"source":["##Evaluation"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"v6FwfMzYz4ak","outputId":"62a87828-2769-4695-c22b-5ca7114452cc"},"outputs":[{"name":"stderr","output_type":"stream","text":["<ipython-input-29-c19498293693>:1: DtypeWarning: Columns (2,3,4) have mixed types. Specify dtype option on import or set low_memory=False.\n","  merged_df = pd.read_csv(\"/content/drive/MyDrive/processed_data.csv\")\n"]}],"source":["merged_df = pd.read_csv(\"/content/drive/MyDrive/processed_data.csv\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WUd8sXfti7kD"},"outputs":[],"source":["class CountyDataset2(Dataset):\n","    def __init__(self, finaldata):\n","        f =  finaldata.drop(columns=['Geography', 'Geographic Area Name','Precinct','County', 'Vote Count','Estimate!!Households!!Median income (dollars)','average_Biden_proportion',\n","                            'Estimate!!Families!!Median income (dollars)','Estimate!!Nonfamily households!!Median income (dollars)', 'Estimate!!Married-couple families!!Median income (dollars)']).astype(float)\n","        self.X = f.values.tolist()\n","        self.y = finaldata['average_Biden_proportion'].tolist()\n","        self.county_info = finaldata['County'].tolist()\n","\n","    def __len__(self):\n","        return len(self.X)\n","\n","    def __getitem__(self, idx):\n","        return torch.tensor(self.X[idx], dtype=torch.float32), torch.tensor(self.y[idx], dtype=torch.float32), self.county_info[idx]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ecuQ8qRmiXMK"},"outputs":[],"source":["dataset_evaluation = CountyDataset2(merged_df)\n","county_dataloader2 = CountyDataLoader(dataset_evaluation)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5F0Pg95jjUjx"},"outputs":[],"source":["rmse_total = 0\n","num_batches = 0\n","losses1 = []\n","timestamps1 = []\n","for i,(val_X, val_y) in enumerate(county_dataloader2):\n","    var = 0.0\n","    start_time = time.time()\n","\n","\n","    features = torch.tensor(val_X)\n","    target = torch.tensor(val_y)\n","\n","\n","    outputs = model(features)\n","    loss = custom_loss(outputs, target)\n","\n","    rmse_total += loss.item()\n","    var += loss.item()\n","    avg = var/62\n","    optimizer.zero_grad()\n","    loss.backward()\n","    optimizer.step()\n","    end_time = time.time()\n","\n","    num_batches += 1\n","    losses1.append(avg)\n","    timestamps1.append(end_time - start_time)\n","\n","average_rmse = np.sqrt(rmse_total / num_batches)\n","\n","print(f'Average RMSE: {average_rmse,num_batches }') #Average RMSE: (0.17563571724326635, 38)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jhN7QYMHSbym"},"outputs":[],"source":["# Plotting the loss versus time\n","plt.plot(timestamps1, losses1, marker='o')\n","plt.xlabel('Time (seconds)')\n","plt.ylabel('Loss')\n","plt.title('Loss Versus Time for Evaluation Data')\n","plt.show()"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"15Xf7fukMFmOL0q60cKKGY6WqQU6349RX","timestamp":1710712944084},{"file_id":"1lTdTlzIY-n4TrXe2P09o54Y1VUN7bN7P","timestamp":1706910303427}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
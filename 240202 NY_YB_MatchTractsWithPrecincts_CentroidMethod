{"cells":[{"cell_type":"markdown","source":["# FINAL FILE\n","\n"],"metadata":{"id":"x3hXbw-BQpjs"}},{"cell_type":"code","source":["bidenprop_county = pd.read_csv(\"/content/drive/MyDrive/capstone_yb/Voting ML/DATA/bidenprop_county.csv\")\n","#bidenprop_county.head()\n","bidenprop_county_WA = bidenprop_county[bidenprop_county['State'] == 'WASHINGTON']\n","bidenprop_county_WA"],"metadata":{"id":"dgxBmNSGQvIU"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kCnMt1H-PkGA"},"outputs":[],"source":["import geopandas\n","import numpy as np\n","import pandas as pd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13614,"status":"ok","timestamp":1711077920896,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"X-E6yKsLQ3GG","outputId":"95cb8d06-ef8f-448e-caac-6450dbbf6a05"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: folium in /usr/local/lib/python3.10/dist-packages (0.14.0)\n","Requirement already satisfied: branca>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from folium) (0.7.1)\n","Requirement already satisfied: jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from folium) (3.1.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from folium) (1.25.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from folium) (2.31.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2>=2.9->folium) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (2024.2.2)\n","Requirement already satisfied: mapclassify in /usr/local/lib/python3.10/dist-packages (2.6.1)\n","Requirement already satisfied: networkx>=2.7 in /usr/local/lib/python3.10/dist-packages (from mapclassify) (3.2.1)\n","Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.10/dist-packages (from mapclassify) (1.25.2)\n","Requirement already satisfied: pandas!=1.5.0,>=1.4 in /usr/local/lib/python3.10/dist-packages (from mapclassify) (1.5.3)\n","Requirement already satisfied: scikit-learn>=1.0 in /usr/local/lib/python3.10/dist-packages (from mapclassify) (1.2.2)\n","Requirement already satisfied: scipy>=1.8 in /usr/local/lib/python3.10/dist-packages (from mapclassify) (1.11.4)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas!=1.5.0,>=1.4->mapclassify) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas!=1.5.0,>=1.4->mapclassify) (2023.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0->mapclassify) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0->mapclassify) (3.3.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas!=1.5.0,>=1.4->mapclassify) (1.16.0)\n"]}],"source":["# Install folium and mapclassify so the explore method of a GeoDataFrame can work properly.\n","! pip install folium\n","! pip install mapclassify"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":718,"status":"ok","timestamp":1711077921610,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"qxZL9SnrRkxs","outputId":"a0d25725-470a-47c3-93fa-fc4e4c41af7f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"9BTNv5ayMykr"},"source":["## Load Geospatial Data for Census Tracts"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kFGvqP9lGzny"},"outputs":[],"source":["# Download the shapefile of New York State census tracts from the following website:\n","# https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2020&layergroup=Census+Tracts\n","# The default file name is tl_2020_36_tract.zip\n","# This file needs to be manually uploaded to this Colab environment."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":615},"executionInfo":{"elapsed":30149,"status":"ok","timestamp":1711077951756,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"Vnss3jpaKizr","outputId":"82711fc3-2602-42d8-b7b1-231d30f20c13"},"outputs":[{"output_type":"stream","name":"stdout","text":["(5411, 13)\n"]},{"output_type":"execute_result","data":{"text/plain":["     STATEFP COUNTYFP TRACTCE        GEOID NAME          NAMELSAD  MTFCC  \\\n","0         36      047  000700  36047000700    7    Census Tract 7  G5020   \n","1         36      047  000900  36047000900    9    Census Tract 9  G5020   \n","2         36      047  001100  36047001100   11   Census Tract 11  G5020   \n","3         36      047  001300  36047001300   13   Census Tract 13  G5020   \n","4         36      047  002000  36047002000   20   Census Tract 20  G5020   \n","...      ...      ...     ...          ...  ...               ...    ...   \n","5406      36      081  027900  36081027900  279  Census Tract 279  G5020   \n","5407      36      081  028000  36081028000  280  Census Tract 280  G5020   \n","5408      36      081  028100  36081028100  281  Census Tract 281  G5020   \n","5409      36      081  028200  36081028200  282  Census Tract 282  G5020   \n","5410      36      081  028400  36081028400  284  Census Tract 284  G5020   \n","\n","     FUNCSTAT   ALAND  AWATER     INTPTLAT      INTPTLON  \\\n","0           S  176774       0  +40.6923505  -073.9973434   \n","1           S  163469       0  +40.6917206  -073.9916018   \n","2           S  168507       0  +40.6932903  -073.9877087   \n","3           S  293167       0  +40.6976150  -073.9883586   \n","4           S  154138       0  +40.6480407  -074.0159276   \n","...       ...     ...     ...          ...           ...   \n","5406        S  177155       0  +40.7516729  -073.8802222   \n","5407        S  165398       0  +40.6883158  -073.7797191   \n","5408        S  174441       0  +40.7522203  -073.8825920   \n","5409        S  182472       0  +40.6849947  -073.7738873   \n","5410        S  429455       0  +40.6825033  -073.7778568   \n","\n","                                               geometry  \n","0     POLYGON ((-74.00154 40.69279, -74.00132 40.693...  \n","1     POLYGON ((-73.99405 40.69090, -73.99374 40.691...  \n","2     POLYGON ((-73.99073 40.69305, -73.99045 40.693...  \n","3     POLYGON ((-73.99141 40.69863, -73.99131 40.699...  \n","4     POLYGON ((-74.01867 40.64741, -74.01809 40.647...  \n","...                                                 ...  \n","5406  POLYGON ((-73.88189 40.75208, -73.88096 40.752...  \n","5407  POLYGON ((-73.78243 40.69034, -73.78160 40.690...  \n","5408  POLYGON ((-73.88431 40.75567, -73.88351 40.755...  \n","5409  POLYGON ((-73.77709 40.68820, -73.77662 40.688...  \n","5410  POLYGON ((-73.78302 40.68428, -73.78213 40.684...  \n","\n","[5411 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-d148b8b3-76da-4682-906d-df5edeb63cc0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>TRACTCE</th>\n","      <th>GEOID</th>\n","      <th>NAME</th>\n","      <th>NAMELSAD</th>\n","      <th>MTFCC</th>\n","      <th>FUNCSTAT</th>\n","      <th>ALAND</th>\n","      <th>AWATER</th>\n","      <th>INTPTLAT</th>\n","      <th>INTPTLON</th>\n","      <th>geometry</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>000700</td>\n","      <td>36047000700</td>\n","      <td>7</td>\n","      <td>Census Tract 7</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>176774</td>\n","      <td>0</td>\n","      <td>+40.6923505</td>\n","      <td>-073.9973434</td>\n","      <td>POLYGON ((-74.00154 40.69279, -74.00132 40.693...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>000900</td>\n","      <td>36047000900</td>\n","      <td>9</td>\n","      <td>Census Tract 9</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>163469</td>\n","      <td>0</td>\n","      <td>+40.6917206</td>\n","      <td>-073.9916018</td>\n","      <td>POLYGON ((-73.99405 40.69090, -73.99374 40.691...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>001100</td>\n","      <td>36047001100</td>\n","      <td>11</td>\n","      <td>Census Tract 11</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>168507</td>\n","      <td>0</td>\n","      <td>+40.6932903</td>\n","      <td>-073.9877087</td>\n","      <td>POLYGON ((-73.99073 40.69305, -73.99045 40.693...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>001300</td>\n","      <td>36047001300</td>\n","      <td>13</td>\n","      <td>Census Tract 13</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>293167</td>\n","      <td>0</td>\n","      <td>+40.6976150</td>\n","      <td>-073.9883586</td>\n","      <td>POLYGON ((-73.99141 40.69863, -73.99131 40.699...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>002000</td>\n","      <td>36047002000</td>\n","      <td>20</td>\n","      <td>Census Tract 20</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>154138</td>\n","      <td>0</td>\n","      <td>+40.6480407</td>\n","      <td>-074.0159276</td>\n","      <td>POLYGON ((-74.01867 40.64741, -74.01809 40.647...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5406</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>027900</td>\n","      <td>36081027900</td>\n","      <td>279</td>\n","      <td>Census Tract 279</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>177155</td>\n","      <td>0</td>\n","      <td>+40.7516729</td>\n","      <td>-073.8802222</td>\n","      <td>POLYGON ((-73.88189 40.75208, -73.88096 40.752...</td>\n","    </tr>\n","    <tr>\n","      <th>5407</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>028000</td>\n","      <td>36081028000</td>\n","      <td>280</td>\n","      <td>Census Tract 280</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>165398</td>\n","      <td>0</td>\n","      <td>+40.6883158</td>\n","      <td>-073.7797191</td>\n","      <td>POLYGON ((-73.78243 40.69034, -73.78160 40.690...</td>\n","    </tr>\n","    <tr>\n","      <th>5408</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>028100</td>\n","      <td>36081028100</td>\n","      <td>281</td>\n","      <td>Census Tract 281</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>174441</td>\n","      <td>0</td>\n","      <td>+40.7522203</td>\n","      <td>-073.8825920</td>\n","      <td>POLYGON ((-73.88431 40.75567, -73.88351 40.755...</td>\n","    </tr>\n","    <tr>\n","      <th>5409</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>028200</td>\n","      <td>36081028200</td>\n","      <td>282</td>\n","      <td>Census Tract 282</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>182472</td>\n","      <td>0</td>\n","      <td>+40.6849947</td>\n","      <td>-073.7738873</td>\n","      <td>POLYGON ((-73.77709 40.68820, -73.77662 40.688...</td>\n","    </tr>\n","    <tr>\n","      <th>5410</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>028400</td>\n","      <td>36081028400</td>\n","      <td>284</td>\n","      <td>Census Tract 284</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>429455</td>\n","      <td>0</td>\n","      <td>+40.6825033</td>\n","      <td>-073.7778568</td>\n","      <td>POLYGON ((-73.78302 40.68428, -73.78213 40.684...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5411 rows × 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d148b8b3-76da-4682-906d-df5edeb63cc0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d148b8b3-76da-4682-906d-df5edeb63cc0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d148b8b3-76da-4682-906d-df5edeb63cc0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e2a0fbaf-9925-412d-b0ed-feaab44f7a25\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e2a0fbaf-9925-412d-b0ed-feaab44f7a25')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e2a0fbaf-9925-412d-b0ed-feaab44f7a25 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a8e95831-6d53-487c-8180-8c63bcd41ba7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('census_tracts')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a8e95831-6d53-487c-8180-8c63bcd41ba7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('census_tracts');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"census_tracts","summary":"{\n  \"name\": \"census_tracts\",\n  \"rows\": 5411,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"36\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COUNTYFP\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 62,\n        \"samples\": [\n          \"017\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRACTCE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3167,\n        \"samples\": [\n          \"413001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5411,\n        \"samples\": [\n          \"36059407802\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3167,\n        \"samples\": [\n          \"4130.01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAMELSAD\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3167,\n        \"samples\": [\n          \"Census Tract 4130.01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MTFCC\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"G5020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FUNCSTAT\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 78244511,\n        \"min\": 0,\n        \"max\": 1828343856,\n        \"num_unique_values\": 5385,\n        \"samples\": [\n          147490\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63909959,\n        \"min\": 0,\n        \"max\": 2713594574,\n        \"num_unique_values\": 2234,\n        \"samples\": [\n          1691363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INTPTLAT\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5410,\n        \"samples\": [\n          \"+40.7316176\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INTPTLON\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5410,\n        \"samples\": [\n          \"-073.5525031\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5411,\n        \"samples\": [\n          \"POLYGON ((-73.55685299999999 40.725465, -73.556536 40.726439, -73.556405 40.726952, -73.55623299999999 40.72736, -73.556083 40.727733, -73.555787 40.728280999999996, -73.555334 40.729068999999996, -73.555224 40.729316999999995, -73.555173 40.729431, -73.555118 40.729607, -73.555043 40.729993, -73.55438 40.733062, -73.55430299999999 40.733325, -73.55421299999999 40.733731, -73.554171 40.733985, -73.554104 40.73439, -73.553609 40.73679, -73.55335099999999 40.738040999999996, -73.553174 40.738031, -73.552799 40.738020999999996, -73.552453 40.737992, -73.55208499999999 40.737933, -73.551855 40.737883, -73.551673 40.737832999999995, -73.550782 40.73753, -73.55044699999999 40.737280999999996, -73.550298 40.73717, -73.549352 40.736515, -73.548205 40.73561, -73.547224 40.734826999999996, -73.54691199999999 40.734592, -73.546627 40.734409, -73.546133 40.734139, -73.546111 40.734131, -73.54611299999999 40.734108, -73.545771 40.733756, -73.55133599999999 40.733734999999996, -73.55136999999999 40.7336, -73.551456 40.729883, -73.551465 40.729535999999996, -73.55147 40.7293, -73.551817 40.725272, -73.552691 40.725302, -73.553238 40.725311999999995, -73.554 40.725303, -73.554413 40.725297999999995, -73.55514699999999 40.72528, -73.555756 40.725237, -73.556945 40.725139999999996, -73.55685299999999 40.725465))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}],"source":["zip_file_path = '/content/drive/MyDrive/capstone_yb/Voting ML/DATA/tl_2020_36_tract.zip'\n","census_tracts = geopandas.read_file( 'zip://' + zip_file_path)\n","\n","\n","print(census_tracts.shape)\n","census_tracts"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":823,"output_embedded_package_id":"1eqLe2Rp409PqHz0bqeUR_ZwaxuuZ15ng"},"executionInfo":{"elapsed":31606,"status":"ok","timestamp":1711077983360,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"aEUlVmCLLSDs","outputId":"fb9379b0-56ae-4f9a-a911-9124ccaa5835"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["census_tracts.explore(\"STATEFP\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GzRFkt6oMHFh"},"outputs":[],"source":["# Download the New York State voting data from this link:\n","# https://dataverse.harvard.edu/file.xhtml?fileId=5259468&version=40.0#\n","# Download the shapefile as a ZIP archive.\n","# The downloaded file is named ny_2020.zip.\n","# Manually upload the zip file to this colab environment."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n7gujdnuMJa6","colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"status":"ok","timestamp":1711077983361,"user_tz":240,"elapsed":21,"user":{"displayName":"YB Han","userId":"00742660692379233666"}},"outputId":"d61cbc0b-dda1-4e25-ceb2-0ec58d452434"},"outputs":[{"output_type":"stream","name":"stdout","text":["(15376, 11)\n"]},{"output_type":"execute_result","data":{"text/plain":["      STATEFP COUNTYFP  COUNTY        PRECINCT  G20PREDBID  G20PRERTRU  \\\n","0          36      001  Albany     Albany 12-9          30          26   \n","1          36      001  Albany      Albany 1-1          57          20   \n","2          36      001  Albany      Albany 1-2         248          38   \n","3          36      001  Albany      Albany 1-3         368          71   \n","4          36      001  Albany      Albany 1-4         349          60   \n","...       ...      ...     ...             ...         ...         ...   \n","15371      36      123   Yates     Jerusalem 3         186         316   \n","15372      36      123   Yates     Jerusalem 2         215         273   \n","15373      36      123   Yates         Italy 1         197         325   \n","15374      36      123   Yates     Jerusalem 1         281         309   \n","15375      36      031   Essex  Chesterfield 1         199         165   \n","\n","       G20PRELJOR  G20PREGHAW  G20PREIPIE  G20PREOWRI  \\\n","0               1           0           0           0   \n","1               1           0           0           0   \n","2               2           3           0           1   \n","3               7           7           0           0   \n","4               3           2           3           0   \n","...           ...         ...         ...         ...   \n","15371           8           3           0           5   \n","15372          12           1           1           5   \n","15373           5           2           3           0   \n","15374           5           5           3           0   \n","15375           4           2           1           1   \n","\n","                                                geometry  \n","0      POLYGON ((-8218479.283 5265873.297, -8218067.0...  \n","1      POLYGON ((-8216488.778 5256926.035, -8216484.4...  \n","2      POLYGON ((-8214177.005 5257088.554, -8214188.6...  \n","3      POLYGON ((-8214253.148 5257026.663, -8214220.3...  \n","4      POLYGON ((-8212448.658 5257024.999, -8212504.0...  \n","...                                                  ...  \n","15371  POLYGON ((-8598687.311 5251020.411, -8598690.8...  \n","15372  POLYGON ((-8586998.043 5236736.258, -8587058.2...  \n","15373  POLYGON ((-8612466.528 5261536.456, -8612466.6...  \n","15374  POLYGON ((-8583104.242 5255362.780, -8583086.8...  \n","15375  MULTIPOLYGON (((-8167954.222 5542509.836, -816...  \n","\n","[15376 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-9551e935-30cf-4a5a-b4b2-3fc1a9e37de8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>COUNTY</th>\n","      <th>PRECINCT</th>\n","      <th>G20PREDBID</th>\n","      <th>G20PRERTRU</th>\n","      <th>G20PRELJOR</th>\n","      <th>G20PREGHAW</th>\n","      <th>G20PREIPIE</th>\n","      <th>G20PREOWRI</th>\n","      <th>geometry</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>36</td>\n","      <td>001</td>\n","      <td>Albany</td>\n","      <td>Albany 12-9</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>POLYGON ((-8218479.283 5265873.297, -8218067.0...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>36</td>\n","      <td>001</td>\n","      <td>Albany</td>\n","      <td>Albany 1-1</td>\n","      <td>57</td>\n","      <td>20</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>POLYGON ((-8216488.778 5256926.035, -8216484.4...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>36</td>\n","      <td>001</td>\n","      <td>Albany</td>\n","      <td>Albany 1-2</td>\n","      <td>248</td>\n","      <td>38</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>POLYGON ((-8214177.005 5257088.554, -8214188.6...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>36</td>\n","      <td>001</td>\n","      <td>Albany</td>\n","      <td>Albany 1-3</td>\n","      <td>368</td>\n","      <td>71</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>POLYGON ((-8214253.148 5257026.663, -8214220.3...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>36</td>\n","      <td>001</td>\n","      <td>Albany</td>\n","      <td>Albany 1-4</td>\n","      <td>349</td>\n","      <td>60</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>POLYGON ((-8212448.658 5257024.999, -8212504.0...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>15371</th>\n","      <td>36</td>\n","      <td>123</td>\n","      <td>Yates</td>\n","      <td>Jerusalem 3</td>\n","      <td>186</td>\n","      <td>316</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>POLYGON ((-8598687.311 5251020.411, -8598690.8...</td>\n","    </tr>\n","    <tr>\n","      <th>15372</th>\n","      <td>36</td>\n","      <td>123</td>\n","      <td>Yates</td>\n","      <td>Jerusalem 2</td>\n","      <td>215</td>\n","      <td>273</td>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>POLYGON ((-8586998.043 5236736.258, -8587058.2...</td>\n","    </tr>\n","    <tr>\n","      <th>15373</th>\n","      <td>36</td>\n","      <td>123</td>\n","      <td>Yates</td>\n","      <td>Italy 1</td>\n","      <td>197</td>\n","      <td>325</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>POLYGON ((-8612466.528 5261536.456, -8612466.6...</td>\n","    </tr>\n","    <tr>\n","      <th>15374</th>\n","      <td>36</td>\n","      <td>123</td>\n","      <td>Yates</td>\n","      <td>Jerusalem 1</td>\n","      <td>281</td>\n","      <td>309</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>POLYGON ((-8583104.242 5255362.780, -8583086.8...</td>\n","    </tr>\n","    <tr>\n","      <th>15375</th>\n","      <td>36</td>\n","      <td>031</td>\n","      <td>Essex</td>\n","      <td>Chesterfield 1</td>\n","      <td>199</td>\n","      <td>165</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>MULTIPOLYGON (((-8167954.222 5542509.836, -816...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>15376 rows × 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9551e935-30cf-4a5a-b4b2-3fc1a9e37de8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9551e935-30cf-4a5a-b4b2-3fc1a9e37de8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9551e935-30cf-4a5a-b4b2-3fc1a9e37de8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9c93c7db-7c10-4eec-8624-b0c5e9f5093c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c93c7db-7c10-4eec-8624-b0c5e9f5093c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9c93c7db-7c10-4eec-8624-b0c5e9f5093c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_437b6fbd-0243-4c2c-967a-d97fd0033be6\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('precincts')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_437b6fbd-0243-4c2c-967a-d97fd0033be6 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('precincts');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"precincts","summary":"{\n  \"name\": \"precincts\",\n  \"rows\": 15376,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"36\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COUNTYFP\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 62,\n        \"samples\": [\n          \"089\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COUNTY\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 62,\n        \"samples\": [\n          \"St. Lawrence\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PRECINCT\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15356,\n        \"samples\": [\n          \"43030\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G20PREDBID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 182,\n        \"min\": 0,\n        \"max\": 2433,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          809\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G20PRERTRU\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 175,\n        \"min\": 0,\n        \"max\": 2459,\n        \"num_unique_values\": 803,\n        \"samples\": [\n          291\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G20PRELJOR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 50,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G20PREGHAW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 26,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G20PREIPIE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 25,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G20PREOWRI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 19,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 15376,\n        \"samples\": [\n          \"POLYGON ((-8230496.492726121 4984283.161383902, -8230502.596627394 4984273.243385932, -8230546.760051345 4984188.735124963, -8230597.846242307 4984095.324583091, -8230649.258488088 4984003.922693687, -8230699.828371466 4983912.092796447, -8230750.175467697 4983820.675397313, -8230801.094213472 4983728.999432663, -8230817.817282195 4983738.025823535, -8230980.748456767 4983828.922247137, -8230929.903080417 4983920.956566709, -8230879.433385316 4984012.14670508, -8230828.743227018 4984104.085510541, -8230778.116856388 4984195.824889657, -8230727.173239028 4984287.1807377385, -8230674.552473632 4984382.874689974, -8230496.492726121 4984283.161383902))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}],"source":["zip_path = '/content/drive/MyDrive/capstone_yb/Voting ML/DATA/ny_2020.zip'\n","precincts=geopandas.read_file('zip://'+zip_path)\n","print(precincts.shape)\n","precincts"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jv5C2iuNNpba"},"outputs":[],"source":["# Calculate the percentage of votes that goes to Biden.\n","# Only votes to Biden or Trump are counted.\n","precincts['Biden_proportion'] = precincts['G20PREDBID'] / (precincts['G20PREDBID'] + precincts['G20PRERTRU'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1711077983362,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"xhpWQ7uYOR5Q","outputId":"6919cb27-ca8c-428e-8279-9fdbc441c3d5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(15376, 12)"]},"metadata":{},"execution_count":15}],"source":["# For unknown reason, colab cannot display these voting precincts. Perhaps there are too many precincts?\n","#precincts.explore(\"Biden_proportion\", legend=False)\n","precincts.shape"]},{"cell_type":"markdown","metadata":{"id":"Ll0_WjkUOjUX"},"source":["## Approximate Census Tract by Voting Precincts\n","\n","Here is my approximation strategy:\n","- For a given census tract, find all precincts whose centroid (computed by geopands) is contained by the census tract.\n","- Use these precincts as an approximation to the census tract."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1711077983362,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"Rd8D-1noOSCl","outputId":"c9eca8f4-d7d3-449c-814a-d7a0a4692cf4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Geographic 2D CRS: EPSG:4269>\n","Name: NAD83\n","Axis Info [ellipsoidal]:\n","- Lat[north]: Geodetic latitude (degree)\n","- Lon[east]: Geodetic longitude (degree)\n","Area of Use:\n","- name: North America - onshore and offshore: Canada - Alberta; British Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec; Saskatchewan; Yukon. Puerto Rico. United States (USA) - Alabama; Alaska; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Hawaii; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming. US Virgin Islands. British Virgin Islands.\n","- bounds: (167.65, 14.92, -40.73, 86.45)\n","Datum: North American Datum 1983\n","- Ellipsoid: GRS 1980\n","- Prime Meridian: Greenwich"]},"metadata":{},"execution_count":16}],"source":["# Align the coordinates of these two geo data frames.\n","census_tracts.crs # 지구의 형태와 크기를 설명하는데 사용되며, 일반적으로는 지구를 평면 표현으로 변환"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LmrUHMIjPWC1"},"outputs":[],"source":["precincts = precincts.to_crs(4269)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1711077983362,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"9D82jMJYPWIS","outputId":"51ebd99c-8d94-4098-848f-4c0566db1d48"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["STATEFP                                                    36\n","COUNTYFP                                                  089\n","TRACTCE                                                490900\n","GEOID                                             36089490900\n","NAME                                                     4909\n","NAMELSAD                                    Census Tract 4909\n","MTFCC                                                   G5020\n","FUNCSTAT                                                    S\n","ALAND                                                28544487\n","AWATER                                                 460535\n","INTPTLAT                                          +44.6881249\n","INTPTLON                                         -074.9682145\n","geometry    POLYGON ((-75.011719 44.689629, -75.011076 44....\n","Name: 222, dtype: object"]},"metadata":{},"execution_count":18}],"source":["CENSUS_BLOCK_INDEX= 222 # The row index of a census block in data frame census_tracts\n","census_tracts.loc[CENSUS_BLOCK_INDEX]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"elapsed":371,"status":"ok","timestamp":1711077983723,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"q7SmF0_VWXHZ","outputId":"9b4338b4-3dc7-4e7a-93b2-61cb709fab36"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-19-a37e2ff35ffa>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x)) # 각 선거구의 중심이 인구조사 블록 다각형의 경계 내에 있는지 확인하는 부울 마스크를 생성합니다.\n"]},{"output_type":"execute_result","data":{"text/plain":["      STATEFP COUNTYFP        COUNTY   PRECINCT  G20PREDBID  G20PRERTRU  \\\n","12781      36      089  St. Lawrence  Potsdam 4         426         286   \n","12782      36      089  St. Lawrence  Potsdam 5         490         155   \n","12784      36      089  St. Lawrence  Potsdam 7         463         105   \n","\n","       G20PRELJOR  G20PREGHAW  G20PREIPIE  G20PREOWRI  \\\n","12781          11           2           3           2   \n","12782          10           8           5           6   \n","12784           5           6           1           5   \n","\n","                                                geometry  Biden_proportion  \n","12781  POLYGON ((-75.04612 44.69213, -75.04493 44.693...          0.598315  \n","12782  POLYGON ((-74.98701 44.68543, -74.98642 44.685...          0.759690  \n","12784  POLYGON ((-74.98696 44.66849, -74.98691 44.668...          0.815141  "],"text/html":["\n","  <div id=\"df-3200d1ac-a07c-469e-a409-76edd6552ccf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>COUNTY</th>\n","      <th>PRECINCT</th>\n","      <th>G20PREDBID</th>\n","      <th>G20PRERTRU</th>\n","      <th>G20PRELJOR</th>\n","      <th>G20PREGHAW</th>\n","      <th>G20PREIPIE</th>\n","      <th>G20PREOWRI</th>\n","      <th>geometry</th>\n","      <th>Biden_proportion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>12781</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Potsdam 4</td>\n","      <td>426</td>\n","      <td>286</td>\n","      <td>11</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>POLYGON ((-75.04612 44.69213, -75.04493 44.693...</td>\n","      <td>0.598315</td>\n","    </tr>\n","    <tr>\n","      <th>12782</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Potsdam 5</td>\n","      <td>490</td>\n","      <td>155</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>POLYGON ((-74.98701 44.68543, -74.98642 44.685...</td>\n","      <td>0.759690</td>\n","    </tr>\n","    <tr>\n","      <th>12784</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Potsdam 7</td>\n","      <td>463</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>POLYGON ((-74.98696 44.66849, -74.98691 44.668...</td>\n","      <td>0.815141</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3200d1ac-a07c-469e-a409-76edd6552ccf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3200d1ac-a07c-469e-a409-76edd6552ccf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3200d1ac-a07c-469e-a409-76edd6552ccf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b69fb7f2-7d25-4b42-ac4c-ee58843d06b0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b69fb7f2-7d25-4b42-ac4c-ee58843d06b0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b69fb7f2-7d25-4b42-ac4c-ee58843d06b0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_019078c6-f3c5-4417-bf42-daed870a97e9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('precincts_for_one_census_block')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_019078c6-f3c5-4417-bf42-daed870a97e9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('precincts_for_one_census_block');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"precincts_for_one_census_block","repr_error":"0"}},"metadata":{},"execution_count":19}],"source":["# Extract all precincts whose centroid is contained by this census block.\n","census_block_polygon= census_tracts.loc[CENSUS_BLOCK_INDEX, 'geometry']                 # 인구조사 블록의 다각형을 가져옵니다.\n","mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x)) # 각 선거구의 중심이 인구조사 블록 다각형의 경계 내에 있는지 확인하는 부울 마스크를 생성합니다.\n","precincts_for_one_census_block = precincts[mask.values]                                 # 이전 단계에서 생성된 부울 마스크를 사용하여 중심이 인구조사 블록 내에 있는 선거구만 선택합니다\n","precincts_for_one_census_block\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":660},"executionInfo":{"elapsed":290,"status":"ok","timestamp":1711077984008,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"TX4xA_PWeULo","outputId":"754e8ac2-66a9-4365-b863-481e6584cbf0"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/geopandas/geodataframe.py:1538: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  super().__setitem__(key, value)\n"]},{"output_type":"execute_result","data":{"text/plain":["      STATEFP COUNTYFP        COUNTY     PRECINCT  G20PREDBID  G20PRERTRU  \\\n","12777      36      089  St. Lawrence  Stockholm 1         331         362   \n","12781      36      089  St. Lawrence    Potsdam 4         426         286   \n","12782      36      089  St. Lawrence    Potsdam 5         490         155   \n","12783      36      089  St. Lawrence    Potsdam 6         431         143   \n","12784      36      089  St. Lawrence    Potsdam 7         463         105   \n","\n","       G20PRELJOR  G20PREGHAW  G20PREIPIE  G20PREOWRI  \\\n","12777           9           5           3           3   \n","12781          11           2           3           2   \n","12782          10           8           5           6   \n","12783           6           3           3           4   \n","12784           5           6           1           5   \n","\n","                                                geometry  Biden_proportion  \\\n","12777  POLYGON ((-74.98246 44.75006, -74.97856 44.751...          0.477633   \n","12781  POLYGON ((-75.04612 44.69213, -75.04493 44.693...          0.598315   \n","12782  POLYGON ((-74.98701 44.68543, -74.98642 44.685...          0.759690   \n","12783  MULTIPOLYGON (((-74.99264 44.68567, -74.99141 ...          0.750871   \n","12784  POLYGON ((-74.98696 44.66849, -74.98691 44.668...          0.815141   \n","\n","      overlap_percentage  \n","12777                0.0  \n","12781          57.006775  \n","12782              100.0  \n","12783          12.945209  \n","12784            39.0228  "],"text/html":["\n","  <div id=\"df-1ca52f2f-93a4-46c4-bb11-a19fc8cde53f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>COUNTY</th>\n","      <th>PRECINCT</th>\n","      <th>G20PREDBID</th>\n","      <th>G20PRERTRU</th>\n","      <th>G20PRELJOR</th>\n","      <th>G20PREGHAW</th>\n","      <th>G20PREIPIE</th>\n","      <th>G20PREOWRI</th>\n","      <th>geometry</th>\n","      <th>Biden_proportion</th>\n","      <th>overlap_percentage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>12777</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Stockholm 1</td>\n","      <td>331</td>\n","      <td>362</td>\n","      <td>9</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>POLYGON ((-74.98246 44.75006, -74.97856 44.751...</td>\n","      <td>0.477633</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>12781</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Potsdam 4</td>\n","      <td>426</td>\n","      <td>286</td>\n","      <td>11</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>POLYGON ((-75.04612 44.69213, -75.04493 44.693...</td>\n","      <td>0.598315</td>\n","      <td>57.006775</td>\n","    </tr>\n","    <tr>\n","      <th>12782</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Potsdam 5</td>\n","      <td>490</td>\n","      <td>155</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>POLYGON ((-74.98701 44.68543, -74.98642 44.685...</td>\n","      <td>0.759690</td>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>12783</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Potsdam 6</td>\n","      <td>431</td>\n","      <td>143</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>MULTIPOLYGON (((-74.99264 44.68567, -74.99141 ...</td>\n","      <td>0.750871</td>\n","      <td>12.945209</td>\n","    </tr>\n","    <tr>\n","      <th>12784</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Potsdam 7</td>\n","      <td>463</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>POLYGON ((-74.98696 44.66849, -74.98691 44.668...</td>\n","      <td>0.815141</td>\n","      <td>39.0228</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ca52f2f-93a4-46c4-bb11-a19fc8cde53f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1ca52f2f-93a4-46c4-bb11-a19fc8cde53f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1ca52f2f-93a4-46c4-bb11-a19fc8cde53f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1ba13247-340d-4764-89b9-fd405b7e691f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1ba13247-340d-4764-89b9-fd405b7e691f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1ba13247-340d-4764-89b9-fd405b7e691f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"overlap_precincts","repr_error":"0"}},"metadata":{},"execution_count":20}],"source":["overlap_precincts = precincts[precincts['geometry'].intersects(census_block_polygon)]\n","overlap_precincts['overlap_percentage'] = None  # Create an empty 'overlap_percentage' column\n","\n","# Calculate and assign overlap percentages for each row # 각 행에 대한 겹치는 백분율 계산 및 할당\n","for idx, precinct_row in overlap_precincts.iterrows():\n","    precinct_geometry = precinct_row['geometry']\n","\n","    # Calculate the intersection area   # 교차 영역 계산\n","    intersection_area = precinct_geometry.intersection(census_block_polygon).area\n","\n","    # Calculate the percentage overlap   # 겹치는 백분율 계산\n","    overlap_percentage = (intersection_area / precinct_geometry.area) * 100\n","\n","    # Assign the calculated overlap_percentage to the corresponding row\n","    overlap_precincts.at[idx, 'overlap_percentage'] = overlap_percentage\n","\n","overlap_precincts.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":150},"executionInfo":{"elapsed":113,"status":"ok","timestamp":1711077984009,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"07_83Bupo2XO","outputId":"6581bdcd-3889-4969-b3dc-ef7f93ecf4bc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      STATEFP COUNTYFP        COUNTY   PRECINCT  G20PREDBID  G20PRERTRU  \\\n","12782      36      089  St. Lawrence  Potsdam 5         490         155   \n","\n","       G20PRELJOR  G20PREGHAW  G20PREIPIE  G20PREOWRI  \\\n","12782          10           8           5           6   \n","\n","                                                geometry  Biden_proportion  \\\n","12782  POLYGON ((-74.98701 44.68543, -74.98642 44.685...           0.75969   \n","\n","      overlap_percentage  \n","12782              100.0  "],"text/html":["\n","  <div id=\"df-30bc890e-f0b0-4148-aa51-bc3f2cf1e76a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>COUNTY</th>\n","      <th>PRECINCT</th>\n","      <th>G20PREDBID</th>\n","      <th>G20PRERTRU</th>\n","      <th>G20PRELJOR</th>\n","      <th>G20PREGHAW</th>\n","      <th>G20PREIPIE</th>\n","      <th>G20PREOWRI</th>\n","      <th>geometry</th>\n","      <th>Biden_proportion</th>\n","      <th>overlap_percentage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>12782</th>\n","      <td>36</td>\n","      <td>089</td>\n","      <td>St. Lawrence</td>\n","      <td>Potsdam 5</td>\n","      <td>490</td>\n","      <td>155</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>POLYGON ((-74.98701 44.68543, -74.98642 44.685...</td>\n","      <td>0.75969</td>\n","      <td>100.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30bc890e-f0b0-4148-aa51-bc3f2cf1e76a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-30bc890e-f0b0-4148-aa51-bc3f2cf1e76a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-30bc890e-f0b0-4148-aa51-bc3f2cf1e76a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"filtered_precincts","repr_error":"0"}},"metadata":{},"execution_count":21}],"source":["# Filter precincts with overlap_percentage >= 50\n","filtered_precincts = overlap_precincts[overlap_precincts['overlap_percentage'] >= 60]\n","\n","# Now, filtered_precincts contains only the precincts with overlap_percentage >= 60\n","filtered_precincts.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":823},"executionInfo":{"elapsed":111,"status":"ok","timestamp":1711077984009,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"ZY9TJiNYpZTC","outputId":"fa3726b1-3340-4466-9706-6d826e9a22d0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<folium.folium.Map at 0x78a87bd20b50>"],"text/html":["<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n","&lt;html&gt;\n","&lt;head&gt;\n","    \n","    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n","    \n","        &lt;script&gt;\n","            L_NO_TOUCH = false;\n","            L_DISABLE_3D = false;\n","        &lt;/script&gt;\n","    \n","    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n","    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n","    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n","    \n","            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n","                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n","            &lt;style&gt;\n","                #map_f1abeff9bd0925cbcf32bf96930f1322 {\n","                    position: relative;\n","                    width: 100.0%;\n","                    height: 100.0%;\n","                    left: 0.0%;\n","                    top: 0.0%;\n","                }\n","                .leaflet-container { font-size: 1rem; }\n","            &lt;/style&gt;\n","        \n","    \n","                    &lt;style&gt;\n","                        .foliumtooltip {\n","                            \n","                        }\n","                       .foliumtooltip table{\n","                            margin: auto;\n","                        }\n","                        .foliumtooltip tr{\n","                            text-align: left;\n","                        }\n","                        .foliumtooltip th{\n","                            padding: 2px; padding-right: 8px;\n","                        }\n","                    &lt;/style&gt;\n","            \n","    \n","    &lt;script src=&quot;https://code.jquery.com/ui/1.12.1/jquery-ui.js&quot;&gt;&lt;/script&gt;\n","    &lt;script&gt;$( function() {\n","        $( &quot;.maplegend&quot; ).draggable({\n","            start: function (event, ui) {\n","                $(this).css({\n","                    right: &quot;auto&quot;,\n","                    top: &quot;auto&quot;,\n","                    bottom: &quot;auto&quot;\n","                });\n","            }\n","        });\n","    });\n","    &lt;/script&gt;\n","    &lt;style type=&#x27;text/css&#x27;&gt;\n","      .maplegend {\n","        position: absolute;\n","        z-index:9999;\n","        background-color: rgba(255, 255, 255, .8);\n","        border-radius: 5px;\n","        box-shadow: 0 0 15px rgba(0,0,0,0.2);\n","        padding: 10px;\n","        font: 12px/14px Arial, Helvetica, sans-serif;\n","        right: 10px;\n","        bottom: 20px;\n","      }\n","      .maplegend .legend-title {\n","        text-align: left;\n","        margin-bottom: 5px;\n","        font-weight: bold;\n","        }\n","      .maplegend .legend-scale ul {\n","        margin: 0;\n","        margin-bottom: 0px;\n","        padding: 0;\n","        float: left;\n","        list-style: none;\n","        }\n","      .maplegend .legend-scale ul li {\n","        list-style: none;\n","        margin-left: 0;\n","        line-height: 16px;\n","        margin-bottom: 2px;\n","        }\n","      .maplegend ul.legend-labels li span {\n","        display: block;\n","        float: left;\n","        height: 14px;\n","        width: 14px;\n","        margin-right: 5px;\n","        margin-left: 0;\n","        border: 0px solid #ccc;\n","        }\n","      .maplegend .legend-source {\n","        color: #777;\n","        clear: both;\n","        }\n","      .maplegend a {\n","        color: #777;\n","        }\n","    &lt;/style&gt;\n","    \n","&lt;/head&gt;\n","&lt;body&gt;\n","    \n","    \n","    &lt;div id=&#x27;maplegend STATEFP&#x27; class=&#x27;maplegend&#x27;&gt;\n","        &lt;div class=&#x27;legend-title&#x27;&gt;STATEFP&lt;/div&gt;\n","        &lt;div class=&#x27;legend-scale&#x27;&gt;\n","            &lt;ul class=&#x27;legend-labels&#x27;&gt;\n","                &lt;li&gt;&lt;span style=&#x27;background:#1f77b4&#x27;&gt;&lt;/span&gt;36&lt;/li&gt;\n","            &lt;/ul&gt;\n","        &lt;/div&gt;\n","    &lt;/div&gt;\n","    \n","    \n","            &lt;div class=&quot;folium-map&quot; id=&quot;map_f1abeff9bd0925cbcf32bf96930f1322&quot; &gt;&lt;/div&gt;\n","        \n","&lt;/body&gt;\n","&lt;script&gt;\n","    \n","    \n","            var map_f1abeff9bd0925cbcf32bf96930f1322 = L.map(\n","                &quot;map_f1abeff9bd0925cbcf32bf96930f1322&quot;,\n","                {\n","                    center: [44.6948985, -74.960022],\n","                    crs: L.CRS.EPSG3857,\n","                    zoom: 10,\n","                    zoomControl: true,\n","                    preferCanvas: false,\n","                }\n","            );\n","            L.control.scale().addTo(map_f1abeff9bd0925cbcf32bf96930f1322);\n","\n","            \n","\n","        \n","    \n","            var tile_layer_45ac2734213c1dc7d3171947b7e7c2be = L.tileLayer(\n","                &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n","                {&quot;attribution&quot;: &quot;Data by \\u0026copy; \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://openstreetmap.org\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e, under \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://www.openstreetmap.org/copyright\\&quot;\\u003eODbL\\u003c/a\\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n","            ).addTo(map_f1abeff9bd0925cbcf32bf96930f1322);\n","        \n","    \n","            map_f1abeff9bd0925cbcf32bf96930f1322.fitBounds(\n","                [[44.667479, -75.011719], [44.722318, -74.90832499999999]],\n","                {}\n","            );\n","        \n","    \n","        function geo_json_36dc4846ee7077fc4b92c4ef63f178b6_styler(feature) {\n","            switch(feature.id) {\n","                default:\n","                    return {&quot;color&quot;: &quot;#1f77b4&quot;, &quot;fillColor&quot;: &quot;#1f77b4&quot;, &quot;fillOpacity&quot;: 0.5, &quot;weight&quot;: 2};\n","            }\n","        }\n","        function geo_json_36dc4846ee7077fc4b92c4ef63f178b6_highlighter(feature) {\n","            switch(feature.id) {\n","                default:\n","                    return {&quot;fillOpacity&quot;: 0.75};\n","            }\n","        }\n","        function geo_json_36dc4846ee7077fc4b92c4ef63f178b6_pointToLayer(feature, latlng) {\n","            var opts = {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#3388ff&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 2, &quot;stroke&quot;: true, &quot;weight&quot;: 3};\n","            \n","            let style = geo_json_36dc4846ee7077fc4b92c4ef63f178b6_styler(feature)\n","            Object.assign(opts, style)\n","            \n","            return new L.CircleMarker(latlng, opts)\n","        }\n","\n","        function geo_json_36dc4846ee7077fc4b92c4ef63f178b6_onEachFeature(feature, layer) {\n","            layer.on({\n","                mouseout: function(e) {\n","                    if(typeof e.target.setStyle === &quot;function&quot;){\n","                        geo_json_36dc4846ee7077fc4b92c4ef63f178b6.resetStyle(e.target);\n","                    }\n","                },\n","                mouseover: function(e) {\n","                    if(typeof e.target.setStyle === &quot;function&quot;){\n","                        const highlightStyle = geo_json_36dc4846ee7077fc4b92c4ef63f178b6_highlighter(e.target.feature)\n","                        e.target.setStyle(highlightStyle);\n","                    }\n","                },\n","            });\n","        };\n","        var geo_json_36dc4846ee7077fc4b92c4ef63f178b6 = L.geoJson(null, {\n","                onEachFeature: geo_json_36dc4846ee7077fc4b92c4ef63f178b6_onEachFeature,\n","            \n","                style: geo_json_36dc4846ee7077fc4b92c4ef63f178b6_styler,\n","                pointToLayer: geo_json_36dc4846ee7077fc4b92c4ef63f178b6_pointToLayer\n","        });\n","\n","        function geo_json_36dc4846ee7077fc4b92c4ef63f178b6_add (data) {\n","            geo_json_36dc4846ee7077fc4b92c4ef63f178b6\n","                .addData(data)\n","                .addTo(map_f1abeff9bd0925cbcf32bf96930f1322);\n","        }\n","            geo_json_36dc4846ee7077fc4b92c4ef63f178b6_add({&quot;bbox&quot;: [-75.011719, 44.667479, -74.90832499999999, 44.722318], &quot;features&quot;: [{&quot;bbox&quot;: [-75.011719, 44.667479, -74.90832499999999, 44.722318], &quot;geometry&quot;: {&quot;coordinates&quot;: [[[-75.011719, 44.689629], [-75.011076, 44.690511], [-75.010491, 44.692094], [-75.009395, 44.694001], [-75.009258, 44.695375999999996], [-75.009574, 44.697323], [-75.009992, 44.69966], [-75.009654, 44.701494], [-75.009445, 44.702386999999995], [-75.009237, 44.702763], [-75.007395, 44.703573999999996], [-75.005639, 44.704460999999995], [-75.005431, 44.704910999999996], [-75.00532, 44.705490999999995], [-75.00522, 44.70607], [-75.005032, 44.706036], [-75.003034, 44.705667999999996], [-75.001977, 44.705465], [-75.000998, 44.705313], [-75.000366, 44.707119999999996], [-75.00003699999999, 44.70798], [-74.999815, 44.708531], [-74.999721, 44.708822], [-74.99919899999999, 44.711027], [-74.99907499999999, 44.711507], [-74.998987, 44.711734], [-74.998841, 44.711967], [-74.998684, 44.712160999999995], [-74.99852299999999, 44.712312], [-74.998344, 44.71245], [-74.998086, 44.712618], [-74.99788199999999, 44.712728], [-74.997646, 44.712827999999995], [-74.997472, 44.712888], [-74.99661499999999, 44.713118], [-74.99553499999999, 44.713387999999995], [-74.9949, 44.713563], [-74.99468999999999, 44.713606999999996], [-74.994498, 44.713637], [-74.99425, 44.713668], [-74.99333399999999, 44.71374], [-74.99233699999999, 44.713803], [-74.992102, 44.713836], [-74.991985, 44.713879], [-74.991908, 44.713933], [-74.991747, 44.714157], [-74.99159499999999, 44.714389999999995], [-74.99151499999999, 44.714448], [-74.989356, 44.714487999999996], [-74.98721499999999, 44.714506], [-74.987203, 44.712013], [-74.986458, 44.712008999999995], [-74.98222299999999, 44.712022999999995], [-74.981866, 44.712029], [-74.980646, 44.712047], [-74.980091, 44.712067], [-74.97972, 44.712109999999996], [-74.97933499999999, 44.712191999999995], [-74.978717, 44.712374999999994], [-74.977515, 44.712762999999995], [-74.976795, 44.713007999999995], [-74.97599199999999, 44.713304], [-74.975741, 44.713408], [-74.973924, 44.714248999999995], [-74.97183, 44.715275], [-74.97045899999999, 44.715925999999996], [-74.967472, 44.717392], [-74.96625, 44.717991], [-74.96306, 44.719594], [-74.96054099999999, 44.720859999999995], [-74.959803, 44.721218], [-74.958266, 44.722006], [-74.957977, 44.722172], [-74.957703, 44.722304], [-74.95767099999999, 44.722318], [-74.957624, 44.722257], [-74.955581, 44.720189], [-74.950696, 44.715225], [-74.947085, 44.711467], [-74.94689, 44.711261], [-74.937694, 44.701533], [-74.936328, 44.700108], [-74.935655, 44.69939], [-74.932763, 44.696365], [-74.929484, 44.692761999999995], [-74.928725, 44.691922999999996], [-74.927998, 44.691116], [-74.925072, 44.687886999999996], [-74.922912, 44.685773], [-74.920463, 44.683215], [-74.917599, 44.680236], [-74.916018, 44.678515999999995], [-74.90938799999999, 44.67135], [-74.90832499999999, 44.670260999999996], [-74.91169099999999, 44.670259], [-74.91446599999999, 44.670232], [-74.91543399999999, 44.670231], [-74.91693099999999, 44.670213], [-74.919898, 44.670196999999995], [-74.921988, 44.670192], [-74.92280199999999, 44.670178], [-74.92386499999999, 44.670175], [-74.924258, 44.670178], [-74.924906, 44.670173], [-74.92508099999999, 44.670172], [-74.927283, 44.670156], [-74.928607, 44.670154], [-74.929507, 44.670141], [-74.932559, 44.670122], [-74.9338, 44.67011], [-74.934555, 44.670113], [-74.936967, 44.670094999999996], [-74.939523, 44.670063], [-74.946953, 44.669996], [-74.94750599999999, 44.669990999999996], [-74.948943, 44.669976999999996], [-74.949111, 44.669976], [-74.951786, 44.669954999999995], [-74.953141, 44.669951999999995], [-74.95573499999999, 44.669948999999995], [-74.955896, 44.669948], [-74.956504, 44.669948], [-74.956717, 44.669948], [-74.95695599999999, 44.669948], [-74.957019, 44.669948], [-74.957932, 44.669948], [-74.96229799999999, 44.669942], [-74.963827, 44.669936], [-74.966172, 44.669928], [-74.96700299999999, 44.669923999999995], [-74.9683, 44.669916], [-74.969264, 44.669909999999994], [-74.969871, 44.669906], [-74.971817, 44.669897999999996], [-74.973563, 44.669888], [-74.973671, 44.669886999999996], [-74.973685, 44.671296], [-74.973697, 44.671366], [-74.973745, 44.67142], [-74.973809, 44.671443], [-74.97428, 44.671451999999995], [-74.975433, 44.671444], [-74.975441, 44.671929], [-74.97547899999999, 44.672000999999995], [-74.975748, 44.672194999999995], [-74.976874, 44.672979999999995], [-74.977149, 44.673186], [-74.97825999999999, 44.672381], [-74.978363, 44.672402], [-74.97886, 44.672419], [-74.980448, 44.67239], [-74.981399, 44.67236], [-74.981403, 44.67295], [-74.982235, 44.672948], [-74.98297699999999, 44.672957], [-74.983499, 44.672948], [-74.984419, 44.672956], [-74.984535, 44.672964], [-74.984625, 44.67297], [-74.98686099999999, 44.672972], [-74.98686099999999, 44.672905], [-74.986858, 44.67239], [-74.986858, 44.671161], [-74.986858, 44.671032], [-74.986858, 44.670558], [-74.986853, 44.669832], [-74.986857, 44.669708], [-74.98686599999999, 44.668999], [-74.986869, 44.668631999999995], [-74.98691199999999, 44.668593], [-74.98696199999999, 44.668493999999995], [-74.986997, 44.668473999999996], [-74.98707999999999, 44.668425], [-74.987476, 44.668203], [-74.98757599999999, 44.668147999999995], [-74.987657, 44.668104], [-74.987983, 44.667964], [-74.988415, 44.667817], [-74.98918499999999, 44.667593], [-74.98959099999999, 44.667479], [-74.990455, 44.669041], [-74.991378, 44.669484999999995], [-74.991468, 44.669528], [-74.991644, 44.669593], [-74.991918, 44.669723], [-74.992707, 44.670099], [-74.995025, 44.679016], [-74.996184, 44.68045], [-74.99624399999999, 44.68042], [-74.997177, 44.681661], [-74.99775199999999, 44.683594], [-74.999016, 44.684498], [-75.00022299999999, 44.685542999999996], [-75.001013, 44.68643], [-75.001564, 44.686746], [-75.002766, 44.686796], [-75.004646, 44.686453], [-75.005646, 44.686634], [-75.00724, 44.686415], [-75.009396, 44.686749999999996], [-75.00972999999999, 44.686800000000005], [-75.0104, 44.686903], [-75.010953, 44.687543999999995], [-75.011483, 44.688603], [-75.011719, 44.689629]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;id&quot;: &quot;222&quot;, &quot;properties&quot;: {&quot;ALAND&quot;: 28544487, &quot;AWATER&quot;: 460535, &quot;COUNTYFP&quot;: &quot;089&quot;, &quot;FUNCSTAT&quot;: &quot;S&quot;, &quot;GEOID&quot;: &quot;36089490900&quot;, &quot;INTPTLAT&quot;: &quot;+44.6881249&quot;, &quot;INTPTLON&quot;: &quot;-074.9682145&quot;, &quot;MTFCC&quot;: &quot;G5020&quot;, &quot;NAME&quot;: &quot;4909&quot;, &quot;NAMELSAD&quot;: &quot;Census Tract 4909&quot;, &quot;STATEFP&quot;: &quot;36&quot;, &quot;TRACTCE&quot;: &quot;490900&quot;, &quot;__folium_color&quot;: &quot;#1f77b4&quot;}, &quot;type&quot;: &quot;Feature&quot;}], &quot;type&quot;: &quot;FeatureCollection&quot;});\n","\n","        \n","    \n","    geo_json_36dc4846ee7077fc4b92c4ef63f178b6.bindTooltip(\n","    function(layer){\n","    let div = L.DomUtil.create(&#x27;div&#x27;);\n","    \n","    let handleObject = feature=&gt;typeof(feature)==&#x27;object&#x27; ? JSON.stringify(feature) : feature;\n","    let fields = [&quot;STATEFP&quot;, &quot;COUNTYFP&quot;, &quot;TRACTCE&quot;, &quot;GEOID&quot;, &quot;NAME&quot;, &quot;NAMELSAD&quot;, &quot;MTFCC&quot;, &quot;FUNCSTAT&quot;, &quot;ALAND&quot;, &quot;AWATER&quot;, &quot;INTPTLAT&quot;, &quot;INTPTLON&quot;];\n","    let aliases = [&quot;STATEFP&quot;, &quot;COUNTYFP&quot;, &quot;TRACTCE&quot;, &quot;GEOID&quot;, &quot;NAME&quot;, &quot;NAMELSAD&quot;, &quot;MTFCC&quot;, &quot;FUNCSTAT&quot;, &quot;ALAND&quot;, &quot;AWATER&quot;, &quot;INTPTLAT&quot;, &quot;INTPTLON&quot;];\n","    let table = &#x27;&lt;table&gt;&#x27; +\n","        String(\n","        fields.map(\n","        (v,i)=&gt;\n","        `&lt;tr&gt;\n","            &lt;th&gt;${aliases[i]}&lt;/th&gt;\n","            \n","            &lt;td&gt;${handleObject(layer.feature.properties[v])}&lt;/td&gt;\n","        &lt;/tr&gt;`).join(&#x27;&#x27;))\n","    +&#x27;&lt;/table&gt;&#x27;;\n","    div.innerHTML=table;\n","    \n","    return div\n","    }\n","    ,{&quot;className&quot;: &quot;foliumtooltip&quot;, &quot;sticky&quot;: true});\n","                     \n","&lt;/script&gt;\n","&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"]},"metadata":{},"execution_count":22}],"source":["# Visualize this census block and the precincts that are approximating it.\n","census_tracts.loc[[CENSUS_BLOCK_INDEX]].explore('STATEFP')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":823},"executionInfo":{"elapsed":109,"status":"ok","timestamp":1711077984009,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"-nDnVyX_p0pU","outputId":"dd6bd370-b8c6-44d5-84bc-aed6128bfd3e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<folium.folium.Map at 0x78a87bd23130>"],"text/html":["<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n","&lt;html&gt;\n","&lt;head&gt;\n","    \n","    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n","    \n","        &lt;script&gt;\n","            L_NO_TOUCH = false;\n","            L_DISABLE_3D = false;\n","        &lt;/script&gt;\n","    \n","    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n","    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n","    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n","    \n","            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n","                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n","            &lt;style&gt;\n","                #map_6d0cf0479273fc35bab13df0227b1d78 {\n","                    position: relative;\n","                    width: 100.0%;\n","                    height: 100.0%;\n","                    left: 0.0%;\n","                    top: 0.0%;\n","                }\n","                .leaflet-container { font-size: 1rem; }\n","            &lt;/style&gt;\n","        \n","    \n","                    &lt;style&gt;\n","                        .foliumtooltip {\n","                            \n","                        }\n","                       .foliumtooltip table{\n","                            margin: auto;\n","                        }\n","                        .foliumtooltip tr{\n","                            text-align: left;\n","                        }\n","                        .foliumtooltip th{\n","                            padding: 2px; padding-right: 8px;\n","                        }\n","                    &lt;/style&gt;\n","            \n","    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js&quot;&gt;&lt;/script&gt;\n","&lt;/head&gt;\n","&lt;body&gt;\n","    \n","    \n","            &lt;div class=&quot;folium-map&quot; id=&quot;map_6d0cf0479273fc35bab13df0227b1d78&quot; &gt;&lt;/div&gt;\n","        \n","&lt;/body&gt;\n","&lt;script&gt;\n","    \n","    \n","            var map_6d0cf0479273fc35bab13df0227b1d78 = L.map(\n","                &quot;map_6d0cf0479273fc35bab13df0227b1d78&quot;,\n","                {\n","                    center: [44.680432499999995, -74.971111],\n","                    crs: L.CRS.EPSG3857,\n","                    zoom: 10,\n","                    zoomControl: true,\n","                    preferCanvas: false,\n","                }\n","            );\n","            L.control.scale().addTo(map_6d0cf0479273fc35bab13df0227b1d78);\n","\n","            \n","\n","        \n","    \n","            var tile_layer_35f41e93d8885ace60dcc9ceaf4cbd40 = L.tileLayer(\n","                &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n","                {&quot;attribution&quot;: &quot;Data by \\u0026copy; \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://openstreetmap.org\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e, under \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://www.openstreetmap.org/copyright\\&quot;\\u003eODbL\\u003c/a\\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n","            ).addTo(map_6d0cf0479273fc35bab13df0227b1d78);\n","        \n","    \n","            map_6d0cf0479273fc35bab13df0227b1d78.fitBounds(\n","                [[44.638546999999996, -75.04612399999999], [44.72231799999999, -74.896098]],\n","                {}\n","            );\n","        \n","    \n","        function geo_json_ef6c82613c53c8d614829ee4ce736842_styler(feature) {\n","            switch(feature.id) {\n","                case &quot;12781&quot;: \n","                    return {&quot;color&quot;: &quot;#440154&quot;, &quot;fillColor&quot;: &quot;#440154&quot;, &quot;fillOpacity&quot;: 0.5, &quot;weight&quot;: 2};\n","                case &quot;12782&quot;: \n","                    return {&quot;color&quot;: &quot;#5ac864&quot;, &quot;fillColor&quot;: &quot;#5ac864&quot;, &quot;fillOpacity&quot;: 0.5, &quot;weight&quot;: 2};\n","                default:\n","                    return {&quot;color&quot;: &quot;#fde725&quot;, &quot;fillColor&quot;: &quot;#fde725&quot;, &quot;fillOpacity&quot;: 0.5, &quot;weight&quot;: 2};\n","            }\n","        }\n","        function geo_json_ef6c82613c53c8d614829ee4ce736842_highlighter(feature) {\n","            switch(feature.id) {\n","                default:\n","                    return {&quot;fillOpacity&quot;: 0.75};\n","            }\n","        }\n","        function geo_json_ef6c82613c53c8d614829ee4ce736842_pointToLayer(feature, latlng) {\n","            var opts = {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#3388ff&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 2, &quot;stroke&quot;: true, &quot;weight&quot;: 3};\n","            \n","            let style = geo_json_ef6c82613c53c8d614829ee4ce736842_styler(feature)\n","            Object.assign(opts, style)\n","            \n","            return new L.CircleMarker(latlng, opts)\n","        }\n","\n","        function geo_json_ef6c82613c53c8d614829ee4ce736842_onEachFeature(feature, layer) {\n","            layer.on({\n","                mouseout: function(e) {\n","                    if(typeof e.target.setStyle === &quot;function&quot;){\n","                        geo_json_ef6c82613c53c8d614829ee4ce736842.resetStyle(e.target);\n","                    }\n","                },\n","                mouseover: function(e) {\n","                    if(typeof e.target.setStyle === &quot;function&quot;){\n","                        const highlightStyle = geo_json_ef6c82613c53c8d614829ee4ce736842_highlighter(e.target.feature)\n","                        e.target.setStyle(highlightStyle);\n","                    }\n","                },\n","            });\n","        };\n","        var geo_json_ef6c82613c53c8d614829ee4ce736842 = L.geoJson(null, {\n","                onEachFeature: geo_json_ef6c82613c53c8d614829ee4ce736842_onEachFeature,\n","            \n","                style: geo_json_ef6c82613c53c8d614829ee4ce736842_styler,\n","                pointToLayer: geo_json_ef6c82613c53c8d614829ee4ce736842_pointToLayer\n","        });\n","\n","        function geo_json_ef6c82613c53c8d614829ee4ce736842_add (data) {\n","            geo_json_ef6c82613c53c8d614829ee4ce736842\n","                .addData(data)\n","                .addTo(map_6d0cf0479273fc35bab13df0227b1d78);\n","        }\n","            geo_json_ef6c82613c53c8d614829ee4ce736842_add({&quot;bbox&quot;: [-75.04612399999999, 44.638546999999996, -74.896098, 44.72231799999999], &quot;features&quot;: [{&quot;bbox&quot;: [-75.04612399999999, 44.638546999999996, -74.896098, 44.72231799999999], &quot;geometry&quot;: {&quot;coordinates&quot;: [[[-75.04612399999999, 44.69213099999999], [-75.044929, 44.69343299999999], [-75.04282099999999, 44.695826], [-75.041935, 44.696805], [-75.040917, 44.697946999999985], [-75.040759, 44.69808700000001], [-75.040522, 44.69825399999998], [-75.04033299999998, 44.698361999999996], [-75.03916299999999, 44.69893799999999], [-75.03777, 44.699598], [-75.037671, 44.699636999999974], [-75.037425, 44.699693999999994], [-75.03719699999998, 44.699718], [-75.035634, 44.69963899999998], [-75.03286299999999, 44.69952499999999], [-75.032377, 44.69951399999999], [-75.03201299999998, 44.69951799999999], [-75.031536, 44.69953899999999], [-75.03114099999999, 44.69957499999999], [-75.03096599999998, 44.699605], [-75.03059499999999, 44.69971999999999], [-75.02970499999999, 44.700124], [-75.026229, 44.701767], [-75.02336899999999, 44.70315199999999], [-75.02264199999999, 44.70351299999999], [-75.02007499999998, 44.70472099999998], [-75.01836099999998, 44.705529], [-75.017596, 44.705878], [-75.014026, 44.70757399999999], [-75.01257299999999, 44.708255999999984], [-75.011134, 44.708949000000004], [-75.009788, 44.70957999999999], [-75.009646, 44.709620999999984], [-75.009497, 44.709637], [-75.00926899999999, 44.71052699999998], [-75.00494599999999, 44.710853], [-75.005043, 44.710696999999996], [-75.00511999999999, 44.71059700000001], [-75.00531699999998, 44.71038099999999], [-75.00553599999999, 44.710223999999975], [-75.00570899999998, 44.710149999999985], [-75.005833, 44.710080999999995], [-75.005952, 44.709976999999995], [-75.00626199999998, 44.709675000000004], [-75.006354, 44.709572], [-75.006435, 44.709459999999986], [-75.006531, 44.70928699999999], [-75.00654699999998, 44.709044999999975], [-75.00658299999998, 44.708980999999994], [-75.00683299999999, 44.708731], [-75.00712399999999, 44.70849099999998], [-75.007178, 44.708414], [-75.007178, 44.708355999999974], [-75.007155, 44.70831399999998], [-75.00709699999999, 44.708294999999985], [-75.007009, 44.708294999999985], [-75.00699299999998, 44.708279], [-75.00699699999998, 44.708245], [-75.00707799999998, 44.708175], [-75.00735499999999, 44.70797199999999], [-75.00755099999998, 44.707786999999996], [-75.007632, 44.707641], [-75.00762699999999, 44.70756999999999], [-75.00758799999998, 44.70749699999999], [-75.007499, 44.707443], [-75.00740699999999, 44.70743899999998], [-75.00728799999999, 44.707480999999994], [-75.007099, 44.70767399999999], [-75.00688, 44.70787699999999], [-75.00670299999999, 44.70798099999999], [-75.006225, 44.70821199999999], [-75.00611099999999, 44.70828799999999], [-75.00604299999998, 44.708306999999984], [-75.00581, 44.70831299999998], [-75.00576199999998, 44.708296], [-75.005706, 44.708246], [-75.005515, 44.70799899999999], [-75.005459, 44.707891], [-75.00542899999999, 44.70773399999998], [-75.005347, 44.707720999999985], [-75.005321, 44.707694000000004], [-75.00531599999998, 44.70764199999999], [-75.00536, 44.707578000000005], [-75.00543299999998, 44.70752600000001], [-75.00557599999999, 44.70744599999998], [-75.00566599999999, 44.70736299999999], [-75.00571599999998, 44.70725499999999], [-75.005755, 44.70708599999998], [-75.005731, 44.70670399999999], [-75.005712, 44.706653999999986], [-75.005616, 44.70664199999999], [-75.00559699999998, 44.70661900000001], [-75.005601, 44.70657699999999], [-75.005751, 44.70645], [-75.00584699999999, 44.70626600000001], [-75.00587499999999, 44.706188000000004], [-75.00522, 44.70606999999999], [-75.005032, 44.70603599999998], [-75.003034, 44.705667999999974], [-75.00197699999998, 44.70546499999999], [-75.000998, 44.705312999999975], [-75.000366, 44.707119999999996], [-75.00003699999999, 44.707979999999985], [-74.999815, 44.70853099999999], [-74.999721, 44.70882199999998], [-74.99919899999999, 44.711027], [-74.99907499999999, 44.71150699999999], [-74.998987, 44.711734], [-74.99884099999998, 44.711967], [-74.998684, 44.71216099999998], [-74.99852299999999, 44.71231199999999], [-74.998344, 44.712449999999976], [-74.998086, 44.712617999999985], [-74.99788199999998, 44.712727999999984], [-74.997646, 44.712827999999995], [-74.997472, 44.712887999999985], [-74.99661499999999, 44.713117999999994], [-74.99553499999998, 44.71338799999998], [-74.99489999999999, 44.71356300000001], [-74.99468999999998, 44.713607], [-74.99449799999998, 44.71363699999999], [-74.994479, 44.71387499999999], [-74.99445199999998, 44.714002999999984], [-74.99440899999999, 44.71406199999999], [-74.99431599999998, 44.71411499999999], [-74.99429599999998, 44.71414299999998], [-74.99422299999998, 44.714333], [-74.99418999999999, 44.714368999999984], [-74.994131, 44.714396999999984], [-74.994011, 44.71441299999997], [-74.99347399999999, 44.714431000000005], [-74.992223, 44.71443399999998], [-74.99151499999998, 44.71444799999999], [-74.989356, 44.714487999999996], [-74.98721499999998, 44.71450599999999], [-74.98720299999998, 44.712013000000006], [-74.986458, 44.71200899999999], [-74.98222299999999, 44.712022999999995], [-74.98186599999998, 44.712028999999994], [-74.980646, 44.71204699999999], [-74.980091, 44.71206699999998], [-74.97971999999999, 44.71210999999999], [-74.97933499999998, 44.71219199999998], [-74.97871699999999, 44.712374999999994], [-74.977515, 44.712762999999995], [-74.97679499999998, 44.713008], [-74.97599199999999, 44.713303999999994], [-74.975741, 44.713407999999994], [-74.973924, 44.714249], [-74.97183, 44.715274999999984], [-74.97045899999998, 44.71592599999999], [-74.96747199999999, 44.717391999999975], [-74.96624999999999, 44.717990999999984], [-74.96306, 44.71959399999999], [-74.96054099999999, 44.72086], [-74.959803, 44.72121799999999], [-74.95826599999998, 44.722006], [-74.957977, 44.72217199999999], [-74.957703, 44.722303999999994], [-74.95767099999999, 44.72231799999999], [-74.95762399999998, 44.72225700000001], [-74.955581, 44.720189], [-74.950696, 44.71522499999998], [-74.947085, 44.711466999999985], [-74.94688999999998, 44.711260999999986], [-74.93769399999998, 44.70153299999999], [-74.93632799999999, 44.700107999999986], [-74.935655, 44.699389999999994], [-74.932763, 44.69636499999999], [-74.929484, 44.692762], [-74.928725, 44.69192299999998], [-74.92799799999999, 44.691116], [-74.92507199999999, 44.687886999999975], [-74.922912, 44.68577299999998], [-74.920463, 44.683214999999976], [-74.91759899999998, 44.68023599999998], [-74.916018, 44.678516], [-74.90938799999998, 44.67134999999998], [-74.90832499999999, 44.67026100000001], [-74.906814, 44.668702], [-74.90161499999998, 44.66320799999997], [-74.89969399999998, 44.66117599999999], [-74.896633, 44.657943], [-74.896098, 44.657377], [-74.907742, 44.651722000000014], [-74.91245299999999, 44.649456], [-74.91799599999999, 44.64680999999999], [-74.91889599999999, 44.64635400000001], [-74.925332, 44.64326899999999], [-74.929397, 44.64121499999998], [-74.931691, 44.64014599999999], [-74.933602, 44.63922099999999], [-74.93499299999998, 44.638546999999996], [-74.93515699999998, 44.638763999999995], [-74.93523599999999, 44.638857], [-74.93535099999998, 44.638991999999995], [-74.935631, 44.639283], [-74.938047, 44.641810999999976], [-74.938239, 44.642027999999996], [-74.93836099999999, 44.642134], [-74.938549, 44.64223600000001], [-74.93866799999998, 44.642267], [-74.94081399999999, 44.642590999999975], [-74.944165, 44.643233999999985], [-74.94659799999998, 44.64369099999998], [-74.94715399999998, 44.643768999999985], [-74.947459, 44.643778], [-74.948307, 44.643704], [-74.949021, 44.643631], [-74.94956999999998, 44.643550999999995], [-74.94980799999998, 44.643491000000004], [-74.94982599999999, 44.64357699999999], [-74.94985599999998, 44.643652], [-74.95018, 44.64411899999999], [-74.951118, 44.645568999999966], [-74.951776, 44.64653799999999], [-74.95280799999998, 44.64808699999998], [-74.952587, 44.64815599999999], [-74.952534, 44.648196], [-74.95253199999999, 44.64825399999998], [-74.95257099999998, 44.648297], [-74.95263899999999, 44.648317999999975], [-74.95277399999999, 44.64839099999998], [-74.95278499999999, 44.64844099999998], [-74.95275, 44.648500999999996], [-74.95268299999998, 44.64855099999999], [-74.952505, 44.648618], [-74.952235, 44.648661], [-74.952084, 44.64866500000001], [-74.95202799999998, 44.64868199999999], [-74.952001, 44.64871499999999], [-74.952005, 44.648786], [-74.95204599999998, 44.64884399999999], [-74.95214, 44.648906999999994], [-74.95216699999999, 44.64897699999999], [-74.95216299999998, 44.64902899999999], [-74.952148, 44.649043999999996], [-74.952075, 44.649061999999994], [-74.952004, 44.64906699999999], [-74.951948, 44.649082999999976], [-74.95179799999998, 44.64917299999997], [-74.951678, 44.64921200000001], [-74.951448, 44.649245], [-74.951118, 44.64925999999999], [-74.950813, 44.649294999999995], [-74.95075899999999, 44.649309999999986], [-74.95072499999999, 44.64933099999999], [-74.95068999999998, 44.64939899999998], [-74.95068599999998, 44.649437000000006], [-74.95070299999998, 44.649482000000006], [-74.950836, 44.64956599999998], [-74.950892, 44.64962999999998], [-74.950954, 44.64974199999998], [-74.951104, 44.649868999999974], [-74.95118099999999, 44.64995399999999], [-74.95118099999999, 44.649993999999985], [-74.95114199999999, 44.65001], [-74.95081599999999, 44.649983], [-74.950662, 44.64998599999998], [-74.95062499999999, 44.650002], [-74.950589, 44.65006599999999], [-74.95048, 44.650235], [-74.95031199999998, 44.65043499999998], [-74.95029099999999, 44.65052799999999], [-74.95021399999999, 44.65065299999998], [-74.950204, 44.65075699999998], [-74.95023099999999, 44.65081300000001], [-74.95047, 44.650966999999994], [-74.950543, 44.65109799999998], [-74.950563, 44.651205999999995], [-74.95055099999999, 44.65149099999998], [-74.95059299999998, 44.65161799999999], [-74.95059599999999, 44.65175099999999], [-74.950544, 44.651902000000014], [-74.950552, 44.65201299999998], [-74.950574, 44.65208299999999], [-74.95053899999998, 44.65215999999998], [-74.950532, 44.65224300000001], [-74.95054099999999, 44.652278999999986], [-74.95056499999998, 44.652307999999984], [-74.95065799999998, 44.652347000000006], [-74.950716, 44.65235399999999], [-74.95086099999999, 44.652347000000006], [-74.950915, 44.652331], [-74.951009, 44.65226799999999], [-74.95107099999998, 44.652248], [-74.95113099999998, 44.652244999999986], [-74.951202, 44.65226], [-74.95129399999999, 44.65229300000001], [-74.951363, 44.652333], [-74.951421, 44.65237999999999], [-74.95145699999998, 44.652428], [-74.95150599999998, 44.652584], [-74.951546, 44.652603], [-74.951587, 44.652606999999996], [-74.951706, 44.65259299999998], [-74.95180599999998, 44.65259100000001], [-74.95184499999998, 44.652572000000006], [-74.95187399999999, 44.652544999999975], [-74.95192, 44.652468000000006], [-74.95197199999998, 44.65241399999999], [-74.952047, 44.65228899999999], [-74.952191, 44.65212299999999], [-74.952286, 44.65204599999999], [-74.952332, 44.65202899999999], [-74.95249199999998, 44.652007999999995], [-74.952624, 44.652010999999995], [-74.95295999999999, 44.652068999999976], [-74.95304399999998, 44.65205799999998], [-74.953118, 44.65203799999999], [-74.953206, 44.65204599999999], [-74.95324699999999, 44.65208299999999], [-74.953257, 44.652155999999984], [-74.953498, 44.65218099999999], [-74.953724, 44.652221999999995], [-74.95392499999998, 44.652217999999976], [-74.95398699999998, 44.65221000000001], [-74.954037, 44.652213999999994], [-74.95410599999998, 44.65228299999998], [-74.95416399999999, 44.652306], [-74.95420599999999, 44.652299], [-74.954233, 44.652274999999975], [-74.954257, 44.652141000000015], [-74.95430699999999, 44.65210199999998], [-74.95447399999999, 44.65202499999999], [-74.954555, 44.65197499999999], [-74.954644, 44.65194799999998], [-74.95473299999998, 44.651931999999995], [-74.95487199999998, 44.651944], [-74.954953, 44.651931999999995], [-74.95503399999998, 44.651902000000014], [-74.95509899999998, 44.651835999999996], [-74.95511099999999, 44.65179399999999], [-74.955165, 44.65174800000001], [-74.955242, 44.651720999999974], [-74.955377, 44.65170499999999], [-74.955624, 44.651694], [-74.955699, 44.65167299999998], [-74.95631499999999, 44.652305], [-74.95660699999999, 44.65261799999998], [-74.95770999999999, 44.653786999999994], [-74.95823999999999, 44.65433699999999], [-74.959884, 44.65610499999999], [-74.960906, 44.657228999999994], [-74.962434, 44.65889099999998], [-74.964135, 44.660733999999984], [-74.96421999999998, 44.660826], [-74.95326299999998, 44.66614599999999], [-74.95695599999999, 44.669947999999984], [-74.957549, 44.67055399999999], [-74.95786, 44.67087599999999], [-74.956923, 44.672225999999995], [-74.95601999999998, 44.673606], [-74.956923, 44.67445799999999], [-74.95847699999999, 44.67295399999998], [-74.959634, 44.67370599999999], [-74.96034399999998, 44.673434], [-74.96713, 44.680414999999996], [-74.97561999999999, 44.689159000000004], [-74.976333, 44.689901000000006], [-74.97647299999998, 44.68984999999998], [-74.97716799999999, 44.689544999999995], [-74.978167, 44.68917799999999], [-74.98202499999998, 44.68720699999998], [-74.98251299999998, 44.68776599999998], [-74.98402299999998, 44.68966400000001], [-74.984889, 44.68925299999999], [-74.98428199999998, 44.686889], [-74.98544, 44.68688999999998], [-74.98544, 44.68632300000001], [-74.986211, 44.686298999999984], [-74.98616899999998, 44.68579999999999], [-74.986126, 44.68552599999999], [-74.98627199999999, 44.68552599999999], [-74.98641799999999, 44.685449000000006], [-74.98700599999998, 44.685426], [-74.987008, 44.68555800000001], [-74.987025, 44.68767199999999], [-74.987027, 44.688015], [-74.98789499999998, 44.687552000000004], [-74.98812299999999, 44.687499], [-74.988247, 44.68745199999999], [-74.98866299999999, 44.687234999999994], [-74.990107, 44.68666599999999], [-74.99141, 44.68615499999999], [-74.992643, 44.685672000000004], [-74.991993, 44.68508599999999], [-74.989851, 44.68568699999998], [-74.98983199999999, 44.685648999999984], [-74.989451, 44.685016], [-74.98937699999999, 44.684996000000005], [-74.989274, 44.68500999999998], [-74.98860399999998, 44.68520699999999], [-74.98835199999999, 44.68530699999999], [-74.98804999999999, 44.68510800000001], [-74.98780099999998, 44.685211999999986], [-74.98777, 44.684898], [-74.986997, 44.684802], [-74.99094899999999, 44.68296499999998], [-74.994377, 44.681317999999976], [-74.99505699999999, 44.68099199999999], [-74.995519, 44.68077799999998], [-74.99618399999999, 44.68044999999999], [-74.99624399999999, 44.68042], [-74.99673, 44.68019199999999], [-74.99960399999998, 44.678772], [-74.999918, 44.67858399999999], [-75.006412, 44.67540400000001], [-75.00959399999998, 44.67678099999998], [-75.00998799999999, 44.676951], [-75.010949, 44.67736199999999], [-75.01119399999999, 44.677467], [-75.01839199999999, 44.680448000000005], [-75.019184, 44.680762], [-75.01998299999998, 44.681100999999984], [-75.020792, 44.68142199999999], [-75.02248399999998, 44.68212499999999], [-75.02581699999999, 44.68350199999999], [-75.03063, 44.685531999999974], [-75.03252799999999, 44.686347000000005], [-75.03309199999998, 44.686588999999984], [-75.035791, 44.68772599999998], [-75.038291, 44.688840000000006], [-75.04328299999999, 44.690935999999994], [-75.04542899999998, 44.691841999999994], [-75.04612399999999, 44.69213099999999]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;id&quot;: &quot;12781&quot;, &quot;properties&quot;: {&quot;Biden_proportion&quot;: 0.598314606741573, &quot;COUNTY&quot;: &quot;St. Lawrence&quot;, &quot;COUNTYFP&quot;: &quot;089&quot;, &quot;G20PREDBID&quot;: 426, &quot;G20PREGHAW&quot;: 2, &quot;G20PREIPIE&quot;: 3, &quot;G20PRELJOR&quot;: 11, &quot;G20PREOWRI&quot;: 2, &quot;G20PRERTRU&quot;: 286, &quot;PRECINCT&quot;: &quot;Potsdam 4&quot;, &quot;STATEFP&quot;: &quot;36&quot;, &quot;__folium_color&quot;: &quot;#440154&quot;}, &quot;type&quot;: &quot;Feature&quot;}, {&quot;bbox&quot;: [-74.98700599999998, 44.67235999999998, -74.96713, 44.689901000000006], &quot;geometry&quot;: {&quot;coordinates&quot;: [[[-74.98700599999998, 44.685426], [-74.98641799999999, 44.685449000000006], [-74.98627199999999, 44.68552599999999], [-74.986126, 44.68552599999999], [-74.98616899999998, 44.68579999999999], [-74.986211, 44.686298999999984], [-74.98544, 44.68632300000001], [-74.98544, 44.68688999999998], [-74.98428199999998, 44.686889], [-74.984889, 44.68925299999999], [-74.98402299999998, 44.68966400000001], [-74.98251299999998, 44.68776599999998], [-74.98202499999998, 44.68720699999998], [-74.978167, 44.68917799999999], [-74.97716799999999, 44.689544999999995], [-74.97647299999998, 44.68984999999998], [-74.976333, 44.689901000000006], [-74.97561999999999, 44.689159000000004], [-74.96713, 44.680414999999996], [-74.96717599999998, 44.680381999999994], [-74.96786299999998, 44.67988899999998], [-74.97117999999998, 44.677501999999976], [-74.972016, 44.67690100000001], [-74.973687, 44.675697], [-74.974847, 44.67485599999998], [-74.97591899999999, 44.67408399999998], [-74.97714899999998, 44.673185999999994], [-74.97825999999999, 44.67238099999999], [-74.978363, 44.672402], [-74.97886, 44.672418999999984], [-74.980448, 44.67238999999999], [-74.981399, 44.67235999999998], [-74.981403, 44.67295], [-74.982235, 44.67294799999999], [-74.98297699999999, 44.67295699999997], [-74.983499, 44.67294799999999], [-74.984419, 44.672956000000006], [-74.98453499999998, 44.67296399999997], [-74.98462499999998, 44.67297000000001], [-74.98686099999999, 44.67297200000001], [-74.986859, 44.67353099999998], [-74.986862, 44.674252999999986], [-74.986862, 44.674359], [-74.986865, 44.675222], [-74.986868, 44.675408], [-74.98687, 44.67555699999998], [-74.986875, 44.676081999999994], [-74.98688299999999, 44.67686599999999], [-74.98689099999999, 44.67795399999999], [-74.98689399999999, 44.678079999999994], [-74.98690599999999, 44.678869999999996], [-74.986907, 44.679186], [-74.98691899999999, 44.679887], [-74.986932, 44.680616999999984], [-74.986935, 44.68078299999998], [-74.98697599999998, 44.683647000000015], [-74.986997, 44.684802], [-74.98700599999998, 44.685426]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;id&quot;: &quot;12782&quot;, &quot;properties&quot;: {&quot;Biden_proportion&quot;: 0.7596899224806202, &quot;COUNTY&quot;: &quot;St. Lawrence&quot;, &quot;COUNTYFP&quot;: &quot;089&quot;, &quot;G20PREDBID&quot;: 490, &quot;G20PREGHAW&quot;: 8, &quot;G20PREIPIE&quot;: 5, &quot;G20PRELJOR&quot;: 10, &quot;G20PREOWRI&quot;: 6, &quot;G20PRERTRU&quot;: 155, &quot;PRECINCT&quot;: &quot;Potsdam 5&quot;, &quot;STATEFP&quot;: &quot;36&quot;, &quot;__folium_color&quot;: &quot;#5ac864&quot;}, &quot;type&quot;: &quot;Feature&quot;}, {&quot;bbox&quot;: [-74.986997, 44.660826, -74.95326299999998, 44.680414999999996], &quot;geometry&quot;: {&quot;coordinates&quot;: [[[-74.98696199999998, 44.668493999999995], [-74.98691199999998, 44.668592999999994], [-74.986869, 44.668632], [-74.98686599999999, 44.66899900000001], [-74.986857, 44.66970799999997], [-74.986853, 44.66983199999998], [-74.986858, 44.67055799999998], [-74.986858, 44.67103199999999], [-74.986858, 44.671161000000005], [-74.986858, 44.67238999999999], [-74.98686099999999, 44.67290500000001], [-74.98686099999999, 44.67297200000001], [-74.98462499999998, 44.67297000000001], [-74.98453499999998, 44.67296399999997], [-74.984419, 44.672956000000006], [-74.983499, 44.67294799999999], [-74.98297699999999, 44.67295699999997], [-74.982235, 44.67294799999999], [-74.981403, 44.67295], [-74.981399, 44.67235999999998], [-74.980448, 44.67238999999999], [-74.97886, 44.672418999999984], [-74.978363, 44.672402], [-74.97825999999999, 44.67238099999999], [-74.97714899999998, 44.673185999999994], [-74.97591899999999, 44.67408399999998], [-74.974847, 44.67485599999998], [-74.973687, 44.675697], [-74.972016, 44.67690100000001], [-74.97117999999998, 44.677501999999976], [-74.96786299999998, 44.67988899999998], [-74.96717599999998, 44.680381999999994], [-74.96713, 44.680414999999996], [-74.96034399999998, 44.673434], [-74.959634, 44.67370599999999], [-74.95847699999999, 44.67295399999998], [-74.956923, 44.67445799999999], [-74.95601999999998, 44.673606], [-74.956923, 44.672225999999995], [-74.95786, 44.67087599999999], [-74.957549, 44.67055399999999], [-74.95695599999999, 44.669947999999984], [-74.95326299999998, 44.66614599999999], [-74.96421999999998, 44.660826], [-74.964449, 44.66107299999997], [-74.96529799999998, 44.66198799999998], [-74.965657, 44.662397], [-74.965716, 44.66246399999998], [-74.96704399999999, 44.66390399999998], [-74.967439, 44.664337999999994], [-74.96796299999998, 44.66488700000001], [-74.968312, 44.66526499999999], [-74.968695, 44.665674999999986], [-74.96885699999999, 44.66582499999999], [-74.96901699999998, 44.665935999999974], [-74.96917499999998, 44.666015999999985], [-74.969222, 44.66603299999998], [-74.969521, 44.66613199999999], [-74.97193299999999, 44.66691299999999], [-74.972022, 44.666941999999985], [-74.97226799999999, 44.66653799999999], [-74.972449, 44.66626600000001], [-74.972623, 44.666008999999974], [-74.97286999999999, 44.66610299999999], [-74.97458799999998, 44.66664699999998], [-74.974796, 44.666712999999994], [-74.97484399999999, 44.666658999999974], [-74.97496799999999, 44.666567], [-74.975081, 44.66652399999998], [-74.975146, 44.66651600000001], [-74.97588999999998, 44.66648699999999], [-74.97694899999999, 44.66648199999999], [-74.977822, 44.66647999999999], [-74.97821399999998, 44.66647999999999], [-74.978751, 44.66648099999998], [-74.979272, 44.66647200000001], [-74.98053999999998, 44.66647499999999], [-74.98130099999999, 44.66648199999999], [-74.982653, 44.66646899999999], [-74.983995, 44.66647], [-74.98499099999998, 44.666450000000005], [-74.98508799999999, 44.666467], [-74.985151, 44.666507], [-74.985494, 44.66681], [-74.98558499999999, 44.66683099999997], [-74.98643099999998, 44.667622], [-74.986997, 44.66847399999998], [-74.98696199999998, 44.668493999999995]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;id&quot;: &quot;12784&quot;, &quot;properties&quot;: {&quot;Biden_proportion&quot;: 0.8151408450704225, &quot;COUNTY&quot;: &quot;St. Lawrence&quot;, &quot;COUNTYFP&quot;: &quot;089&quot;, &quot;G20PREDBID&quot;: 463, &quot;G20PREGHAW&quot;: 6, &quot;G20PREIPIE&quot;: 1, &quot;G20PRELJOR&quot;: 5, &quot;G20PREOWRI&quot;: 5, &quot;G20PRERTRU&quot;: 105, &quot;PRECINCT&quot;: &quot;Potsdam 7&quot;, &quot;STATEFP&quot;: &quot;36&quot;, &quot;__folium_color&quot;: &quot;#fde725&quot;}, &quot;type&quot;: &quot;Feature&quot;}], &quot;type&quot;: &quot;FeatureCollection&quot;});\n","\n","        \n","    \n","    geo_json_ef6c82613c53c8d614829ee4ce736842.bindTooltip(\n","    function(layer){\n","    let div = L.DomUtil.create(&#x27;div&#x27;);\n","    \n","    let handleObject = feature=&gt;typeof(feature)==&#x27;object&#x27; ? JSON.stringify(feature) : feature;\n","    let fields = [&quot;STATEFP&quot;, &quot;COUNTYFP&quot;, &quot;COUNTY&quot;, &quot;PRECINCT&quot;, &quot;G20PREDBID&quot;, &quot;G20PRERTRU&quot;, &quot;G20PRELJOR&quot;, &quot;G20PREGHAW&quot;, &quot;G20PREIPIE&quot;, &quot;G20PREOWRI&quot;, &quot;Biden_proportion&quot;];\n","    let aliases = [&quot;STATEFP&quot;, &quot;COUNTYFP&quot;, &quot;COUNTY&quot;, &quot;PRECINCT&quot;, &quot;G20PREDBID&quot;, &quot;G20PRERTRU&quot;, &quot;G20PRELJOR&quot;, &quot;G20PREGHAW&quot;, &quot;G20PREIPIE&quot;, &quot;G20PREOWRI&quot;, &quot;Biden_proportion&quot;];\n","    let table = &#x27;&lt;table&gt;&#x27; +\n","        String(\n","        fields.map(\n","        (v,i)=&gt;\n","        `&lt;tr&gt;\n","            &lt;th&gt;${aliases[i]}&lt;/th&gt;\n","            \n","            &lt;td&gt;${handleObject(layer.feature.properties[v])}&lt;/td&gt;\n","        &lt;/tr&gt;`).join(&#x27;&#x27;))\n","    +&#x27;&lt;/table&gt;&#x27;;\n","    div.innerHTML=table;\n","    \n","    return div\n","    }\n","    ,{&quot;className&quot;: &quot;foliumtooltip&quot;, &quot;sticky&quot;: true});\n","                     \n","    \n","    var color_map_d67679ca625978f2adb1cd55cf6c0afb = {};\n","\n","    \n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.color = d3.scale.threshold()\n","              .domain([0.598314606741573, 0.5987491282612701, 0.5991836497809672, 0.5996181713006643, 0.6000526928203613, 0.6004872143400585, 0.6009217358597555, 0.6013562573794526, 0.6017907788991498, 0.6022253004188468, 0.602659821938544, 0.603094343458241, 0.6035288649779381, 0.6039633864976353, 0.6043979080173323, 0.6048324295370294, 0.6052669510567265, 0.6057014725764236, 0.6061359940961206, 0.6065705156158178, 0.6070050371355149, 0.6074395586552119, 0.6078740801749091, 0.6083086016946061, 0.6087431232143032, 0.6091776447340004, 0.6096121662536974, 0.6100466877733945, 0.6104812092930916, 0.6109157308127887, 0.6113502523324857, 0.6117847738521829, 0.61221929537188, 0.612653816891577, 0.6130883384112742, 0.6135228599309712, 0.6139573814506684, 0.6143919029703655, 0.6148264244900625, 0.6152609460097597, 0.6156954675294567, 0.6161299890491538, 0.6165645105688509, 0.616999032088548, 0.6174335536082451, 0.6178680751279422, 0.6183025966476393, 0.6187371181673363, 0.6191716396870335, 0.6196061612067305, 0.6200406827264276, 0.6204752042461248, 0.6209097257658218, 0.621344247285519, 0.621778768805216, 0.6222132903249131, 0.6226478118446103, 0.6230823333643073, 0.6235168548840044, 0.6239513764037015, 0.6243858979233986, 0.6248204194430956, 0.6252549409627928, 0.6256894624824899, 0.6261239840021869, 0.6265585055218841, 0.6269930270415811, 0.6274275485612782, 0.6278620700809754, 0.6282965916006724, 0.6287311131203696, 0.6291656346400666, 0.6296001561597637, 0.6300346776794608, 0.6304691991991579, 0.630903720718855, 0.6313382422385521, 0.6317727637582492, 0.6322072852779462, 0.6326418067976434, 0.6330763283173404, 0.6335108498370375, 0.6339453713567347, 0.6343798928764317, 0.6348144143961288, 0.6352489359158259, 0.635683457435523, 0.6361179789552202, 0.6365525004749172, 0.6369870219946143, 0.6374215435143114, 0.6378560650340085, 0.6382905865537056, 0.6387251080734027, 0.6391596295930998, 0.6395941511127968, 0.640028672632494, 0.640463194152191, 0.6408977156718881, 0.6413322371915853, 0.6417667587112823, 0.6422012802309794, 0.6426358017506765, 0.6430703232703736, 0.6435048447900706, 0.6439393663097678, 0.6443738878294649, 0.644808409349162, 0.6452429308688591, 0.6456774523885561, 0.6461119739082533, 0.6465464954279503, 0.6469810169476474, 0.6474155384673446, 0.6478500599870416, 0.6482845815067387, 0.6487191030264358, 0.6491536245461329, 0.64958814606583, 0.6500226675855271, 0.6504571891052242, 0.6508917106249212, 0.6513262321446184, 0.6517607536643155, 0.6521952751840125, 0.6526297967037097, 0.6530643182234067, 0.6534988397431039, 0.6539333612628009, 0.654367882782498, 0.6548024043021952, 0.6552369258218922, 0.6556714473415893, 0.6561059688612864, 0.6565404903809835, 0.6569750119006805, 0.6574095334203777, 0.6578440549400748, 0.6582785764597718, 0.658713097979469, 0.659147619499166, 0.6595821410188631, 0.6600166625385603, 0.6604511840582573, 0.6608857055779545, 0.6613202270976515, 0.6617547486173486, 0.6621892701370456, 0.6626237916567428, 0.6630583131764399, 0.663492834696137, 0.6639273562158341, 0.6643618777355311, 0.6647963992552283, 0.6652309207749254, 0.6656654422946224, 0.6660999638143196, 0.6665344853340166, 0.6669690068537137, 0.6674035283734108, 0.6678380498931079, 0.668272571412805, 0.6687070929325021, 0.6691416144521992, 0.6695761359718962, 0.6700106574915934, 0.6704451790112904, 0.6708797005309876, 0.6713142220506847, 0.6717487435703817, 0.6721832650900789, 0.6726177866097759, 0.673052308129473, 0.6734868296491701, 0.6739213511688672, 0.6743558726885643, 0.6747903942082614, 0.6752249157279585, 0.6756594372476556, 0.6760939587673527, 0.6765284802870498, 0.6769630018067468, 0.677397523326444, 0.677832044846141, 0.6782665663658382, 0.6787010878855353, 0.6791356094052323, 0.6795701309249295, 0.6800046524446265, 0.6804391739643236, 0.6808736954840207, 0.6813082170037178, 0.6817427385234149, 0.682177260043112, 0.6826117815628091, 0.6830463030825061, 0.6834808246022033, 0.6839153461219003, 0.6843498676415974, 0.6847843891612946, 0.6852189106809916, 0.6856534322006888, 0.6860879537203858, 0.6865224752400829, 0.68695699675978, 0.6873915182794771, 0.6878260397991742, 0.6882605613188713, 0.6886950828385684, 0.6891296043582655, 0.6895641258779626, 0.6899986473976597, 0.6904331689173567, 0.6908676904370539, 0.6913022119567509, 0.691736733476448, 0.6921712549961452, 0.6926057765158422, 0.6930402980355393, 0.6934748195552364, 0.6939093410749335, 0.6943438625946305, 0.6947783841143277, 0.6952129056340248, 0.6956474271537219, 0.696081948673419, 0.696516470193116, 0.6969509917128132, 0.6973855132325102, 0.6978200347522073, 0.6982545562719045, 0.6986890777916015, 0.6991235993112986, 0.6995581208309957, 0.6999926423506928, 0.7004271638703898, 0.700861685390087, 0.7012962069097841, 0.7017307284294811, 0.7021652499491783, 0.7025997714688754, 0.7030342929885725, 0.7034688145082696, 0.7039033360279666, 0.7043378575476638, 0.7047723790673608, 0.7052069005870579, 0.7056414221067551, 0.7060759436264521, 0.7065104651461492, 0.7069449866658463, 0.7073795081855434, 0.7078140297052404, 0.7082485512249376, 0.7086830727446347, 0.7091175942643317, 0.7095521157840289, 0.7099866373037259, 0.710421158823423, 0.7108556803431201, 0.7112902018628172, 0.7117247233825144, 0.7121592449022114, 0.7125937664219085, 0.7130282879416056, 0.7134628094613027, 0.7138973309809997, 0.7143318525006969, 0.714766374020394, 0.715200895540091, 0.7156354170597882, 0.7160699385794852, 0.7165044600991823, 0.7169389816188795, 0.7173735031385765, 0.7178080246582736, 0.7182425461779707, 0.7186770676976678, 0.719111589217365, 0.719546110737062, 0.7199806322567591, 0.7204151537764562, 0.7208496752961533, 0.7212841968158503, 0.7217187183355475, 0.7221532398552446, 0.7225877613749416, 0.7230222828946388, 0.7234568044143358, 0.7238913259340329, 0.72432584745373, 0.7247603689734271, 0.7251948904931242, 0.7256294120128213, 0.7260639335325184, 0.7264984550522156, 0.7269329765719126, 0.7273674980916097, 0.7278020196113067, 0.7282365411310039, 0.7286710626507009, 0.7291055841703981, 0.7295401056900952, 0.7299746272097922, 0.7304091487294894, 0.7308436702491864, 0.7312781917688835, 0.7317127132885806, 0.7321472348082777, 0.7325817563279748, 0.7330162778476719, 0.733450799367369, 0.733885320887066, 0.7343198424067632, 0.7347543639264602, 0.7351888854461573, 0.7356234069658545, 0.7360579284855515, 0.7364924500052487, 0.7369269715249458, 0.7373614930446428, 0.7377960145643399, 0.738230536084037, 0.7386650576037341, 0.7390995791234312, 0.7395341006431283, 0.7399686221628254, 0.7404031436825225, 0.7408376652022195, 0.7412721867219166, 0.7417067082416138, 0.7421412297613108, 0.742575751281008, 0.7430102728007051, 0.7434447943204021, 0.7438793158400993, 0.7443138373597963, 0.7447483588794934, 0.7451828803991905, 0.7456174019188876, 0.7460519234385847, 0.7464864449582818, 0.7469209664779789, 0.7473554879976759, 0.7477900095173731, 0.7482245310370701, 0.7486590525567672, 0.7490935740764644, 0.7495280955961614, 0.7499626171158585, 0.7503971386355556, 0.7508316601552527, 0.7512661816749499, 0.7517007031946469, 0.752135224714344, 0.752569746234041, 0.7530042677537382, 0.7534387892734353, 0.7538733107931324, 0.7543078323128295, 0.7547423538325265, 0.7551768753522237, 0.7556113968719207, 0.7560459183916178, 0.756480439911315, 0.756914961431012, 0.7573494829507091, 0.7577840044704062, 0.7582185259901033, 0.7586530475098003, 0.7590875690294975, 0.7595220905491946, 0.7599566120688916, 0.7603911335885888, 0.7608256551082859, 0.761260176627983, 0.76169469814768, 0.7621292196673771, 0.7625637411870743, 0.7629982627067713, 0.7634327842264684, 0.7638673057461656, 0.7643018272658626, 0.7647363487855596, 0.7651708703052568, 0.7656053918249539, 0.7660399133446509, 0.7664744348643481, 0.7669089563840452, 0.7673434779037422, 0.7677779994234394, 0.7682125209431364, 0.7686470424628336, 0.7690815639825306, 0.7695160855022277, 0.7699506070219249, 0.7703851285416219, 0.770819650061319, 0.7712541715810161, 0.7716886931007132, 0.7721232146204102, 0.7725577361401074, 0.7729922576598045, 0.7734267791795015, 0.7738613006991987, 0.7742958222188957, 0.7747303437385928, 0.7751648652582899, 0.775599386777987, 0.7760339082976841, 0.7764684298173812, 0.7769029513370783, 0.7773374728567753, 0.7777719943764725, 0.7782065158961695, 0.7786410374158667, 0.7790755589355638, 0.7795100804552608, 0.779944601974958, 0.7803791234946551, 0.7808136450143521, 0.7812481665340493, 0.7816826880537463, 0.7821172095734434, 0.7825517310931405, 0.7829862526128376, 0.7834207741325347, 0.7838552956522318, 0.7842898171719289, 0.784724338691626, 0.7851588602113231, 0.7855933817310201, 0.7860279032507173, 0.7864624247704144, 0.7868969462901114, 0.7873314678098086, 0.7877659893295057, 0.7882005108492027, 0.7886350323688998, 0.7890695538885969, 0.789504075408294, 0.7899385969279911, 0.7903731184476882, 0.7908076399673853, 0.7912421614870824, 0.7916766830067795, 0.7921112045264765, 0.7925457260461737, 0.7929802475658707, 0.7934147690855679, 0.793849290605265, 0.794283812124962, 0.7947183336446592, 0.7951528551643562, 0.7955873766840533, 0.7960218982037504, 0.7964564197234475, 0.7968909412431446, 0.7973254627628417, 0.7977599842825388, 0.7981945058022358, 0.798629027321933, 0.79906354884163, 0.7994980703613271, 0.7999325918810243, 0.8003671134007213, 0.8008016349204184, 0.8012361564401155, 0.8016706779598126, 0.8021051994795096, 0.8025397209992068, 0.8029742425189039, 0.803408764038601, 0.8038432855582981, 0.8042778070779951, 0.8047123285976923, 0.8051468501173893, 0.8055813716370864, 0.8060158931567836, 0.8064504146764806, 0.8068849361961777, 0.8073194577158749, 0.8077539792355719, 0.808188500755269, 0.8086230222749662, 0.8090575437946632, 0.8094920653143602, 0.8099265868340574, 0.8103611083537545, 0.8107956298734516, 0.8112301513931487, 0.8116646729128458, 0.8120991944325429, 0.8125337159522399, 0.812968237471937, 0.8134027589916342, 0.8138372805113312, 0.8142718020310283, 0.8147063235507255, 0.8151408450704225])\n","              .range([&#x27;#440154ff&#x27;, &#x27;#440155ff&#x27;, &#x27;#440256ff&#x27;, &#x27;#440356ff&#x27;, &#x27;#450457ff&#x27;, &#x27;#450458ff&#x27;, &#x27;#450559ff&#x27;, &#x27;#450659ff&#x27;, &#x27;#46075aff&#x27;, &#x27;#46075bff&#x27;, &#x27;#46085cff&#x27;, &#x27;#46095cff&#x27;, &#x27;#460a5dff&#x27;, &#x27;#460a5eff&#x27;, &#x27;#460b5eff&#x27;, &#x27;#460c5fff&#x27;, &#x27;#470d60ff&#x27;, &#x27;#470d61ff&#x27;, &#x27;#470e61ff&#x27;, &#x27;#470f62ff&#x27;, &#x27;#471063ff&#x27;, &#x27;#471064ff&#x27;, &#x27;#471164ff&#x27;, &#x27;#471265ff&#x27;, &#x27;#471365ff&#x27;, &#x27;#481366ff&#x27;, &#x27;#481467ff&#x27;, &#x27;#481568ff&#x27;, &#x27;#481668ff&#x27;, &#x27;#481669ff&#x27;, &#x27;#481769ff&#x27;, &#x27;#48176aff&#x27;, &#x27;#48186bff&#x27;, &#x27;#48196cff&#x27;, &#x27;#481a6cff&#x27;, &#x27;#481a6dff&#x27;, &#x27;#481b6dff&#x27;, &#x27;#481c6eff&#x27;, &#x27;#481c6eff&#x27;, &#x27;#481d6fff&#x27;, &#x27;#481d6fff&#x27;, &#x27;#481f70ff&#x27;, &#x27;#481f70ff&#x27;, &#x27;#482071ff&#x27;, &#x27;#482072ff&#x27;, &#x27;#482173ff&#x27;, &#x27;#482273ff&#x27;, &#x27;#482374ff&#x27;, &#x27;#482374ff&#x27;, &#x27;#482475ff&#x27;, &#x27;#482476ff&#x27;, &#x27;#482576ff&#x27;, &#x27;#482577ff&#x27;, &#x27;#482677ff&#x27;, &#x27;#482778ff&#x27;, &#x27;#482878ff&#x27;, &#x27;#482879ff&#x27;, &#x27;#482979ff&#x27;, &#x27;#47297aff&#x27;, &#x27;#472a7aff&#x27;, &#x27;#472b7aff&#x27;, &#x27;#472c7aff&#x27;, &#x27;#472c7bff&#x27;, &#x27;#472d7bff&#x27;, &#x27;#472d7cff&#x27;, &#x27;#472e7cff&#x27;, &#x27;#472e7dff&#x27;, &#x27;#472f7dff&#x27;, &#x27;#462f7eff&#x27;, &#x27;#46307eff&#x27;, &#x27;#46317eff&#x27;, &#x27;#46327eff&#x27;, &#x27;#46327fff&#x27;, &#x27;#46337fff&#x27;, &#x27;#463480ff&#x27;, &#x27;#453480ff&#x27;, &#x27;#453581ff&#x27;, &#x27;#453581ff&#x27;, &#x27;#453681ff&#x27;, &#x27;#453781ff&#x27;, &#x27;#453882ff&#x27;, &#x27;#443882ff&#x27;, &#x27;#443983ff&#x27;, &#x27;#443983ff&#x27;, &#x27;#443a83ff&#x27;, &#x27;#443a83ff&#x27;, &#x27;#443b84ff&#x27;, &#x27;#433c84ff&#x27;, &#x27;#433d84ff&#x27;, &#x27;#433d85ff&#x27;, &#x27;#433e85ff&#x27;, &#x27;#423e85ff&#x27;, &#x27;#423f85ff&#x27;, &#x27;#423f86ff&#x27;, &#x27;#424086ff&#x27;, &#x27;#424086ff&#x27;, &#x27;#424186ff&#x27;, &#x27;#414187ff&#x27;, &#x27;#414287ff&#x27;, &#x27;#414387ff&#x27;, &#x27;#414487ff&#x27;, &#x27;#404488ff&#x27;, &#x27;#404588ff&#x27;, &#x27;#404588ff&#x27;, &#x27;#404688ff&#x27;, &#x27;#3f4688ff&#x27;, &#x27;#3f4788ff&#x27;, &#x27;#3f4789ff&#x27;, &#x27;#3f4889ff&#x27;, &#x27;#3e4889ff&#x27;, &#x27;#3e4989ff&#x27;, &#x27;#3e4a89ff&#x27;, &#x27;#3e4a89ff&#x27;, &#x27;#3e4b8aff&#x27;, &#x27;#3d4c8aff&#x27;, &#x27;#3d4d8aff&#x27;, &#x27;#3d4d8aff&#x27;, &#x27;#3d4e8aff&#x27;, &#x27;#3c4e8aff&#x27;, &#x27;#3c4f8aff&#x27;, &#x27;#3c4f8aff&#x27;, &#x27;#3c508bff&#x27;, &#x27;#3b508bff&#x27;, &#x27;#3b518bff&#x27;, &#x27;#3b518bff&#x27;, &#x27;#3b528bff&#x27;, &#x27;#3a528bff&#x27;, &#x27;#3a538bff&#x27;, &#x27;#3a538bff&#x27;, &#x27;#3a548cff&#x27;, &#x27;#39548cff&#x27;, &#x27;#39558cff&#x27;, &#x27;#39558cff&#x27;, &#x27;#39568cff&#x27;, &#x27;#38578cff&#x27;, &#x27;#38588cff&#x27;, &#x27;#38588cff&#x27;, &#x27;#38598cff&#x27;, &#x27;#37598cff&#x27;, &#x27;#375a8cff&#x27;, &#x27;#375a8dff&#x27;, &#x27;#375b8dff&#x27;, &#x27;#365b8dff&#x27;, &#x27;#365c8dff&#x27;, &#x27;#365c8dff&#x27;, &#x27;#365d8dff&#x27;, &#x27;#355d8dff&#x27;, &#x27;#355e8dff&#x27;, &#x27;#355f8dff&#x27;, &#x27;#355f8dff&#x27;, &#x27;#34608dff&#x27;, &#x27;#34608dff&#x27;, &#x27;#34618dff&#x27;, &#x27;#34618dff&#x27;, &#x27;#33628dff&#x27;, &#x27;#33628dff&#x27;, &#x27;#33638dff&#x27;, &#x27;#32638dff&#x27;, &#x27;#32648eff&#x27;, &#x27;#32648eff&#x27;, &#x27;#32658eff&#x27;, &#x27;#31658eff&#x27;, &#x27;#31668eff&#x27;, &#x27;#31668eff&#x27;, &#x27;#31678eff&#x27;, &#x27;#31678eff&#x27;, &#x27;#31688eff&#x27;, &#x27;#30688eff&#x27;, &#x27;#30698eff&#x27;, &#x27;#30698eff&#x27;, &#x27;#306a8eff&#x27;, &#x27;#2f6a8eff&#x27;, &#x27;#2f6b8eff&#x27;, &#x27;#2f6b8eff&#x27;, &#x27;#2f6c8eff&#x27;, &#x27;#2e6c8eff&#x27;, &#x27;#2e6d8eff&#x27;, &#x27;#2e6d8eff&#x27;, &#x27;#2e6e8eff&#x27;, &#x27;#2e6e8eff&#x27;, &#x27;#2e6f8eff&#x27;, &#x27;#2d6f8eff&#x27;, &#x27;#2d708eff&#x27;, &#x27;#2d708eff&#x27;, &#x27;#2d718eff&#x27;, &#x27;#2c718eff&#x27;, &#x27;#2c718eff&#x27;, &#x27;#2c728eff&#x27;, &#x27;#2c728eff&#x27;, &#x27;#2c738eff&#x27;, &#x27;#2c738eff&#x27;, &#x27;#2b748eff&#x27;, &#x27;#2b748eff&#x27;, &#x27;#2b758eff&#x27;, &#x27;#2b758eff&#x27;, &#x27;#2a768eff&#x27;, &#x27;#2a768eff&#x27;, &#x27;#2a778eff&#x27;, &#x27;#2a778eff&#x27;, &#x27;#2a788eff&#x27;, &#x27;#29788eff&#x27;, &#x27;#29798eff&#x27;, &#x27;#29798eff&#x27;, &#x27;#297a8eff&#x27;, &#x27;#297a8eff&#x27;, &#x27;#297b8eff&#x27;, &#x27;#287b8eff&#x27;, &#x27;#287c8eff&#x27;, &#x27;#287c8eff&#x27;, &#x27;#287d8eff&#x27;, &#x27;#277d8eff&#x27;, &#x27;#277e8eff&#x27;, &#x27;#277e8eff&#x27;, &#x27;#277f8eff&#x27;, &#x27;#277f8eff&#x27;, &#x27;#27808eff&#x27;, &#x27;#26808eff&#x27;, &#x27;#26818eff&#x27;, &#x27;#26818eff&#x27;, &#x27;#26828eff&#x27;, &#x27;#26828eff&#x27;, &#x27;#26828eff&#x27;, &#x27;#25828eff&#x27;, &#x27;#25838eff&#x27;, &#x27;#25838eff&#x27;, &#x27;#25848eff&#x27;, &#x27;#25858eff&#x27;, &#x27;#25858eff&#x27;, &#x27;#24868eff&#x27;, &#x27;#24868eff&#x27;, &#x27;#24878eff&#x27;, &#x27;#24878eff&#x27;, &#x27;#23888eff&#x27;, &#x27;#23888eff&#x27;, &#x27;#23898eff&#x27;, &#x27;#23898eff&#x27;, &#x27;#238a8dff&#x27;, &#x27;#238a8dff&#x27;, &#x27;#228b8dff&#x27;, &#x27;#228b8dff&#x27;, &#x27;#228c8dff&#x27;, &#x27;#228c8dff&#x27;, &#x27;#228d8dff&#x27;, &#x27;#218d8dff&#x27;, &#x27;#218e8dff&#x27;, &#x27;#218e8dff&#x27;, &#x27;#218f8dff&#x27;, &#x27;#218f8dff&#x27;, &#x27;#21908dff&#x27;, &#x27;#21908dff&#x27;, &#x27;#21918cff&#x27;, &#x27;#20918cff&#x27;, &#x27;#20928cff&#x27;, &#x27;#20928cff&#x27;, &#x27;#20928cff&#x27;, &#x27;#20928cff&#x27;, &#x27;#20938cff&#x27;, &#x27;#1f938cff&#x27;, &#x27;#1f948cff&#x27;, &#x27;#1f948cff&#x27;, &#x27;#1f958bff&#x27;, &#x27;#1f958bff&#x27;, &#x27;#1f968bff&#x27;, &#x27;#1f968bff&#x27;, &#x27;#1f978bff&#x27;, &#x27;#1f988bff&#x27;, &#x27;#1f988bff&#x27;, &#x27;#1f998bff&#x27;, &#x27;#1f998aff&#x27;, &#x27;#1f9a8aff&#x27;, &#x27;#1f9a8aff&#x27;, &#x27;#1e9b8aff&#x27;, &#x27;#1e9b8aff&#x27;, &#x27;#1e9c8aff&#x27;, &#x27;#1e9c89ff&#x27;, &#x27;#1e9d89ff&#x27;, &#x27;#1e9d89ff&#x27;, &#x27;#1e9e89ff&#x27;, &#x27;#1f9e89ff&#x27;, &#x27;#1f9f88ff&#x27;, &#x27;#1f9f88ff&#x27;, &#x27;#1fa088ff&#x27;, &#x27;#1fa088ff&#x27;, &#x27;#1fa188ff&#x27;, &#x27;#1fa188ff&#x27;, &#x27;#1fa187ff&#x27;, &#x27;#1fa187ff&#x27;, &#x27;#1fa287ff&#x27;, &#x27;#1fa287ff&#x27;, &#x27;#1fa386ff&#x27;, &#x27;#20a386ff&#x27;, &#x27;#20a486ff&#x27;, &#x27;#20a486ff&#x27;, &#x27;#20a585ff&#x27;, &#x27;#21a585ff&#x27;, &#x27;#21a685ff&#x27;, &#x27;#21a685ff&#x27;, &#x27;#21a785ff&#x27;, &#x27;#22a785ff&#x27;, &#x27;#22a884ff&#x27;, &#x27;#22a884ff&#x27;, &#x27;#22a983ff&#x27;, &#x27;#23a983ff&#x27;, &#x27;#23aa83ff&#x27;, &#x27;#24ab83ff&#x27;, &#x27;#25ab82ff&#x27;, &#x27;#25ac82ff&#x27;, &#x27;#25ac82ff&#x27;, &#x27;#25ad82ff&#x27;, &#x27;#26ad81ff&#x27;, &#x27;#26ad81ff&#x27;, &#x27;#27ad81ff&#x27;, &#x27;#27ae81ff&#x27;, &#x27;#28ae80ff&#x27;, &#x27;#28af80ff&#x27;, &#x27;#29af7fff&#x27;, &#x27;#29b07fff&#x27;, &#x27;#2ab07fff&#x27;, &#x27;#2bb17eff&#x27;, &#x27;#2cb17eff&#x27;, &#x27;#2cb27dff&#x27;, &#x27;#2db27dff&#x27;, &#x27;#2db37cff&#x27;, &#x27;#2eb37cff&#x27;, &#x27;#2eb47cff&#x27;, &#x27;#2fb47cff&#x27;, &#x27;#30b57bff&#x27;, &#x27;#31b57bff&#x27;, &#x27;#31b67aff&#x27;, &#x27;#32b67aff&#x27;, &#x27;#33b679ff&#x27;, &#x27;#34b679ff&#x27;, &#x27;#34b779ff&#x27;, &#x27;#35b779ff&#x27;, &#x27;#36b878ff&#x27;, &#x27;#37b878ff&#x27;, &#x27;#37b977ff&#x27;, &#x27;#38b977ff&#x27;, &#x27;#39ba76ff&#x27;, &#x27;#3aba76ff&#x27;, &#x27;#3abb75ff&#x27;, &#x27;#3bbb75ff&#x27;, &#x27;#3cbc74ff&#x27;, &#x27;#3dbc74ff&#x27;, &#x27;#3ebc73ff&#x27;, &#x27;#3fbd73ff&#x27;, &#x27;#40bd72ff&#x27;, &#x27;#40be72ff&#x27;, &#x27;#41be71ff&#x27;, &#x27;#42bf71ff&#x27;, &#x27;#43bf70ff&#x27;, &#x27;#45c070ff&#x27;, &#x27;#46c06fff&#x27;, &#x27;#47c16fff&#x27;, &#x27;#48c16eff&#x27;, &#x27;#49c16eff&#x27;, &#x27;#4ac16dff&#x27;, &#x27;#4bc26cff&#x27;, &#x27;#4cc26cff&#x27;, &#x27;#4dc36bff&#x27;, &#x27;#4ec36bff&#x27;, &#x27;#4fc46aff&#x27;, &#x27;#50c46aff&#x27;, &#x27;#51c569ff&#x27;, &#x27;#52c569ff&#x27;, &#x27;#53c568ff&#x27;, &#x27;#54c568ff&#x27;, &#x27;#55c667ff&#x27;, &#x27;#56c667ff&#x27;, &#x27;#57c766ff&#x27;, &#x27;#58c765ff&#x27;, &#x27;#59c864ff&#x27;, &#x27;#5ac864ff&#x27;, &#x27;#5bc863ff&#x27;, &#x27;#5cc863ff&#x27;, &#x27;#5dc962ff&#x27;, &#x27;#5ec962ff&#x27;, &#x27;#5fca61ff&#x27;, &#x27;#60ca60ff&#x27;, &#x27;#62cb5fff&#x27;, &#x27;#63cb5fff&#x27;, &#x27;#64cb5eff&#x27;, &#x27;#65cc5dff&#x27;, &#x27;#66cc5cff&#x27;, &#x27;#67cd5cff&#x27;, &#x27;#68cd5bff&#x27;, &#x27;#6acd5bff&#x27;, &#x27;#6bcd5aff&#x27;, &#x27;#6cce59ff&#x27;, &#x27;#6ece58ff&#x27;, &#x27;#6fcf58ff&#x27;, &#x27;#70cf57ff&#x27;, &#x27;#71d057ff&#x27;, &#x27;#72d056ff&#x27;, &#x27;#74d055ff&#x27;, &#x27;#75d054ff&#x27;, &#x27;#76d153ff&#x27;, &#x27;#77d153ff&#x27;, &#x27;#78d152ff&#x27;, &#x27;#7ad151ff&#x27;, &#x27;#7bd250ff&#x27;, &#x27;#7cd250ff&#x27;, &#x27;#7dd34fff&#x27;, &#x27;#7fd34eff&#x27;, &#x27;#80d34dff&#x27;, &#x27;#81d34dff&#x27;, &#x27;#82d44cff&#x27;, &#x27;#84d44bff&#x27;, &#x27;#85d54aff&#x27;, &#x27;#86d549ff&#x27;, &#x27;#88d548ff&#x27;, &#x27;#89d548ff&#x27;, &#x27;#8ad647ff&#x27;, &#x27;#8bd646ff&#x27;, &#x27;#8dd645ff&#x27;, &#x27;#8ed645ff&#x27;, &#x27;#8fd744ff&#x27;, &#x27;#90d743ff&#x27;, &#x27;#92d742ff&#x27;, &#x27;#93d741ff&#x27;, &#x27;#94d840ff&#x27;, &#x27;#96d83fff&#x27;, &#x27;#97d83eff&#x27;, &#x27;#99d93dff&#x27;, &#x27;#9ad93cff&#x27;, &#x27;#9bd93cff&#x27;, &#x27;#9dd93bff&#x27;, &#x27;#9eda3aff&#x27;, &#x27;#9fda39ff&#x27;, &#x27;#a1da38ff&#x27;, &#x27;#a2da37ff&#x27;, &#x27;#a3db36ff&#x27;, &#x27;#a4db36ff&#x27;, &#x27;#a6db35ff&#x27;, &#x27;#a8db34ff&#x27;, &#x27;#a9dc33ff&#x27;, &#x27;#aadc32ff&#x27;, &#x27;#abdc31ff&#x27;, &#x27;#addc30ff&#x27;, &#x27;#aedd2fff&#x27;, &#x27;#b0dd2fff&#x27;, &#x27;#b1dd2eff&#x27;, &#x27;#b2dd2dff&#x27;, &#x27;#b3de2cff&#x27;, &#x27;#b5de2bff&#x27;, &#x27;#b6de2aff&#x27;, &#x27;#b8de29ff&#x27;, &#x27;#b9de28ff&#x27;, &#x27;#bade28ff&#x27;, &#x27;#bcdf27ff&#x27;, &#x27;#bddf26ff&#x27;, &#x27;#bfdf25ff&#x27;, &#x27;#c0df25ff&#x27;, &#x27;#c1df24ff&#x27;, &#x27;#c2df23ff&#x27;, &#x27;#c4e022ff&#x27;, &#x27;#c5e021ff&#x27;, &#x27;#c7e020ff&#x27;, &#x27;#c8e020ff&#x27;, &#x27;#c9e11fff&#x27;, &#x27;#cbe11eff&#x27;, &#x27;#cce11dff&#x27;, &#x27;#cee11dff&#x27;, &#x27;#cfe11cff&#x27;, &#x27;#d1e11bff&#x27;, &#x27;#d2e21bff&#x27;, &#x27;#d3e21aff&#x27;, &#x27;#d4e21aff&#x27;, &#x27;#d6e219ff&#x27;, &#x27;#d7e219ff&#x27;, &#x27;#d9e319ff&#x27;, &#x27;#dae319ff&#x27;, &#x27;#dbe318ff&#x27;, &#x27;#dde318ff&#x27;, &#x27;#dee318ff&#x27;, &#x27;#dfe318ff&#x27;, &#x27;#e0e418ff&#x27;, &#x27;#e2e418ff&#x27;, &#x27;#e3e418ff&#x27;, &#x27;#e5e418ff&#x27;, &#x27;#e6e419ff&#x27;, &#x27;#e7e419ff&#x27;, &#x27;#e8e519ff&#x27;, &#x27;#eae519ff&#x27;, &#x27;#ebe51aff&#x27;, &#x27;#ece51aff&#x27;, &#x27;#ede51bff&#x27;, &#x27;#efe51bff&#x27;, &#x27;#f0e51cff&#x27;, &#x27;#f1e51dff&#x27;, &#x27;#f3e61dff&#x27;, &#x27;#f4e61eff&#x27;, &#x27;#f5e61eff&#x27;, &#x27;#f6e61fff&#x27;, &#x27;#f7e620ff&#x27;, &#x27;#f8e621ff&#x27;, &#x27;#fae722ff&#x27;, &#x27;#fbe723ff&#x27;, &#x27;#fce724ff&#x27;, &#x27;#fde725ff&#x27;]);\n","    \n","\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.x = d3.scale.linear()\n","              .domain([0.598314606741573, 0.8151408450704225])\n","              .range([0, 450 - 50]);\n","\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.legend = L.control({position: &#x27;topright&#x27;});\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.legend.onAdd = function (map) {var div = L.DomUtil.create(&#x27;div&#x27;, &#x27;legend&#x27;); return div};\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.legend.addTo(map_6d0cf0479273fc35bab13df0227b1d78);\n","\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.xAxis = d3.svg.axis()\n","        .scale(color_map_d67679ca625978f2adb1cd55cf6c0afb.x)\n","        .orient(&quot;top&quot;)\n","        .tickSize(1)\n","        .tickValues([0.598314606741573, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.6204223800613773, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.6425301533811815, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.6646379267009858, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.68674570002079, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.7088534733405943, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.7309612466603985, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.7530690199802028, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.7751767933000071, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, 0.7972845666198114, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]);\n","\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.svg = d3.select(&quot;.legend.leaflet-control&quot;).append(&quot;svg&quot;)\n","        .attr(&quot;id&quot;, &#x27;legend&#x27;)\n","        .attr(&quot;width&quot;, 450)\n","        .attr(&quot;height&quot;, 40);\n","\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.g = color_map_d67679ca625978f2adb1cd55cf6c0afb.svg.append(&quot;g&quot;)\n","        .attr(&quot;class&quot;, &quot;key&quot;)\n","        .attr(&quot;transform&quot;, &quot;translate(25,16)&quot;);\n","\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.g.selectAll(&quot;rect&quot;)\n","        .data(color_map_d67679ca625978f2adb1cd55cf6c0afb.color.range().map(function(d, i) {\n","          return {\n","            x0: i ? color_map_d67679ca625978f2adb1cd55cf6c0afb.x(color_map_d67679ca625978f2adb1cd55cf6c0afb.color.domain()[i - 1]) : color_map_d67679ca625978f2adb1cd55cf6c0afb.x.range()[0],\n","            x1: i &lt; color_map_d67679ca625978f2adb1cd55cf6c0afb.color.domain().length ? color_map_d67679ca625978f2adb1cd55cf6c0afb.x(color_map_d67679ca625978f2adb1cd55cf6c0afb.color.domain()[i]) : color_map_d67679ca625978f2adb1cd55cf6c0afb.x.range()[1],\n","            z: d\n","          };\n","        }))\n","      .enter().append(&quot;rect&quot;)\n","        .attr(&quot;height&quot;, 40 - 30)\n","        .attr(&quot;x&quot;, function(d) { return d.x0; })\n","        .attr(&quot;width&quot;, function(d) { return d.x1 - d.x0; })\n","        .style(&quot;fill&quot;, function(d) { return d.z; });\n","\n","    color_map_d67679ca625978f2adb1cd55cf6c0afb.g.call(color_map_d67679ca625978f2adb1cd55cf6c0afb.xAxis).append(&quot;text&quot;)\n","        .attr(&quot;class&quot;, &quot;caption&quot;)\n","        .attr(&quot;y&quot;, 21)\n","        .text(&quot;Biden_proportion&quot;);\n","&lt;/script&gt;\n","&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"]},"metadata":{},"execution_count":23}],"source":["precincts_for_one_census_block.explore('Biden_proportion')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"elapsed":514,"status":"ok","timestamp":1711077984416,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"7RpVNbvip_qy","outputId":"a3ede9ed-25eb-454e-ea33-2dc2bf05f962"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/geopandas/plotting.py:658: UserWarning: Only specify one of 'column' or 'color'. Using 'color'.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/geopandas/plotting.py:658: UserWarning: Only specify one of 'column' or 'color'. Using 'color'.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":24},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Show the approximation error\n","base = census_tracts.loc[[CENSUS_BLOCK_INDEX]].plot('STATEFP', color='red' , alpha=0.5)\n","precincts_for_one_census_block.plot('STATEFP', color='yellow', ax=base, alpha = 0.5)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1711077984416,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"sqyhXroFqAAI","outputId":"80cd7b2c-4658-4ae0-d5e4-164e0a3d744c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<POLYGON ((-74.987 44.669, -74.987 44.669, -74.987 44.669, -74.987 44.67, -7...>"],"image/svg+xml":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100.0\" height=\"100.0\" viewBox=\"-75.05212503999999 44.632545959999995 0.1620280799999989 0.09577307999999363\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,89.36086499999999)\"><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.98691199999998,44.668592999999994 L -74.986869,44.668632 L -74.98686599999999,44.66899900000001 L -74.986857,44.66970799999997 L -74.986853,44.66983199999998 L -74.986858,44.67055799999998 L -74.986858,44.67103199999999 L -74.986858,44.671161000000005 L -74.986858,44.67238999999999 L -74.98686099999999,44.67290500000001 L -74.98686099999999,44.67297200000001 L -74.986859,44.67353099999998 L -74.986862,44.674252999999986 L -74.986862,44.674359 L -74.986865,44.675222 L -74.986868,44.675408 L -74.98687,44.67555699999998 L -74.986875,44.676081999999994 L -74.98688299999999,44.67686599999999 L -74.98689099999999,44.67795399999999 L -74.98689399999999,44.678079999999994 L -74.98690599999999,44.678869999999996 L -74.986907,44.679186 L -74.98691899999999,44.679887 L -74.986932,44.680616999999984 L -74.986935,44.68078299999998 L -74.98697599999998,44.683647000000015 L -74.986997,44.684802 L -74.99094899999999,44.68296499999998 L -74.994377,44.681317999999976 L -74.99505699999999,44.68099199999999 L -74.995519,44.68077799999998 L -74.99618399999999,44.68044999999999 L -74.99624399999999,44.68042 L -74.99673,44.68019199999999 L -74.99960399999998,44.678772 L -74.999918,44.67858399999999 L -75.006412,44.67540400000001 L -75.00959399999998,44.67678099999998 L -75.00998799999999,44.676951 L -75.010949,44.67736199999999 L -75.01119399999999,44.677467 L -75.01839199999999,44.680448000000005 L -75.019184,44.680762 L -75.01998299999998,44.681100999999984 L -75.020792,44.68142199999999 L -75.02248399999998,44.68212499999999 L -75.02581699999999,44.68350199999999 L -75.03063,44.685531999999974 L -75.03252799999999,44.686347000000005 L -75.03309199999998,44.686588999999984 L -75.035791,44.68772599999998 L -75.038291,44.688840000000006 L -75.04328299999999,44.690935999999994 L -75.04542899999998,44.691841999999994 L -75.04612399999999,44.69213099999999 L -75.044929,44.69343299999999 L -75.04282099999999,44.695826 L -75.041935,44.696805 L -75.040917,44.697946999999985 L -75.040759,44.69808700000001 L -75.040522,44.69825399999998 L -75.04033299999998,44.698361999999996 L -75.03916299999999,44.69893799999999 L -75.03777,44.699598 L -75.037671,44.699636999999974 L -75.037425,44.699693999999994 L -75.03719699999998,44.699718 L -75.035634,44.69963899999998 L -75.03286299999999,44.69952499999999 L -75.032377,44.69951399999999 L -75.03201299999998,44.69951799999999 L -75.031536,44.69953899999999 L -75.03114099999999,44.69957499999999 L -75.03096599999998,44.699605 L -75.03059499999999,44.69971999999999 L -75.02970499999999,44.700124 L -75.026229,44.701767 L -75.02336899999999,44.70315199999999 L -75.02264199999999,44.70351299999999 L -75.02007499999998,44.70472099999998 L -75.01836099999998,44.705529 L -75.017596,44.705878 L -75.014026,44.70757399999999 L -75.01257299999999,44.708255999999984 L -75.011134,44.708949000000004 L -75.009788,44.70957999999999 L -75.009646,44.709620999999984 L -75.009497,44.709637 L -75.00926899999999,44.71052699999998 L -75.00494599999999,44.710853 L -75.005043,44.710696999999996 L -75.00511999999999,44.71059700000001 L -75.00531699999998,44.71038099999999 L -75.00553599999999,44.710223999999975 L -75.00570899999998,44.710149999999985 L -75.005833,44.710080999999995 L -75.005952,44.709976999999995 L -75.00626199999998,44.709675000000004 L -75.006354,44.709572 L -75.006435,44.709459999999986 L -75.006531,44.70928699999999 L -75.00654699999998,44.709044999999975 L -75.00658299999998,44.708980999999994 L -75.00683299999999,44.708731 L -75.00712399999999,44.70849099999998 L -75.007178,44.708414 L -75.007178,44.708355999999974 L -75.007155,44.70831399999998 L -75.00709699999999,44.708294999999985 L -75.007009,44.708294999999985 L -75.00699299999998,44.708279 L -75.00699699999998,44.708245 L -75.00707799999998,44.708175 L -75.00735499999999,44.70797199999999 L -75.00755099999998,44.707786999999996 L -75.007632,44.707641 L -75.00762699999999,44.70756999999999 L -75.00758799999998,44.70749699999999 L -75.007499,44.707443 L -75.00740699999999,44.70743899999998 L -75.00728799999999,44.707480999999994 L -75.007099,44.70767399999999 L -75.00688,44.70787699999999 L -75.00670299999999,44.70798099999999 L -75.006225,44.70821199999999 L -75.00611099999999,44.70828799999999 L -75.00604299999998,44.708306999999984 L -75.00581,44.70831299999998 L -75.00576199999998,44.708296 L -75.005706,44.708246 L -75.005515,44.70799899999999 L -75.005459,44.707891 L -75.00542899999999,44.70773399999998 L -75.005347,44.707720999999985 L -75.005321,44.707694000000004 L -75.00531599999998,44.70764199999999 L -75.00536,44.707578000000005 L -75.00543299999998,44.70752600000001 L -75.00557599999999,44.70744599999998 L -75.00566599999999,44.70736299999999 L -75.00571599999998,44.70725499999999 L -75.005755,44.70708599999998 L -75.005731,44.70670399999999 L -75.005712,44.706653999999986 L -75.005616,44.70664199999999 L -75.00559699999998,44.70661900000001 L -75.005601,44.70657699999999 L -75.005751,44.70645 L -75.00584699999999,44.70626600000001 L -75.00587499999999,44.706188000000004 L -75.00522,44.70606999999999 L -75.005032,44.70603599999998 L -75.003034,44.705667999999974 L -75.00197699999998,44.70546499999999 L -75.000998,44.705312999999975 L -75.000366,44.707119999999996 L -75.00003699999999,44.707979999999985 L -74.999815,44.70853099999999 L -74.999721,44.70882199999998 L -74.99919899999999,44.711027 L -74.99907499999999,44.71150699999999 L -74.998987,44.711734 L -74.99884099999998,44.711967 L -74.998684,44.71216099999998 L -74.99852299999999,44.71231199999999 L -74.998344,44.712449999999976 L -74.998086,44.712617999999985 L -74.99788199999998,44.712727999999984 L -74.997646,44.712827999999995 L -74.997472,44.712887999999985 L -74.99661499999999,44.713117999999994 L -74.99553499999998,44.71338799999998 L -74.99489999999999,44.71356300000001 L -74.99468999999998,44.713607 L -74.99449799999998,44.71363699999999 L -74.994479,44.71387499999999 L -74.99445199999998,44.714002999999984 L -74.99440899999999,44.71406199999999 L -74.99431599999998,44.71411499999999 L -74.99429599999998,44.71414299999998 L -74.99422299999998,44.714333 L -74.99418999999999,44.714368999999984 L -74.994131,44.714396999999984 L -74.994011,44.71441299999997 L -74.99347399999999,44.714431000000005 L -74.992223,44.71443399999998 L -74.99151499999998,44.71444799999999 L -74.989356,44.714487999999996 L -74.98721499999998,44.71450599999999 L -74.98720299999998,44.712013000000006 L -74.986458,44.71200899999999 L -74.98222299999999,44.712022999999995 L -74.98186599999998,44.712028999999994 L -74.980646,44.71204699999999 L -74.980091,44.71206699999998 L -74.97971999999999,44.71210999999999 L -74.97933499999998,44.71219199999998 L -74.97871699999999,44.712374999999994 L -74.977515,44.712762999999995 L -74.97679499999998,44.713008 L -74.97599199999999,44.713303999999994 L -74.975741,44.713407999999994 L -74.973924,44.714249 L -74.97183,44.715274999999984 L -74.97045899999998,44.71592599999999 L -74.96747199999999,44.717391999999975 L -74.96624999999999,44.717990999999984 L -74.96306,44.71959399999999 L -74.96054099999999,44.72086 L -74.959803,44.72121799999999 L -74.95826599999998,44.722006 L -74.957977,44.72217199999999 L -74.957703,44.722303999999994 L -74.95767099999999,44.72231799999999 L -74.95762399999998,44.72225700000001 L -74.955581,44.720189 L -74.950696,44.71522499999998 L -74.947085,44.711466999999985 L -74.94688999999998,44.711260999999986 L -74.93769399999998,44.70153299999999 L -74.93632799999999,44.700107999999986 L -74.935655,44.699389999999994 L -74.932763,44.69636499999999 L -74.929484,44.692762 L -74.928725,44.69192299999998 L -74.92799799999999,44.691116 L -74.92507199999999,44.687886999999975 L -74.922912,44.68577299999998 L -74.920463,44.683214999999976 L -74.91759899999998,44.68023599999998 L -74.916018,44.678516 L -74.90938799999998,44.67134999999998 L -74.90832499999999,44.67026100000001 L -74.906814,44.668702 L -74.90161499999998,44.66320799999997 L -74.89969399999998,44.66117599999999 L -74.896633,44.657943 L -74.896098,44.657377 L -74.907742,44.651722000000014 L -74.91245299999999,44.649456 L -74.91799599999999,44.64680999999999 L -74.91889599999999,44.64635400000001 L -74.925332,44.64326899999999 L -74.929397,44.64121499999998 L -74.931691,44.64014599999999 L -74.933602,44.63922099999999 L -74.93499299999998,44.638546999999996 L -74.93515699999998,44.638763999999995 L -74.93523599999999,44.638857 L -74.93535099999998,44.638991999999995 L -74.935631,44.639283 L -74.938047,44.641810999999976 L -74.938239,44.642027999999996 L -74.93836099999999,44.642134 L -74.938549,44.64223600000001 L -74.93866799999998,44.642267 L -74.94081399999999,44.642590999999975 L -74.944165,44.643233999999985 L -74.94659799999998,44.64369099999998 L -74.94715399999998,44.643768999999985 L -74.947459,44.643778 L -74.948307,44.643704 L -74.949021,44.643631 L -74.94956999999998,44.643550999999995 L -74.94980799999998,44.643491000000004 L -74.94982599999999,44.64357699999999 L -74.94985599999998,44.643652 L -74.95018,44.64411899999999 L -74.951118,44.645568999999966 L -74.951776,44.64653799999999 L -74.95280799999998,44.64808699999998 L -74.952587,44.64815599999999 L -74.952534,44.648196 L -74.95253199999999,44.64825399999998 L -74.95257099999998,44.648297 L -74.95263899999999,44.648317999999975 L -74.95277399999999,44.64839099999998 L -74.95278499999999,44.64844099999998 L -74.95275,44.648500999999996 L -74.95268299999998,44.64855099999999 L -74.952505,44.648618 L -74.952235,44.648661 L -74.952084,44.64866500000001 L -74.95202799999998,44.64868199999999 L -74.952001,44.64871499999999 L -74.952005,44.648786 L -74.95204599999998,44.64884399999999 L -74.95214,44.648906999999994 L -74.95216699999999,44.64897699999999 L -74.95216299999998,44.64902899999999 L -74.952148,44.649043999999996 L -74.952075,44.649061999999994 L -74.952004,44.64906699999999 L -74.951948,44.649082999999976 L -74.95179799999998,44.64917299999997 L -74.951678,44.64921200000001 L -74.951448,44.649245 L -74.951118,44.64925999999999 L -74.950813,44.649294999999995 L -74.95075899999999,44.649309999999986 L -74.95072499999999,44.64933099999999 L -74.95068999999998,44.64939899999998 L -74.95068599999998,44.649437000000006 L -74.95070299999998,44.649482000000006 L -74.950836,44.64956599999998 L -74.950892,44.64962999999998 L -74.950954,44.64974199999998 L -74.951104,44.649868999999974 L -74.95118099999999,44.64995399999999 L -74.95118099999999,44.649993999999985 L -74.95114199999999,44.65001 L -74.95081599999999,44.649983 L -74.950662,44.64998599999998 L -74.95062499999999,44.650002 L -74.950589,44.65006599999999 L -74.95048,44.650235 L -74.95031199999998,44.65043499999998 L -74.95029099999999,44.65052799999999 L -74.95021399999999,44.65065299999998 L -74.950204,44.65075699999998 L -74.95023099999999,44.65081300000001 L -74.95047,44.650966999999994 L -74.950543,44.65109799999998 L -74.950563,44.651205999999995 L -74.95055099999999,44.65149099999998 L -74.95059299999998,44.65161799999999 L -74.95059599999999,44.65175099999999 L -74.950544,44.651902000000014 L -74.950552,44.65201299999998 L -74.950574,44.65208299999999 L -74.95053899999998,44.65215999999998 L -74.950532,44.65224300000001 L -74.95054099999999,44.652278999999986 L -74.95056499999998,44.652307999999984 L -74.95065799999998,44.652347000000006 L -74.950716,44.65235399999999 L -74.95086099999999,44.652347000000006 L -74.950915,44.652331 L -74.951009,44.65226799999999 L -74.95107099999998,44.652248 L -74.95113099999998,44.652244999999986 L -74.951202,44.65226 L -74.95129399999999,44.65229300000001 L -74.951363,44.652333 L -74.951421,44.65237999999999 L -74.95145699999998,44.652428 L -74.95150599999998,44.652584 L -74.951546,44.652603 L -74.951587,44.652606999999996 L -74.951706,44.65259299999998 L -74.95180599999998,44.65259100000001 L -74.95184499999998,44.652572000000006 L -74.95187399999999,44.652544999999975 L -74.95192,44.652468000000006 L -74.95197199999998,44.65241399999999 L -74.952047,44.65228899999999 L -74.952191,44.65212299999999 L -74.952286,44.65204599999999 L -74.952332,44.65202899999999 L -74.95249199999998,44.652007999999995 L -74.952624,44.652010999999995 L -74.95295999999999,44.652068999999976 L -74.95304399999998,44.65205799999998 L -74.953118,44.65203799999999 L -74.953206,44.65204599999999 L -74.95324699999999,44.65208299999999 L -74.953257,44.652155999999984 L -74.953498,44.65218099999999 L -74.953724,44.652221999999995 L -74.95392499999998,44.652217999999976 L -74.95398699999998,44.65221000000001 L -74.954037,44.652213999999994 L -74.95410599999998,44.65228299999998 L -74.95416399999999,44.652306 L -74.95420599999999,44.652299 L -74.954233,44.652274999999975 L -74.954257,44.652141000000015 L -74.95430699999999,44.65210199999998 L -74.95447399999999,44.65202499999999 L -74.954555,44.65197499999999 L -74.954644,44.65194799999998 L -74.95473299999998,44.651931999999995 L -74.95487199999998,44.651944 L -74.954953,44.651931999999995 L -74.95503399999998,44.651902000000014 L -74.95509899999998,44.651835999999996 L -74.95511099999999,44.65179399999999 L -74.955165,44.65174800000001 L -74.955242,44.651720999999974 L -74.955377,44.65170499999999 L -74.955624,44.651694 L -74.955699,44.65167299999998 L -74.95631499999999,44.652305 L -74.95660699999999,44.65261799999998 L -74.95770999999999,44.653786999999994 L -74.95823999999999,44.65433699999999 L -74.959884,44.65610499999999 L -74.960906,44.657228999999994 L -74.962434,44.65889099999998 L -74.964135,44.660733999999984 L -74.96421999999998,44.660826 L -74.964449,44.66107299999997 L -74.96529799999998,44.66198799999998 L -74.965657,44.662397 L -74.965716,44.66246399999998 L -74.96704399999999,44.66390399999998 L -74.967439,44.664337999999994 L -74.96796299999998,44.66488700000001 L -74.968312,44.66526499999999 L -74.968695,44.665674999999986 L -74.96885699999999,44.66582499999999 L -74.96901699999998,44.665935999999974 L -74.96917499999998,44.666015999999985 L -74.969222,44.66603299999998 L -74.969521,44.66613199999999 L -74.97193299999999,44.66691299999999 L -74.972022,44.666941999999985 L -74.97226799999999,44.66653799999999 L -74.972449,44.66626600000001 L -74.972623,44.666008999999974 L -74.97286999999999,44.66610299999999 L -74.97458799999998,44.66664699999998 L -74.974796,44.666712999999994 L -74.97484399999999,44.666658999999974 L -74.97496799999999,44.666567 L -74.975081,44.66652399999998 L -74.975146,44.66651600000001 L -74.97588999999998,44.66648699999999 L -74.97694899999999,44.66648199999999 L -74.977822,44.66647999999999 L -74.97821399999998,44.66647999999999 L -74.978751,44.66648099999998 L -74.979272,44.66647200000001 L -74.98053999999998,44.66647499999999 L -74.98130099999999,44.66648199999999 L -74.982653,44.66646899999999 L -74.983995,44.66647 L -74.98499099999998,44.666450000000005 L -74.98508799999999,44.666467 L -74.985151,44.666507 L -74.985494,44.66681 L -74.98558499999999,44.66683099999997 L -74.98643099999998,44.667622 L -74.986997,44.66847399999998 L -74.98696199999998,44.668493999999995 L -74.98691199999998,44.668592999999994 z M -74.98700599999998,44.685426 L -74.987008,44.68555800000001 L -74.987025,44.68767199999999 L -74.987027,44.688015 L -74.98789499999998,44.687552000000004 L -74.98812299999999,44.687499 L -74.988247,44.68745199999999 L -74.98866299999999,44.687234999999994 L -74.990107,44.68666599999999 L -74.99141,44.68615499999999 L -74.992643,44.685672000000004 L -74.991993,44.68508599999999 L -74.989851,44.68568699999998 L -74.98983199999999,44.685648999999984 L -74.989451,44.685016 L -74.98937699999999,44.684996000000005 L -74.989274,44.68500999999998 L -74.98860399999998,44.68520699999999 L -74.98835199999999,44.68530699999999 L -74.98804999999999,44.68510800000001 L -74.98780099999998,44.685211999999986 L -74.98777,44.684898 L -74.986997,44.684802 L -74.98700599999998,44.685426 z\" /></g></svg>"},"metadata":{},"execution_count":25}],"source":["# Measure the approximation error in area.\n","approximation = precincts_for_one_census_block.unary_union\n","approximation"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1711077984416,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"qIweBFhVqACp","outputId":"26d6e05f-52e3-4605-a827-809bac6db2c8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<POLYGON ((-74.987 44.669, -74.987 44.669, -74.987 44.669, -74.987 44.67, -7...>"],"image/svg+xml":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100.0\" height=\"100.0\" viewBox=\"-75.05212503999999 44.632545959999995 0.1620280799999989 0.09577307999999363\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,89.36086499999999)\"><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.98691199999998,44.668592999999994 L -74.986869,44.668632 L -74.98686599999999,44.66899900000001 L -74.986857,44.66970799999997 L -74.986853,44.66983199999998 L -74.986858,44.67055799999998 L -74.986858,44.67103199999999 L -74.986858,44.671161000000005 L -74.986858,44.67238999999999 L -74.98686099999999,44.67290500000001 L -74.98686099999999,44.67297200000001 L -74.986859,44.67353099999998 L -74.986862,44.674252999999986 L -74.986862,44.674359 L -74.986865,44.675222 L -74.986868,44.675408 L -74.98687,44.67555699999998 L -74.986875,44.676081999999994 L -74.98688299999999,44.67686599999999 L -74.98689099999999,44.67795399999999 L -74.98689399999999,44.678079999999994 L -74.98690599999999,44.678869999999996 L -74.986907,44.679186 L -74.98691899999999,44.679887 L -74.986932,44.680616999999984 L -74.986935,44.68078299999998 L -74.98697599999998,44.683647000000015 L -74.986997,44.684802 L -74.99094899999999,44.68296499999998 L -74.994377,44.681317999999976 L -74.99505699999999,44.68099199999999 L -74.995519,44.68077799999998 L -74.99618399999999,44.68044999999999 L -74.99624399999999,44.68042 L -74.99673,44.68019199999999 L -74.99960399999998,44.678772 L -74.999918,44.67858399999999 L -75.006412,44.67540400000001 L -75.00959399999998,44.67678099999998 L -75.00998799999999,44.676951 L -75.010949,44.67736199999999 L -75.01119399999999,44.677467 L -75.01839199999999,44.680448000000005 L -75.019184,44.680762 L -75.01998299999998,44.681100999999984 L -75.020792,44.68142199999999 L -75.02248399999998,44.68212499999999 L -75.02581699999999,44.68350199999999 L -75.03063,44.685531999999974 L -75.03252799999999,44.686347000000005 L -75.03309199999998,44.686588999999984 L -75.035791,44.68772599999998 L -75.038291,44.688840000000006 L -75.04328299999999,44.690935999999994 L -75.04542899999998,44.691841999999994 L -75.04612399999999,44.69213099999999 L -75.044929,44.69343299999999 L -75.04282099999999,44.695826 L -75.041935,44.696805 L -75.040917,44.697946999999985 L -75.040759,44.69808700000001 L -75.040522,44.69825399999998 L -75.04033299999998,44.698361999999996 L -75.03916299999999,44.69893799999999 L -75.03777,44.699598 L -75.037671,44.699636999999974 L -75.037425,44.699693999999994 L -75.03719699999998,44.699718 L -75.035634,44.69963899999998 L -75.03286299999999,44.69952499999999 L -75.032377,44.69951399999999 L -75.03201299999998,44.69951799999999 L -75.031536,44.69953899999999 L -75.03114099999999,44.69957499999999 L -75.03096599999998,44.699605 L -75.03059499999999,44.69971999999999 L -75.02970499999999,44.700124 L -75.026229,44.701767 L -75.02336899999999,44.70315199999999 L -75.02264199999999,44.70351299999999 L -75.02007499999998,44.70472099999998 L -75.01836099999998,44.705529 L -75.017596,44.705878 L -75.014026,44.70757399999999 L -75.01257299999999,44.708255999999984 L -75.011134,44.708949000000004 L -75.009788,44.70957999999999 L -75.009646,44.709620999999984 L -75.009497,44.709637 L -75.00926899999999,44.71052699999998 L -75.00494599999999,44.710853 L -75.005043,44.710696999999996 L -75.00511999999999,44.71059700000001 L -75.00531699999998,44.71038099999999 L -75.00553599999999,44.710223999999975 L -75.00570899999998,44.710149999999985 L -75.005833,44.710080999999995 L -75.005952,44.709976999999995 L -75.00626199999998,44.709675000000004 L -75.006354,44.709572 L -75.006435,44.709459999999986 L -75.006531,44.70928699999999 L -75.00654699999998,44.709044999999975 L -75.00658299999998,44.708980999999994 L -75.00683299999999,44.708731 L -75.00712399999999,44.70849099999998 L -75.007178,44.708414 L -75.007178,44.708355999999974 L -75.007155,44.70831399999998 L -75.00709699999999,44.708294999999985 L -75.007009,44.708294999999985 L -75.00699299999998,44.708279 L -75.00699699999998,44.708245 L -75.00707799999998,44.708175 L -75.00735499999999,44.70797199999999 L -75.00755099999998,44.707786999999996 L -75.007632,44.707641 L -75.00762699999999,44.70756999999999 L -75.00758799999998,44.70749699999999 L -75.007499,44.707443 L -75.00740699999999,44.70743899999998 L -75.00728799999999,44.707480999999994 L -75.007099,44.70767399999999 L -75.00688,44.70787699999999 L -75.00670299999999,44.70798099999999 L -75.006225,44.70821199999999 L -75.00611099999999,44.70828799999999 L -75.00604299999998,44.708306999999984 L -75.00581,44.70831299999998 L -75.00576199999998,44.708296 L -75.005706,44.708246 L -75.005515,44.70799899999999 L -75.005459,44.707891 L -75.00542899999999,44.70773399999998 L -75.005347,44.707720999999985 L -75.005321,44.707694000000004 L -75.00531599999998,44.70764199999999 L -75.00536,44.707578000000005 L -75.00543299999998,44.70752600000001 L -75.00557599999999,44.70744599999998 L -75.00566599999999,44.70736299999999 L -75.00571599999998,44.70725499999999 L -75.005755,44.70708599999998 L -75.005731,44.70670399999999 L -75.005712,44.706653999999986 L -75.005616,44.70664199999999 L -75.00559699999998,44.70661900000001 L -75.005601,44.70657699999999 L -75.005751,44.70645 L -75.00584699999999,44.70626600000001 L -75.00587499999999,44.706188000000004 L -75.00522,44.70606999999999 L -75.005032,44.70603599999998 L -75.003034,44.705667999999974 L -75.00197699999998,44.70546499999999 L -75.000998,44.705312999999975 L -75.000366,44.707119999999996 L -75.00003699999999,44.707979999999985 L -74.999815,44.70853099999999 L -74.999721,44.70882199999998 L -74.99919899999999,44.711027 L -74.99907499999999,44.71150699999999 L -74.998987,44.711734 L -74.99884099999998,44.711967 L -74.998684,44.71216099999998 L -74.99852299999999,44.71231199999999 L -74.998344,44.712449999999976 L -74.998086,44.712617999999985 L -74.99788199999998,44.712727999999984 L -74.997646,44.712827999999995 L -74.997472,44.712887999999985 L -74.99661499999999,44.713117999999994 L -74.99553499999998,44.71338799999998 L -74.99489999999999,44.71356300000001 L -74.99468999999998,44.713607 L -74.99449799999998,44.71363699999999 L -74.994479,44.71387499999999 L -74.99445199999998,44.714002999999984 L -74.99440899999999,44.71406199999999 L -74.99431599999998,44.71411499999999 L -74.99429599999998,44.71414299999998 L -74.99422299999998,44.714333 L -74.99418999999999,44.714368999999984 L -74.994131,44.714396999999984 L -74.994011,44.71441299999997 L -74.99347399999999,44.714431000000005 L -74.992223,44.71443399999998 L -74.99151499999998,44.71444799999999 L -74.989356,44.714487999999996 L -74.98721499999998,44.71450599999999 L -74.98720299999998,44.712013000000006 L -74.986458,44.71200899999999 L -74.98222299999999,44.712022999999995 L -74.98186599999998,44.712028999999994 L -74.980646,44.71204699999999 L -74.980091,44.71206699999998 L -74.97971999999999,44.71210999999999 L -74.97933499999998,44.71219199999998 L -74.97871699999999,44.712374999999994 L -74.977515,44.712762999999995 L -74.97679499999998,44.713008 L -74.97599199999999,44.713303999999994 L -74.975741,44.713407999999994 L -74.973924,44.714249 L -74.97183,44.715274999999984 L -74.97045899999998,44.71592599999999 L -74.96747199999999,44.717391999999975 L -74.96624999999999,44.717990999999984 L -74.96306,44.71959399999999 L -74.96054099999999,44.72086 L -74.959803,44.72121799999999 L -74.95826599999998,44.722006 L -74.957977,44.72217199999999 L -74.957703,44.722303999999994 L -74.95767099999999,44.72231799999999 L -74.95762399999998,44.72225700000001 L -74.955581,44.720189 L -74.950696,44.71522499999998 L -74.947085,44.711466999999985 L -74.94688999999998,44.711260999999986 L -74.93769399999998,44.70153299999999 L -74.93632799999999,44.700107999999986 L -74.935655,44.699389999999994 L -74.932763,44.69636499999999 L -74.929484,44.692762 L -74.928725,44.69192299999998 L -74.92799799999999,44.691116 L -74.92507199999999,44.687886999999975 L -74.922912,44.68577299999998 L -74.920463,44.683214999999976 L -74.91759899999998,44.68023599999998 L -74.916018,44.678516 L -74.90938799999998,44.67134999999998 L -74.90832499999999,44.67026100000001 L -74.906814,44.668702 L -74.90161499999998,44.66320799999997 L -74.89969399999998,44.66117599999999 L -74.896633,44.657943 L -74.896098,44.657377 L -74.907742,44.651722000000014 L -74.91245299999999,44.649456 L -74.91799599999999,44.64680999999999 L -74.91889599999999,44.64635400000001 L -74.925332,44.64326899999999 L -74.929397,44.64121499999998 L -74.931691,44.64014599999999 L -74.933602,44.63922099999999 L -74.93499299999998,44.638546999999996 L -74.93515699999998,44.638763999999995 L -74.93523599999999,44.638857 L -74.93535099999998,44.638991999999995 L -74.935631,44.639283 L -74.938047,44.641810999999976 L -74.938239,44.642027999999996 L -74.93836099999999,44.642134 L -74.938549,44.64223600000001 L -74.93866799999998,44.642267 L -74.94081399999999,44.642590999999975 L -74.944165,44.643233999999985 L -74.94659799999998,44.64369099999998 L -74.94715399999998,44.643768999999985 L -74.947459,44.643778 L -74.948307,44.643704 L -74.949021,44.643631 L -74.94956999999998,44.643550999999995 L -74.94980799999998,44.643491000000004 L -74.94982599999999,44.64357699999999 L -74.94985599999998,44.643652 L -74.95018,44.64411899999999 L -74.951118,44.645568999999966 L -74.951776,44.64653799999999 L -74.95280799999998,44.64808699999998 L -74.952587,44.64815599999999 L -74.952534,44.648196 L -74.95253199999999,44.64825399999998 L -74.95257099999998,44.648297 L -74.95263899999999,44.648317999999975 L -74.95277399999999,44.64839099999998 L -74.95278499999999,44.64844099999998 L -74.95275,44.648500999999996 L -74.95268299999998,44.64855099999999 L -74.952505,44.648618 L -74.952235,44.648661 L -74.952084,44.64866500000001 L -74.95202799999998,44.64868199999999 L -74.952001,44.64871499999999 L -74.952005,44.648786 L -74.95204599999998,44.64884399999999 L -74.95214,44.648906999999994 L -74.95216699999999,44.64897699999999 L -74.95216299999998,44.64902899999999 L -74.952148,44.649043999999996 L -74.952075,44.649061999999994 L -74.952004,44.64906699999999 L -74.951948,44.649082999999976 L -74.95179799999998,44.64917299999997 L -74.951678,44.64921200000001 L -74.951448,44.649245 L -74.951118,44.64925999999999 L -74.950813,44.649294999999995 L -74.95075899999999,44.649309999999986 L -74.95072499999999,44.64933099999999 L -74.95068999999998,44.64939899999998 L -74.95068599999998,44.649437000000006 L -74.95070299999998,44.649482000000006 L -74.950836,44.64956599999998 L -74.950892,44.64962999999998 L -74.950954,44.64974199999998 L -74.951104,44.649868999999974 L -74.95118099999999,44.64995399999999 L -74.95118099999999,44.649993999999985 L -74.95114199999999,44.65001 L -74.95081599999999,44.649983 L -74.950662,44.64998599999998 L -74.95062499999999,44.650002 L -74.950589,44.65006599999999 L -74.95048,44.650235 L -74.95031199999998,44.65043499999998 L -74.95029099999999,44.65052799999999 L -74.95021399999999,44.65065299999998 L -74.950204,44.65075699999998 L -74.95023099999999,44.65081300000001 L -74.95047,44.650966999999994 L -74.950543,44.65109799999998 L -74.950563,44.651205999999995 L -74.95055099999999,44.65149099999998 L -74.95059299999998,44.65161799999999 L -74.95059599999999,44.65175099999999 L -74.950544,44.651902000000014 L -74.950552,44.65201299999998 L -74.950574,44.65208299999999 L -74.95053899999998,44.65215999999998 L -74.950532,44.65224300000001 L -74.95054099999999,44.652278999999986 L -74.95056499999998,44.652307999999984 L -74.95065799999998,44.652347000000006 L -74.950716,44.65235399999999 L -74.95086099999999,44.652347000000006 L -74.950915,44.652331 L -74.951009,44.65226799999999 L -74.95107099999998,44.652248 L -74.95113099999998,44.652244999999986 L -74.951202,44.65226 L -74.95129399999999,44.65229300000001 L -74.951363,44.652333 L -74.951421,44.65237999999999 L -74.95145699999998,44.652428 L -74.95150599999998,44.652584 L -74.951546,44.652603 L -74.951587,44.652606999999996 L -74.951706,44.65259299999998 L -74.95180599999998,44.65259100000001 L -74.95184499999998,44.652572000000006 L -74.95187399999999,44.652544999999975 L -74.95192,44.652468000000006 L -74.95197199999998,44.65241399999999 L -74.952047,44.65228899999999 L -74.952191,44.65212299999999 L -74.952286,44.65204599999999 L -74.952332,44.65202899999999 L -74.95249199999998,44.652007999999995 L -74.952624,44.652010999999995 L -74.95295999999999,44.652068999999976 L -74.95304399999998,44.65205799999998 L -74.953118,44.65203799999999 L -74.953206,44.65204599999999 L -74.95324699999999,44.65208299999999 L -74.953257,44.652155999999984 L -74.953498,44.65218099999999 L -74.953724,44.652221999999995 L -74.95392499999998,44.652217999999976 L -74.95398699999998,44.65221000000001 L -74.954037,44.652213999999994 L -74.95410599999998,44.65228299999998 L -74.95416399999999,44.652306 L -74.95420599999999,44.652299 L -74.954233,44.652274999999975 L -74.954257,44.652141000000015 L -74.95430699999999,44.65210199999998 L -74.95447399999999,44.65202499999999 L -74.954555,44.65197499999999 L -74.954644,44.65194799999998 L -74.95473299999998,44.651931999999995 L -74.95487199999998,44.651944 L -74.954953,44.651931999999995 L -74.95503399999998,44.651902000000014 L -74.95509899999998,44.651835999999996 L -74.95511099999999,44.65179399999999 L -74.955165,44.65174800000001 L -74.955242,44.651720999999974 L -74.955377,44.65170499999999 L -74.955624,44.651694 L -74.955699,44.65167299999998 L -74.95631499999999,44.652305 L -74.95660699999999,44.65261799999998 L -74.95770999999999,44.653786999999994 L -74.95823999999999,44.65433699999999 L -74.959884,44.65610499999999 L -74.960906,44.657228999999994 L -74.962434,44.65889099999998 L -74.964135,44.660733999999984 L -74.96421999999998,44.660826 L -74.964449,44.66107299999997 L -74.96529799999998,44.66198799999998 L -74.965657,44.662397 L -74.965716,44.66246399999998 L -74.96704399999999,44.66390399999998 L -74.967439,44.664337999999994 L -74.96796299999998,44.66488700000001 L -74.968312,44.66526499999999 L -74.968695,44.665674999999986 L -74.96885699999999,44.66582499999999 L -74.96901699999998,44.665935999999974 L -74.96917499999998,44.666015999999985 L -74.969222,44.66603299999998 L -74.969521,44.66613199999999 L -74.97193299999999,44.66691299999999 L -74.972022,44.666941999999985 L -74.97226799999999,44.66653799999999 L -74.972449,44.66626600000001 L -74.972623,44.666008999999974 L -74.97286999999999,44.66610299999999 L -74.97458799999998,44.66664699999998 L -74.974796,44.666712999999994 L -74.97484399999999,44.666658999999974 L -74.97496799999999,44.666567 L -74.975081,44.66652399999998 L -74.975146,44.66651600000001 L -74.97588999999998,44.66648699999999 L -74.97694899999999,44.66648199999999 L -74.977822,44.66647999999999 L -74.97821399999998,44.66647999999999 L -74.978751,44.66648099999998 L -74.979272,44.66647200000001 L -74.98053999999998,44.66647499999999 L -74.98130099999999,44.66648199999999 L -74.982653,44.66646899999999 L -74.983995,44.66647 L -74.98499099999998,44.666450000000005 L -74.98508799999999,44.666467 L -74.985151,44.666507 L -74.985494,44.66681 L -74.98558499999999,44.66683099999997 L -74.98643099999998,44.667622 L -74.986997,44.66847399999998 L -74.98696199999998,44.668493999999995 L -74.98691199999998,44.668592999999994 z M -74.98700599999998,44.685426 L -74.987008,44.68555800000001 L -74.987025,44.68767199999999 L -74.987027,44.688015 L -74.98789499999998,44.687552000000004 L -74.98812299999999,44.687499 L -74.988247,44.68745199999999 L -74.98866299999999,44.687234999999994 L -74.990107,44.68666599999999 L -74.99141,44.68615499999999 L -74.992643,44.685672000000004 L -74.991993,44.68508599999999 L -74.989851,44.68568699999998 L -74.98983199999999,44.685648999999984 L -74.989451,44.685016 L -74.98937699999999,44.684996000000005 L -74.989274,44.68500999999998 L -74.98860399999998,44.68520699999999 L -74.98835199999999,44.68530699999999 L -74.98804999999999,44.68510800000001 L -74.98780099999998,44.685211999999986 L -74.98777,44.684898 L -74.986997,44.684802 L -74.98700599999998,44.685426 z\" /></g></svg>"},"metadata":{},"execution_count":26}],"source":["approximation_one_block = geopandas.GeoSeries([approximation], crs=4269)\n","approximation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o_M--zozqAE-"},"outputs":[],"source":["census_block = census_tracts.loc[[CENSUS_BLOCK_INDEX], 'geometry'].reset_index()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jxkw8-J0ruIL"},"outputs":[],"source":["error = approximation_one_block.symmetric_difference(census_block) #선거구 근사치와 실제 인구조사 블록 간의 차이를 계산하는 작업"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"elapsed":39,"status":"ok","timestamp":1711077984416,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"7yWF4TlIruKu","outputId":"2c1ae9ea-a77d-4011-a8e6-a6a9a65e1885"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<MULTIPOLYGON (((-74.987 44.669, -74.987 44.669, -74.987 44.668, -74.987 44....>"],"image/svg+xml":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100.0\" height=\"100.0\" viewBox=\"-75.05212503999999 44.632545959999995 0.1620280799999989 0.09577308000000784\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,89.36086499999999)\"><g><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.98688027439233,44.66862177438834 L -74.98691199999999,44.668593 L -74.98696199999999,44.668493999999995 L -74.986997,44.668473999999996 L -74.98707999999999,44.668425 L -74.987476,44.668203 L -74.98757599999999,44.668147999999995 L -74.987657,44.668104 L -74.987983,44.667964 L -74.988415,44.667817 L -74.98918499999999,44.667593 L -74.98959099999999,44.667479 L -74.990455,44.669041 L -74.991378,44.669484999999995 L -74.991468,44.669528 L -74.991644,44.669593 L -74.991918,44.669723 L -74.992707,44.670099 L -74.995025,44.679016 L -74.99618399999999,44.68044999999999 L -74.995519,44.68077799999998 L -74.99505699999999,44.68099199999999 L -74.994377,44.681317999999976 L -74.99094899999999,44.68296499999998 L -74.986997,44.684802 L -74.98697599999998,44.683647000000015 L -74.986935,44.68078299999998 L -74.986932,44.680616999999984 L -74.98691899999999,44.679887 L -74.986907,44.679186 L -74.98690599999999,44.678869999999996 L -74.98689399999999,44.678079999999994 L -74.98689099999999,44.67795399999999 L -74.98688299999999,44.67686599999999 L -74.986875,44.676081999999994 L -74.98687,44.67555699999998 L -74.986868,44.675408 L -74.986865,44.675222 L -74.986862,44.674359 L -74.986862,44.674252999999986 L -74.986859,44.67353099999998 L -74.98686099999999,44.67297200000001 L -74.98686099999999,44.672972 L -74.984625,44.67297 L -74.984535,44.672964 L -74.984419,44.672956 L -74.983499,44.672948 L -74.98297699999999,44.672957 L -74.982235,44.672948 L -74.981403,44.67295 L -74.981399,44.67236 L -74.980448,44.67239 L -74.97886,44.672419 L -74.978363,44.672402 L -74.97825999999999,44.672381 L -74.977149,44.673186 L -74.976874,44.672979999999995 L -74.975748,44.672194999999995 L -74.97547899999999,44.672000999999995 L -74.975441,44.671929 L -74.975433,44.671444 L -74.97428,44.671451999999995 L -74.973809,44.671443 L -74.973745,44.67142 L -74.973697,44.671366 L -74.973685,44.671296 L -74.973671,44.669886999999996 L -74.973563,44.669888 L -74.971817,44.669897999999996 L -74.969871,44.669906 L -74.969264,44.669909999999994 L -74.9683,44.669916 L -74.96700299999999,44.669923999999995 L -74.966172,44.669928 L -74.963827,44.669936 L -74.96229799999999,44.669942 L -74.957932,44.669948 L -74.957019,44.669948 L -74.95695599999999,44.669948 L -74.956717,44.669948 L -74.956504,44.669948 L -74.955896,44.669948 L -74.95573499999999,44.669948999999995 L -74.953141,44.669951999999995 L -74.951786,44.669954999999995 L -74.949111,44.669976 L -74.948943,44.669976999999996 L -74.94750599999999,44.669990999999996 L -74.946953,44.669996 L -74.939523,44.670063 L -74.936967,44.670094999999996 L -74.934555,44.670113 L -74.9338,44.67011 L -74.932559,44.670122 L -74.929507,44.670141 L -74.928607,44.670154 L -74.927283,44.670156 L -74.92508099999999,44.670172 L -74.924906,44.670173 L -74.924258,44.670178 L -74.92386499999999,44.670175 L -74.92280199999999,44.670178 L -74.921988,44.670192 L -74.919898,44.670196999999995 L -74.91693099999999,44.670213 L -74.91543399999999,44.670231 L -74.91446599999999,44.670232 L -74.91169099999999,44.670259 L -74.90832499999999,44.670260999999996 L -74.90938799999999,44.67135 L -74.916018,44.678515999999995 L -74.91688469749514,44.67945889670565 L -74.916018,44.678516 L -74.90938799999998,44.67134999999998 L -74.90832499999999,44.67026100000001 L -74.906814,44.668702 L -74.90161499999998,44.66320799999997 L -74.89969399999998,44.66117599999999 L -74.896633,44.657943 L -74.896098,44.657377 L -74.907742,44.651722000000014 L -74.91245299999999,44.649456 L -74.91799599999999,44.64680999999999 L -74.91889599999999,44.64635400000001 L -74.925332,44.64326899999999 L -74.929397,44.64121499999998 L -74.931691,44.64014599999999 L -74.933602,44.63922099999999 L -74.93499299999998,44.638546999999996 L -74.93515699999998,44.638763999999995 L -74.93523599999999,44.638857 L -74.93535099999998,44.638991999999995 L -74.935631,44.639283 L -74.938047,44.641810999999976 L -74.938239,44.642027999999996 L -74.93836099999999,44.642134 L -74.938549,44.64223600000001 L -74.93866799999998,44.642267 L -74.94081399999999,44.642590999999975 L -74.944165,44.643233999999985 L -74.94659799999998,44.64369099999998 L -74.94715399999998,44.643768999999985 L -74.947459,44.643778 L -74.948307,44.643704 L -74.949021,44.643631 L -74.94956999999998,44.643550999999995 L -74.94980799999998,44.643491000000004 L -74.94982599999999,44.64357699999999 L -74.94985599999998,44.643652 L -74.95018,44.64411899999999 L -74.951118,44.645568999999966 L -74.951776,44.64653799999999 L -74.95280799999998,44.64808699999998 L -74.952587,44.64815599999999 L -74.952534,44.648196 L -74.95253199999999,44.64825399999998 L -74.95257099999998,44.648297 L -74.95263899999999,44.648317999999975 L -74.95277399999999,44.64839099999998 L -74.95278499999999,44.64844099999998 L -74.95275,44.648500999999996 L -74.95268299999998,44.64855099999999 L -74.952505,44.648618 L -74.952235,44.648661 L -74.952084,44.64866500000001 L -74.95202799999998,44.64868199999999 L -74.952001,44.64871499999999 L -74.952005,44.648786 L -74.95204599999998,44.64884399999999 L -74.95214,44.648906999999994 L -74.95216699999999,44.64897699999999 L -74.95216299999998,44.64902899999999 L -74.952148,44.649043999999996 L -74.952075,44.649061999999994 L -74.952004,44.64906699999999 L -74.951948,44.649082999999976 L -74.95179799999998,44.64917299999997 L -74.951678,44.64921200000001 L -74.951448,44.649245 L -74.951118,44.64925999999999 L -74.950813,44.649294999999995 L -74.95075899999999,44.649309999999986 L -74.95072499999999,44.64933099999999 L -74.95068999999998,44.64939899999998 L -74.95068599999998,44.649437000000006 L -74.95070299999998,44.649482000000006 L -74.950836,44.64956599999998 L -74.950892,44.64962999999998 L -74.950954,44.64974199999998 L -74.951104,44.649868999999974 L -74.95118099999999,44.64995399999999 L -74.95118099999999,44.649993999999985 L -74.95114199999999,44.65001 L -74.95081599999999,44.649983 L -74.950662,44.64998599999998 L -74.95062499999999,44.650002 L -74.950589,44.65006599999999 L -74.95048,44.650235 L -74.95031199999998,44.65043499999998 L -74.95029099999999,44.65052799999999 L -74.95021399999999,44.65065299999998 L -74.950204,44.65075699999998 L -74.95023099999999,44.65081300000001 L -74.95047,44.650966999999994 L -74.950543,44.65109799999998 L -74.950563,44.651205999999995 L -74.95055099999999,44.65149099999998 L -74.95059299999998,44.65161799999999 L -74.95059599999999,44.65175099999999 L -74.950544,44.651902000000014 L -74.950552,44.65201299999998 L -74.950574,44.65208299999999 L -74.95053899999998,44.65215999999998 L -74.950532,44.65224300000001 L -74.95054099999999,44.652278999999986 L -74.95056499999998,44.652307999999984 L -74.95065799999998,44.652347000000006 L -74.950716,44.65235399999999 L -74.95086099999999,44.652347000000006 L -74.950915,44.652331 L -74.951009,44.65226799999999 L -74.95107099999998,44.652248 L -74.95113099999998,44.652244999999986 L -74.951202,44.65226 L -74.95129399999999,44.65229300000001 L -74.951363,44.652333 L -74.951421,44.65237999999999 L -74.95145699999998,44.652428 L -74.95150599999998,44.652584 L -74.951546,44.652603 L -74.951587,44.652606999999996 L -74.951706,44.65259299999998 L -74.95180599999998,44.65259100000001 L -74.95184499999998,44.652572000000006 L -74.95187399999999,44.652544999999975 L -74.95192,44.652468000000006 L -74.95197199999998,44.65241399999999 L -74.952047,44.65228899999999 L -74.952191,44.65212299999999 L -74.952286,44.65204599999999 L -74.952332,44.65202899999999 L -74.95249199999998,44.652007999999995 L -74.952624,44.652010999999995 L -74.95295999999999,44.652068999999976 L -74.95304399999998,44.65205799999998 L -74.953118,44.65203799999999 L -74.953206,44.65204599999999 L -74.95324699999999,44.65208299999999 L -74.953257,44.652155999999984 L -74.953498,44.65218099999999 L -74.953724,44.652221999999995 L -74.95392499999998,44.652217999999976 L -74.95398699999998,44.65221000000001 L -74.954037,44.652213999999994 L -74.95410599999998,44.65228299999998 L -74.95416399999999,44.652306 L -74.95420599999999,44.652299 L -74.954233,44.652274999999975 L -74.954257,44.652141000000015 L -74.95430699999999,44.65210199999998 L -74.95447399999999,44.65202499999999 L -74.954555,44.65197499999999 L -74.954644,44.65194799999998 L -74.95473299999998,44.651931999999995 L -74.95487199999998,44.651944 L -74.954953,44.651931999999995 L -74.95503399999998,44.651902000000014 L -74.95509899999998,44.651835999999996 L -74.95511099999999,44.65179399999999 L -74.955165,44.65174800000001 L -74.955242,44.651720999999974 L -74.955377,44.65170499999999 L -74.955624,44.651694 L -74.955699,44.65167299999998 L -74.95631499999999,44.652305 L -74.95660699999999,44.65261799999998 L -74.95770999999999,44.653786999999994 L -74.95823999999999,44.65433699999999 L -74.959884,44.65610499999999 L -74.960906,44.657228999999994 L -74.962434,44.65889099999998 L -74.964135,44.660733999999984 L -74.96421999999998,44.660826 L -74.964449,44.66107299999997 L -74.96529799999998,44.66198799999998 L -74.965657,44.662397 L -74.965716,44.66246399999998 L -74.96704399999999,44.66390399999998 L -74.967439,44.664337999999994 L -74.96796299999998,44.66488700000001 L -74.968312,44.66526499999999 L -74.968695,44.665674999999986 L -74.96885699999999,44.66582499999999 L -74.96901699999998,44.665935999999974 L -74.96917499999998,44.666015999999985 L -74.969222,44.66603299999998 L -74.969521,44.66613199999999 L -74.97193299999999,44.66691299999999 L -74.972022,44.666941999999985 L -74.97226799999999,44.66653799999999 L -74.972449,44.66626600000001 L -74.972623,44.666008999999974 L -74.97286999999999,44.66610299999999 L -74.97458799999998,44.66664699999998 L -74.974796,44.666712999999994 L -74.97484399999999,44.666658999999974 L -74.97496799999999,44.666567 L -74.975081,44.66652399999998 L -74.975146,44.66651600000001 L -74.97588999999998,44.66648699999999 L -74.97694899999999,44.66648199999999 L -74.977822,44.66647999999999 L -74.97821399999998,44.66647999999999 L -74.978751,44.66648099999998 L -74.979272,44.66647200000001 L -74.98053999999998,44.66647499999999 L -74.98130099999999,44.66648199999999 L -74.982653,44.66646899999999 L -74.983995,44.66647 L -74.98499099999998,44.666450000000005 L -74.98508799999999,44.666467 L -74.985151,44.666507 L -74.985494,44.66681 L -74.98558499999999,44.66683099999997 L -74.98643099999998,44.667622 L -74.986997,44.66847399999998 L -74.98696199999998,44.668493999999995 L -74.98691199999998,44.668592999999994 L -74.98688027439233,44.66862177438834 z M -74.986869,44.668631999999995 L -74.98686599999999,44.668999 L -74.9868642000035,44.66914079972431 L -74.98686599999999,44.66899900000001 L -74.986869,44.668632 L -74.98688027439233,44.66862177438834 L -74.986869,44.668631999999995 z M -74.986857,44.66970799999997 L -74.986853,44.66983199999998 L -74.986853,44.66983199999999 L -74.986857,44.669708 L -74.9868642000035,44.66914079972431 L -74.986857,44.66970799999997 z M -74.986853,44.669832 L -74.986858,44.670558 L -74.986858,44.67055799999998 L -74.986853,44.66983199999999 L -74.986853,44.669832 z M -74.986858,44.67238999999999 L -74.986858,44.67239 L -74.98685950000363,44.67264750062452 L -74.986858,44.67238999999999 z M -74.98686099999999,44.67290500000001 L -74.98686099999999,44.672905 L -74.98685950000363,44.67264750062452 L -74.98686099999999,44.67290500000001 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.99624399999999,44.68042 L -74.996184,44.68045 L -74.99618399999999,44.68044999999999 L -74.99624399999999,44.68042 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.99673,44.68019199999999 L -74.99960399999998,44.678772 L -74.999918,44.67858399999999 L -75.006412,44.67540400000001 L -75.00959399999998,44.67678099999998 L -75.00998799999999,44.676951 L -75.010949,44.67736199999999 L -75.01119399999999,44.677467 L -75.01839199999999,44.680448000000005 L -75.019184,44.680762 L -75.01998299999998,44.681100999999984 L -75.020792,44.68142199999999 L -75.02248399999998,44.68212499999999 L -75.02581699999999,44.68350199999999 L -75.03063,44.685531999999974 L -75.03252799999999,44.686347000000005 L -75.03309199999998,44.686588999999984 L -75.035791,44.68772599999998 L -75.038291,44.688840000000006 L -75.04328299999999,44.690935999999994 L -75.04542899999998,44.691841999999994 L -75.04612399999999,44.69213099999999 L -75.044929,44.69343299999999 L -75.04282099999999,44.695826 L -75.041935,44.696805 L -75.040917,44.697946999999985 L -75.040759,44.69808700000001 L -75.040522,44.69825399999998 L -75.04033299999998,44.698361999999996 L -75.03916299999999,44.69893799999999 L -75.03777,44.699598 L -75.037671,44.699636999999974 L -75.037425,44.699693999999994 L -75.03719699999998,44.699718 L -75.035634,44.69963899999998 L -75.03286299999999,44.69952499999999 L -75.032377,44.69951399999999 L -75.03201299999998,44.69951799999999 L -75.031536,44.69953899999999 L -75.03114099999999,44.69957499999999 L -75.03096599999998,44.699605 L -75.03059499999999,44.69971999999999 L -75.02970499999999,44.700124 L -75.026229,44.701767 L -75.02336899999999,44.70315199999999 L -75.02264199999999,44.70351299999999 L -75.02007499999998,44.70472099999998 L -75.01836099999998,44.705529 L -75.017596,44.705878 L -75.014026,44.70757399999999 L -75.01257299999999,44.708255999999984 L -75.011134,44.708949000000004 L -75.009788,44.70957999999999 L -75.009646,44.709620999999984 L -75.009497,44.709637 L -75.00926899999999,44.71052699999998 L -75.00494599999999,44.710853 L -75.005043,44.710696999999996 L -75.00511999999999,44.71059700000001 L -75.00531699999998,44.71038099999999 L -75.00553599999999,44.710223999999975 L -75.00570899999998,44.710149999999985 L -75.005833,44.710080999999995 L -75.005952,44.709976999999995 L -75.00626199999998,44.709675000000004 L -75.006354,44.709572 L -75.006435,44.709459999999986 L -75.006531,44.70928699999999 L -75.00654699999998,44.709044999999975 L -75.00658299999998,44.708980999999994 L -75.00683299999999,44.708731 L -75.00712399999999,44.70849099999998 L -75.007178,44.708414 L -75.007178,44.708355999999974 L -75.007155,44.70831399999998 L -75.00709699999999,44.708294999999985 L -75.007009,44.708294999999985 L -75.00699299999998,44.708279 L -75.00699699999998,44.708245 L -75.00707799999998,44.708175 L -75.00735499999999,44.70797199999999 L -75.00755099999998,44.707786999999996 L -75.007632,44.707641 L -75.00762699999999,44.70756999999999 L -75.00758799999998,44.70749699999999 L -75.007499,44.707443 L -75.00740699999999,44.70743899999998 L -75.00728799999999,44.707480999999994 L -75.007099,44.70767399999999 L -75.00688,44.70787699999999 L -75.00670299999999,44.70798099999999 L -75.006225,44.70821199999999 L -75.00611099999999,44.70828799999999 L -75.00604299999998,44.708306999999984 L -75.00581,44.70831299999998 L -75.00576199999998,44.708296 L -75.005706,44.708246 L -75.005515,44.70799899999999 L -75.005459,44.707891 L -75.00542899999999,44.70773399999998 L -75.005347,44.707720999999985 L -75.005321,44.707694000000004 L -75.00531599999998,44.70764199999999 L -75.00536,44.707578000000005 L -75.00543299999998,44.70752600000001 L -75.00557599999999,44.70744599999998 L -75.00566599999999,44.70736299999999 L -75.00571599999998,44.70725499999999 L -75.005755,44.70708599999998 L -75.005731,44.70670399999999 L -75.005712,44.706653999999986 L -75.005616,44.70664199999999 L -75.00559699999998,44.70661900000001 L -75.005601,44.70657699999999 L -75.005751,44.70645 L -75.00584699999999,44.70626600000001 L -75.00587499999999,44.706188000000004 L -75.00522,44.70606999999999 L -75.00532,44.705490999999995 L -75.005431,44.704910999999996 L -75.005639,44.704460999999995 L -75.007395,44.703573999999996 L -75.009237,44.702763 L -75.009445,44.702386999999995 L -75.009654,44.701494 L -75.009992,44.69966 L -75.009574,44.697323 L -75.009258,44.695375999999996 L -75.009395,44.694001 L -75.010491,44.692094 L -75.011076,44.690511 L -75.011719,44.689629 L -75.011483,44.688603 L -75.010953,44.687543999999995 L -75.0104,44.686903 L -75.00972999999999,44.686800000000005 L -75.009396,44.686749999999996 L -75.00724,44.686415 L -75.005646,44.686634 L -75.004646,44.686453 L -75.002766,44.686796 L -75.001564,44.686746 L -75.001013,44.68643 L -75.00022299999999,44.685542999999996 L -74.999016,44.684498 L -74.99775199999999,44.683594 L -74.997177,44.681661 L -74.99624399999999,44.68042 L -74.99673,44.68019199999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -75.000998,44.705312999999975 L -75.00197699999998,44.70546499999999 L -75.003034,44.705667999999974 L -75.005032,44.70603599999998 L -75.00522,44.70606999999999 L -75.00522,44.70607 L -75.005032,44.706036 L -75.003034,44.705667999999996 L -75.001977,44.705465 L -75.000998,44.705313 L -75.000366,44.707119999999996 L -75.000998,44.705312999999975 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.999721,44.70882199999998 L -74.999815,44.70853099999999 L -75.00003699999999,44.707979999999985 L -75.000366,44.707119999999996 L -75.00003699999999,44.70798 L -74.999815,44.708531 L -74.999721,44.708822 L -74.99919899999999,44.711027 L -74.999721,44.70882199999998 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.99907499999999,44.71150699999999 L -74.99919899999999,44.711027 L -74.99907499999999,44.711507 L -74.998987,44.711734 L -74.99907499999999,44.71150699999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.99788199999998,44.712727999999984 L -74.998086,44.712617999999985 L -74.998344,44.712449999999976 L -74.99852299999999,44.71231199999999 L -74.998684,44.71216099999998 L -74.99884099999998,44.711967 L -74.998987,44.711734 L -74.998841,44.711967 L -74.998684,44.712160999999995 L -74.99852299999999,44.712312 L -74.998344,44.71245 L -74.998086,44.712618 L -74.99788199999999,44.712728 L -74.997646,44.712827999999995 L -74.99788199999998,44.712727999999984 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.99553499999998,44.71338799999998 L -74.99661499999999,44.713117999999994 L -74.997472,44.712887999999985 L -74.997646,44.712827999999995 L -74.997472,44.712888 L -74.99661499999999,44.713118 L -74.99553499999999,44.713387999999995 L -74.99499499987778,44.71353681893132 L -74.99553499999998,44.71338799999998 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.99489999999999,44.71356300000001 L -74.99468999999998,44.713607 L -74.99462399999452,44.71361731250085 L -74.99468999999999,44.713606999999996 L -74.9949,44.713563 L -74.99499499987778,44.71353681893132 L -74.99489999999999,44.71356300000001 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.99449799999998,44.71363699999999 L -74.99462399999452,44.71361731250085 L -74.994498,44.713637 L -74.99449799999998,44.713637 L -74.99449799999998,44.71363699999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.994479,44.71387499999999 L -74.99445199999998,44.714002999999984 L -74.99440899999999,44.71406199999999 L -74.99431599999998,44.71411499999999 L -74.99429599999998,44.71414299999998 L -74.99422299999998,44.714333 L -74.99418999999999,44.714368999999984 L -74.994131,44.714396999999984 L -74.994011,44.71441299999997 L -74.99347399999999,44.714431000000005 L -74.992223,44.71443399999998 L -74.991515,44.71444799999999 L -74.99159499999999,44.714389999999995 L -74.991747,44.714157 L -74.991908,44.713933 L -74.991985,44.713879 L -74.992102,44.713836 L -74.99233699999999,44.713803 L -74.99333399999999,44.71374 L -74.99425,44.713668 L -74.99449799999998,44.713637 L -74.994479,44.71387499999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.99151499999998,44.71444799999999 L -74.991515,44.71444799999999 L -74.99151499999999,44.714448 L -74.989356,44.714487999999996 L -74.99151499999998,44.71444799999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.989356,44.714487999999996 L -74.98721499999999,44.714506 L -74.98721499999999,44.71450599999999 L -74.989356,44.714487999999996 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.98721499999998,44.71450599999999 L -74.98720299999998,44.712013000000006 L -74.98682851068023,44.71201098931908 L -74.987203,44.712013 L -74.98721499999999,44.71450599999999 L -74.98721499999998,44.71450599999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.986458,44.71200899999999 L -74.98682851068023,44.71201098931908 L -74.986458,44.712008999999995 L -74.98222299999999,44.712022999999995 L -74.986458,44.71200899999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.97871699999999,44.712374999999994 L -74.97933499999998,44.71219199999998 L -74.97971999999999,44.71210999999999 L -74.980091,44.71206699999998 L -74.980646,44.71204699999999 L -74.98186599999998,44.712028999999994 L -74.98222299999999,44.712022999999995 L -74.981866,44.712029 L -74.980646,44.712047 L -74.980091,44.712067 L -74.97972,44.712109999999996 L -74.97933499999999,44.712191999999995 L -74.978717,44.712374999999994 L -74.977515,44.712762999999995 L -74.97871699999999,44.712374999999994 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.97679499999998,44.713008 L -74.97662790709715,44.7130695933988 L -74.976795,44.713007999999995 L -74.977515,44.712762999999995 L -74.97679499999998,44.713008 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.975741,44.713407999999994 L -74.97599199999999,44.713303999999994 L -74.97662790709715,44.7130695933988 L -74.97599199999999,44.713304 L -74.975741,44.713408 L -74.97483249999999,44.7138285 L -74.975741,44.713407999999994 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.973924,44.714249 L -74.97322600165569,44.71459099918876 L -74.973924,44.714248999999995 L -74.97483249999999,44.7138285 L -74.973924,44.714249 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.96306,44.71959399999999 L -74.96624999999999,44.717990999999984 L -74.96747199999999,44.717391999999975 L -74.97045899999998,44.71592599999999 L -74.97183,44.715274999999984 L -74.97322600165569,44.71459099918876 L -74.97183,44.715275 L -74.97045899999999,44.715925999999996 L -74.967472,44.717392 L -74.96625,44.717991 L -74.96306,44.719594 L -74.96138066335529,44.720438001664235 L -74.96306,44.71959399999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.96054099999999,44.72086 L -74.960172,44.721039 L -74.96054099999999,44.720859999999995 L -74.96138066335529,44.720438001664235 L -74.96054099999999,44.72086 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.95767099999999,44.72231799999999 L -74.957703,44.722303999999994 L -74.957977,44.72217199999999 L -74.95826599999998,44.722006 L -74.959803,44.72121799999999 L -74.960172,44.721039 L -74.959803,44.721218 L -74.958266,44.722006 L -74.957977,44.722172 L -74.957703,44.722304 L -74.95767099999999,44.722318 L -74.95765674838769,44.72229950322658 L -74.95767099999999,44.72231799999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.95762399999998,44.72225700000001 L -74.955581,44.720189 L -74.957624,44.722257 L -74.95765674838769,44.72229950322658 L -74.95762399999998,44.72225700000001 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.947085,44.711466999999985 L -74.950696,44.71522499999998 L -74.955581,44.720189 L -74.950696,44.715225 L -74.947085,44.711467 L -74.9469004124951,44.71127199986662 L -74.947085,44.711466999999985 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.94688999999998,44.711260999999986 L -74.93769399999998,44.70153299999999 L -74.93632799999999,44.700107999999986 L -74.93624861651921,44.70002330855987 L -74.936328,44.700108 L -74.937694,44.701533 L -74.94689,44.711261 L -74.9469004124951,44.71127199986662 L -74.94688999999998,44.711260999999986 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.932763,44.69636499999999 L -74.935655,44.699389999999994 L -74.93624861651921,44.70002330855987 L -74.935655,44.69939 L -74.932763,44.696365 L -74.93112352980259,44.694563532747395 L -74.932763,44.69636499999999 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.929484,44.692762 L -74.92923100082784,44.69248233424842 L -74.929484,44.692761999999995 L -74.93112352980259,44.694563532747395 L -74.929484,44.692762 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.928725,44.69192299999998 L -74.92923100082784,44.69248233424842 L -74.928725,44.691922999999996 L -74.92838045623634,44.691540542204564 L -74.928725,44.69192299999998 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.92799799999999,44.691116 L -74.92584534200662,44.68874042492802 L -74.927998,44.691116 L -74.92838045623634,44.691540542204564 L -74.92799799999999,44.691116 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.91759899999998,44.68023599999998 L -74.920463,44.683214999999976 L -74.922912,44.68577299999998 L -74.92507199999999,44.687886999999975 L -74.92584534200662,44.68874042492802 L -74.925072,44.687886999999996 L -74.922912,44.685773 L -74.920463,44.683215 L -74.917599,44.680236 L -74.91688469749514,44.67945889670565 L -74.91759899999998,44.68023599999998 z\" /><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.003240561599999978\" opacity=\"0.6\" d=\"M -74.98777,44.684898 L -74.98780099999998,44.685211999999986 L -74.98804999999999,44.68510800000001 L -74.98835199999999,44.68530699999999 L -74.98860399999998,44.68520699999999 L -74.989274,44.68500999999998 L -74.98937699999999,44.684996000000005 L -74.989451,44.685016 L -74.98983199999999,44.685648999999984 L -74.989851,44.68568699999998 L -74.991993,44.68508599999999 L -74.992643,44.685672000000004 L -74.99141,44.68615499999999 L -74.990107,44.68666599999999 L -74.98866299999999,44.687234999999994 L -74.988247,44.68745199999999 L -74.98812299999999,44.687499 L -74.98789499999998,44.687552000000004 L -74.987027,44.688015 L -74.987025,44.68767199999999 L -74.987008,44.68555800000001 L -74.98700599999998,44.685426 L -74.986997,44.684802 L -74.98777,44.684898 z\" /></g></g></svg>"},"metadata":{},"execution_count":29}],"source":["error.loc[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":37,"status":"ok","timestamp":1711077984416,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"cUgHJxulruMz","outputId":"b01e60f5-480c-4424-edbc-f0a93b19be66"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-30-a4029d802f14>:1: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  error.area\n"]},{"output_type":"execute_result","data":{"text/plain":["0    0.002431\n","dtype: float64"]},"metadata":{},"execution_count":30}],"source":["error.area"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1711077984416,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"MBo1AxtHruO8","outputId":"8d6be76a-5da5-427a-abbc-ebde3f3187b0"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-31-64afa91c2042>:1: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area / census_block.area\n"]},{"output_type":"execute_result","data":{"text/plain":["0    0.738375\n","dtype: float64"]},"metadata":{},"execution_count":31}],"source":["relative_error = error.area / census_block.area\n","relative_error"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":477642,"status":"error","timestamp":1711078605204,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"EoMYk7nKruTx","outputId":"c3699243-0f90-4c71-ca4a-128f8671a5c7"},"outputs":[{"output_type":"stream","name":"stderr","text":["\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:6: FutureWarning: `unary_union` returned None due to all-None GeoSeries. In future, `unary_union` will return 'GEOMETRYCOLLECTION EMPTY' instead.\n","  approximation = precincts_for_one_census_block.unary_union\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n","<ipython-input-33-c2cb4f4cc0bd>:3: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","<ipython-input-33-c2cb4f4cc0bd>:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n","\n","  relative_error = error.area /census_block.area\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-c2cb4f4cc0bd>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcensus_tracts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0mcensus_block_polygon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcensus_tracts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'geometry'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprecincts\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'geometry'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcentroid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mcensus_block_polygon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontains\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m   \u001b[0mprecincts_for_one_census_block\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprecincts\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;31m# Show the approximation error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/geopandas/base.py\u001b[0m in \u001b[0;36mcentroid\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    491\u001b[0m         \u001b[0mGeoSeries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrepresentative_point\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mpoint\u001b[0m \u001b[0mguaranteed\u001b[0m \u001b[0mto\u001b[0m \u001b[0mbe\u001b[0m \u001b[0mwithin\u001b[0m \u001b[0meach\u001b[0m \u001b[0mgeometry\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m         \"\"\"\n\u001b[0;32m--> 493\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_delegate_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"centroid\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    494\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/geopandas/base.py\u001b[0m in \u001b[0;36m_delegate_property\u001b[0;34m(op, this)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;31m# type: (str, GeoSeries) -> GeoSeries/Series\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0ma_this\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGeometryArray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeometry\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma_this\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGeometryArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mgeoseries\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGeoSeries\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/geopandas/array.py\u001b[0m in \u001b[0;36mcentroid\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    511\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    512\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcentroid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 513\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck_geographic_crs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    514\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mGeometryArray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvectorized\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcentroid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcrs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    515\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/geopandas/array.py\u001b[0m in \u001b[0;36mcheck_geographic_crs\u001b[0;34m(self, stacklevel)\u001b[0m\n\u001b[1;32m    366\u001b[0m                 \u001b[0;34m\"incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    367\u001b[0m                 \"projected CRS before this operation.\\n\".format(\n\u001b[0;32m--> 368\u001b[0;31m                     \u001b[0minspect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    369\u001b[0m                 ),\n\u001b[1;32m    370\u001b[0m                 \u001b[0mUserWarning\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/inspect.py\u001b[0m in \u001b[0;36mstack\u001b[0;34m(context)\u001b[0m\n\u001b[1;32m   1671\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1672\u001b[0m     \u001b[0;34m\"\"\"Return a list of records for the stack above the caller's frame.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1673\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mgetouterframes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1674\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1675\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/inspect.py\u001b[0m in \u001b[0;36mgetouterframes\u001b[0;34m(frame, context)\u001b[0m\n\u001b[1;32m   1648\u001b[0m     \u001b[0mframelist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1649\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1650\u001b[0;31m         \u001b[0mframeinfo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mgetframeinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1651\u001b[0m         \u001b[0mframelist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFrameInfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mframeinfo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1652\u001b[0m         \u001b[0mframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_back\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/inspect.py\u001b[0m in \u001b[0;36mgetframeinfo\u001b[0;34m(frame, context)\u001b[0m\n\u001b[1;32m   1622\u001b[0m         \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlineno\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m//\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1623\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1624\u001b[0;31m             \u001b[0mlines\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlnum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfindsource\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1625\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1626\u001b[0m             \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/inspect.py\u001b[0m in \u001b[0;36mfindsource\u001b[0;34m(object)\u001b[0m\n\u001b[1;32m    950\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'source code not available'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 952\u001b[0;31m     \u001b[0mmodule\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    953\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    954\u001b[0m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlinecache\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetlines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__dict__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/inspect.py\u001b[0m in \u001b[0;36mgetmodule\u001b[0;34m(object, _filename)\u001b[0m\n\u001b[1;32m    867\u001b[0m     \u001b[0;31m# Copy sys.modules in order to cope with changes while iterating\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    868\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mmodname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodules\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 869\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mismodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__file__'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    870\u001b[0m             \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__file__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    871\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mf\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_filesbymodname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/inspect.py\u001b[0m in \u001b[0;36mismodule\u001b[0;34m(object)\u001b[0m\n\u001b[1;32m    180\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m \u001b[0;31m# ----------------------------------------------------------- type-checking\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mismodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m     \"\"\"Return true if the object is a module.\n\u001b[1;32m    184\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["for i in census_tracts.index:\n","  census_block_polygon = census_tracts.loc[i, 'geometry']\n","  mask = precincts['geometry'].centroid.apply(lambda x: census_block_polygon.contains(x))\n","  precincts_for_one_census_block = precincts[mask.values]\n","  # Show the approximation error\n","  approximation = precincts_for_one_census_block.unary_union\n","  approximation_one_block = geopandas.GeoSeries([approximation], crs=4269)\n","  census_block = census_tracts.loc[[i], 'geometry'].reset_index()\n","  error = approximation_one_block.symmetric_difference(census_block)\n","  relative_error = error.area /census_block.area\n","  census_tracts.loc[i,'relative_error'] = relative_error.iloc[0]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":597},"executionInfo":{"elapsed":506,"status":"ok","timestamp":1711078608104,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"ppD2RHokO-cM","outputId":"bbd49ea1-07d0-4795-8e4f-a9c46178b775"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     STATEFP COUNTYFP TRACTCE        GEOID NAME          NAMELSAD  MTFCC  \\\n","0         36      047  000700  36047000700    7    Census Tract 7  G5020   \n","1         36      047  000900  36047000900    9    Census Tract 9  G5020   \n","2         36      047  001100  36047001100   11   Census Tract 11  G5020   \n","3         36      047  001300  36047001300   13   Census Tract 13  G5020   \n","4         36      047  002000  36047002000   20   Census Tract 20  G5020   \n","...      ...      ...     ...          ...  ...               ...    ...   \n","5406      36      081  027900  36081027900  279  Census Tract 279  G5020   \n","5407      36      081  028000  36081028000  280  Census Tract 280  G5020   \n","5408      36      081  028100  36081028100  281  Census Tract 281  G5020   \n","5409      36      081  028200  36081028200  282  Census Tract 282  G5020   \n","5410      36      081  028400  36081028400  284  Census Tract 284  G5020   \n","\n","     FUNCSTAT   ALAND  AWATER     INTPTLAT      INTPTLON  \\\n","0           S  176774       0  +40.6923505  -073.9973434   \n","1           S  163469       0  +40.6917206  -073.9916018   \n","2           S  168507       0  +40.6932903  -073.9877087   \n","3           S  293167       0  +40.6976150  -073.9883586   \n","4           S  154138       0  +40.6480407  -074.0159276   \n","...       ...     ...     ...          ...           ...   \n","5406        S  177155       0  +40.7516729  -073.8802222   \n","5407        S  165398       0  +40.6883158  -073.7797191   \n","5408        S  174441       0  +40.7522203  -073.8825920   \n","5409        S  182472       0  +40.6849947  -073.7738873   \n","5410        S  429455       0  +40.6825033  -073.7778568   \n","\n","                                               geometry  relative_error  \n","0     POLYGON ((-74.00154 40.69279, -74.00132 40.693...        0.133205  \n","1     POLYGON ((-73.99405 40.69090, -73.99374 40.691...        0.295814  \n","2     POLYGON ((-73.99073 40.69305, -73.99045 40.693...             NaN  \n","3     POLYGON ((-73.99141 40.69863, -73.99131 40.699...        0.586501  \n","4     POLYGON ((-74.01867 40.64741, -74.01809 40.647...        0.840734  \n","...                                                 ...             ...  \n","5406  POLYGON ((-73.88189 40.75208, -73.88096 40.752...             NaN  \n","5407  POLYGON ((-73.78243 40.69034, -73.78160 40.690...             NaN  \n","5408  POLYGON ((-73.88431 40.75567, -73.88351 40.755...             NaN  \n","5409  POLYGON ((-73.77709 40.68820, -73.77662 40.688...             NaN  \n","5410  POLYGON ((-73.78302 40.68428, -73.78213 40.684...             NaN  \n","\n","[5411 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-55f36af6-c97f-4a93-af2d-25c735a11844\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>TRACTCE</th>\n","      <th>GEOID</th>\n","      <th>NAME</th>\n","      <th>NAMELSAD</th>\n","      <th>MTFCC</th>\n","      <th>FUNCSTAT</th>\n","      <th>ALAND</th>\n","      <th>AWATER</th>\n","      <th>INTPTLAT</th>\n","      <th>INTPTLON</th>\n","      <th>geometry</th>\n","      <th>relative_error</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>000700</td>\n","      <td>36047000700</td>\n","      <td>7</td>\n","      <td>Census Tract 7</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>176774</td>\n","      <td>0</td>\n","      <td>+40.6923505</td>\n","      <td>-073.9973434</td>\n","      <td>POLYGON ((-74.00154 40.69279, -74.00132 40.693...</td>\n","      <td>0.133205</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>000900</td>\n","      <td>36047000900</td>\n","      <td>9</td>\n","      <td>Census Tract 9</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>163469</td>\n","      <td>0</td>\n","      <td>+40.6917206</td>\n","      <td>-073.9916018</td>\n","      <td>POLYGON ((-73.99405 40.69090, -73.99374 40.691...</td>\n","      <td>0.295814</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>001100</td>\n","      <td>36047001100</td>\n","      <td>11</td>\n","      <td>Census Tract 11</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>168507</td>\n","      <td>0</td>\n","      <td>+40.6932903</td>\n","      <td>-073.9877087</td>\n","      <td>POLYGON ((-73.99073 40.69305, -73.99045 40.693...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>001300</td>\n","      <td>36047001300</td>\n","      <td>13</td>\n","      <td>Census Tract 13</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>293167</td>\n","      <td>0</td>\n","      <td>+40.6976150</td>\n","      <td>-073.9883586</td>\n","      <td>POLYGON ((-73.99141 40.69863, -73.99131 40.699...</td>\n","      <td>0.586501</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>36</td>\n","      <td>047</td>\n","      <td>002000</td>\n","      <td>36047002000</td>\n","      <td>20</td>\n","      <td>Census Tract 20</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>154138</td>\n","      <td>0</td>\n","      <td>+40.6480407</td>\n","      <td>-074.0159276</td>\n","      <td>POLYGON ((-74.01867 40.64741, -74.01809 40.647...</td>\n","      <td>0.840734</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5406</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>027900</td>\n","      <td>36081027900</td>\n","      <td>279</td>\n","      <td>Census Tract 279</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>177155</td>\n","      <td>0</td>\n","      <td>+40.7516729</td>\n","      <td>-073.8802222</td>\n","      <td>POLYGON ((-73.88189 40.75208, -73.88096 40.752...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5407</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>028000</td>\n","      <td>36081028000</td>\n","      <td>280</td>\n","      <td>Census Tract 280</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>165398</td>\n","      <td>0</td>\n","      <td>+40.6883158</td>\n","      <td>-073.7797191</td>\n","      <td>POLYGON ((-73.78243 40.69034, -73.78160 40.690...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5408</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>028100</td>\n","      <td>36081028100</td>\n","      <td>281</td>\n","      <td>Census Tract 281</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>174441</td>\n","      <td>0</td>\n","      <td>+40.7522203</td>\n","      <td>-073.8825920</td>\n","      <td>POLYGON ((-73.88431 40.75567, -73.88351 40.755...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5409</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>028200</td>\n","      <td>36081028200</td>\n","      <td>282</td>\n","      <td>Census Tract 282</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>182472</td>\n","      <td>0</td>\n","      <td>+40.6849947</td>\n","      <td>-073.7738873</td>\n","      <td>POLYGON ((-73.77709 40.68820, -73.77662 40.688...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5410</th>\n","      <td>36</td>\n","      <td>081</td>\n","      <td>028400</td>\n","      <td>36081028400</td>\n","      <td>284</td>\n","      <td>Census Tract 284</td>\n","      <td>G5020</td>\n","      <td>S</td>\n","      <td>429455</td>\n","      <td>0</td>\n","      <td>+40.6825033</td>\n","      <td>-073.7778568</td>\n","      <td>POLYGON ((-73.78302 40.68428, -73.78213 40.684...</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5411 rows × 14 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55f36af6-c97f-4a93-af2d-25c735a11844')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-55f36af6-c97f-4a93-af2d-25c735a11844 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-55f36af6-c97f-4a93-af2d-25c735a11844');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bf52113e-7056-46aa-8417-c2bf792ffc61\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf52113e-7056-46aa-8417-c2bf792ffc61')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bf52113e-7056-46aa-8417-c2bf792ffc61 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a884cab1-f8e2-4b5a-86bf-83617d9bb89c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('census_tracts')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a884cab1-f8e2-4b5a-86bf-83617d9bb89c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('census_tracts');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"census_tracts","summary":"{\n  \"name\": \"census_tracts\",\n  \"rows\": 5411,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"36\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COUNTYFP\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 62,\n        \"samples\": [\n          \"017\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRACTCE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3167,\n        \"samples\": [\n          \"413001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5411,\n        \"samples\": [\n          \"36059407802\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3167,\n        \"samples\": [\n          \"4130.01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAMELSAD\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3167,\n        \"samples\": [\n          \"Census Tract 4130.01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MTFCC\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"G5020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FUNCSTAT\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 78244511,\n        \"min\": 0,\n        \"max\": 1828343856,\n        \"num_unique_values\": 5385,\n        \"samples\": [\n          147490\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63909959,\n        \"min\": 0,\n        \"max\": 2713594574,\n        \"num_unique_values\": 2234,\n        \"samples\": [\n          1691363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INTPTLAT\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5410,\n        \"samples\": [\n          \"+40.7316176\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INTPTLON\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5410,\n        \"samples\": [\n          \"-073.5525031\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5411,\n        \"samples\": [\n          \"POLYGON ((-73.55685299999999 40.725465, -73.556536 40.726439, -73.556405 40.726952, -73.55623299999999 40.72736, -73.556083 40.727733, -73.555787 40.728280999999996, -73.555334 40.729068999999996, -73.555224 40.729316999999995, -73.555173 40.729431, -73.555118 40.729607, -73.555043 40.729993, -73.55438 40.733062, -73.55430299999999 40.733325, -73.55421299999999 40.733731, -73.554171 40.733985, -73.554104 40.73439, -73.553609 40.73679, -73.55335099999999 40.738040999999996, -73.553174 40.738031, -73.552799 40.738020999999996, -73.552453 40.737992, -73.55208499999999 40.737933, -73.551855 40.737883, -73.551673 40.737832999999995, -73.550782 40.73753, -73.55044699999999 40.737280999999996, -73.550298 40.73717, -73.549352 40.736515, -73.548205 40.73561, -73.547224 40.734826999999996, -73.54691199999999 40.734592, -73.546627 40.734409, -73.546133 40.734139, -73.546111 40.734131, -73.54611299999999 40.734108, -73.545771 40.733756, -73.55133599999999 40.733734999999996, -73.55136999999999 40.7336, -73.551456 40.729883, -73.551465 40.729535999999996, -73.55147 40.7293, -73.551817 40.725272, -73.552691 40.725302, -73.553238 40.725311999999995, -73.554 40.725303, -73.554413 40.725297999999995, -73.55514699999999 40.72528, -73.555756 40.725237, -73.556945 40.725139999999996, -73.55685299999999 40.725465))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"relative_error\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3174808508852138,\n        \"min\": 0.0,\n        \"max\": 3.7902119717408636,\n        \"num_unique_values\": 939,\n        \"samples\": [\n          0.5387882816718735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":34}],"source":["census_tracts"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1268,"status":"ok","timestamp":1711078610954,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"a8RsS8D3O-m9","outputId":"0a80f2f8-06d2-441c-ec24-57cb519f5c93"},"outputs":[{"output_type":"stream","name":"stdout","text":["DataFrame has been saved to Centroid.csv\n"]}],"source":["csv_file_path = 'Centroid.csv'\n","\n","# Use the to_csv method to save the DataFrame as a CSV file\n","census_tracts.to_csv(csv_file_path, index= True)\n","print(f\"DataFrame has been saved to {csv_file_path}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":546,"status":"ok","timestamp":1711078612970,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"bt2bSulmO-7p","outputId":"52b41145-9398-47b0-a13b-c9a8261bacaf"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","\n","\n","plt.hist(census_tracts['relative_error'])\n","# Add labels and a title\n","plt.xticks(np.arange(0, 5))\n","plt.xlabel('Errors')\n","plt.ylabel('Frequency')\n","plt.title('Histogram of Errors')\n","plt.savefig(\"Centroid_Histogram.png\")\n","# Show the plot\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":699},"executionInfo":{"elapsed":1170,"status":"ok","timestamp":1711078616444,"user":{"displayName":"YB Han","userId":"00742660692379233666"},"user_tz":240},"id":"VK0Z79dEQh6P","outputId":"de257467-284a-4ff9-d75d-23d18e955f51"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["base_map = census_tracts.plot(column='relative_error',legend=True, figsize=(12, 8))\n","\n","plt.title('Relative Errors on Map')\n","plt.savefig('Centroid_Histogram_Map.png')\n","\n","# Show the plot\n","plt.show()"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1NAULdlgp6Zmv_e63rbVlr2c1wCZDFfda","timestamp":1708379055417}],"authorship_tag":"ABX9TyMLnnwGTI4oxcPK4W2AIMrV"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
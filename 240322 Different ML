{"cells":[{"cell_type":"markdown","metadata":{"id":"rUaTK5H3mLXR"},"source":["#Recall the Data"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":38526,"status":"ok","timestamp":1715880254960,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"fBhyqe_BBPSp","outputId":"ea779064-9718-4927-e216-d838d8e91cdc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.25.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.15.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.11.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.63.0)\n","Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.2)\n","Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.27.0)\n","Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (5.3.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.4.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.5)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.6.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\n","2.2.1+cu121\n"]}],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import torchvision.datasets as datasets\n","import torchvision.transforms as transforms\n","import random\n","from torch.utils.data import Dataset, DataLoader\n","import pandas as pd\n","!pip install pandas numpy scikit-learn tensorflow\n","import pandas as pd\n","from sklearn.preprocessing import StandardScaler\n","import tensorflow as tf\n","\n","print(torch.__version__)"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17423,"status":"ok","timestamp":1715880272375,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"1rsTqBZBeOrX","outputId":"c52df436-ca90-422b-8a37-a6b070ecfadf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3230,"status":"ok","timestamp":1715283285772,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"Se53dGmgkI38","outputId":"0685202d-725e-4baa-89f8-ea00805b13ce"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-7f905cc06cbe>:1: DtypeWarning: Columns (2,3,4) have mixed types. Specify dtype option on import or set low_memory=False.\n","  finaldata = pd.read_csv(\"/content/drive/MyDrive/capstone_yb/Voting ML/DATA/cleaned_finaldata.csv\")\n"]}],"source":["finaldata = pd.read_csv(\"/content/drive/MyDrive/capstone_yb/Voting ML/DATA/cleaned_finaldata.csv\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1715283285773,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"Kid0PrNN4tye","outputId":"727fcebb-9a67-4e58-d42c-ceb845621781"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["House Hold Less than $50,000                    float64\n","House Hold $50,000 to $99,999                   float64\n","House Hold $100,000 to $149,999                 float64\n","House Hold $150,000 to $199,999                 float64\n","House Hold $200,000 or more                     float64\n","Families Less than $50,000                      float64\n","Families $50,000 to $99,999                     float64\n","Families $100,000 to 149,999                    float64\n","Families $150,000 to $199,999                   float64\n","Families $200,000 or more                       float64\n","Married-couple Families Less than $50,000       float64\n","Married-couple Families $50,000 to $99,999      float64\n","Married-couple Families $100,000 to 149,999     float64\n","Married-couple Families $150,000 to $199,999    float64\n","Married-couple Families $200,000 or more        float64\n","Nonfamily households Less than $50,000          float64\n","Nonfamily households $50,000 to $99,999         float64\n","Nonfamily households $100,000 to 149,999        float64\n","Nonfamily households $150,000 to $199,999       float64\n","Nonfamily households $200,000 or more           float64\n","dtype: object"]},"metadata":{},"execution_count":4}],"source":["X = finaldata.drop(columns=['Geography', 'Geographic Area Name','Biden_proportion','Estimate!!Households!!Median income (dollars)','Vote Count', 'Precinct','County',\n","                            'Estimate!!Families!!Median income (dollars)','Estimate!!Nonfamily households!!Median income (dollars)', 'Estimate!!Married-couple families!!Median income (dollars)'])\n","X = X.astype(float)\n","X.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NjC0YvPY4xb_"},"outputs":[],"source":["y = finaldata['Biden_proportion']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DpsiHsiq5ODV"},"outputs":[],"source":["import copy\n","import numpy as np\n","import tqdm\n","from sklearn.model_selection import train_test_split\n","\n","# train-test split of the dataset / chaning split of data to Pytorch\n","X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True)\n","X_train = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train = torch.tensor(y_train.values, dtype=torch.float32).reshape(-1, 1)\n","X_test = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test = torch.tensor(y_test.values, dtype=torch.float32).reshape(-1, 1)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1715283285773,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"ci6tKcDL7cGB","outputId":"84bc4f54-9ab5-439d-a7d5-87aecce03229"},"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([36754, 20])\n","torch.Size([36754, 1])\n"]}],"source":["print(X_train.shape)\n","print(y_train.shape)"]},{"cell_type":"markdown","source":["#LInear Regression"],"metadata":{"id":"XFvCemyZkMhR"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"xjSDGThrlW-1"},"outputs":[],"source":["from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error\n","import numpy as np"]},{"cell_type":"code","source":["# PyTorch Tensor를 numpy 배열로 변환\n","X_train_np = X_train.numpy()\n","y_train_np = y_train.numpy().reshape(-1)\n","X_test_np = X_test.numpy()\n","y_test_np = y_test.numpy().reshape(-1)"],"metadata":{"id":"-vn1qpNfkoT7"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1715283286127,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"zWh43mzHlqhh","colab":{"base_uri":"https://localhost:8080/","height":75},"outputId":"3feee79d-78d4-40ed-f99b-82477b59038e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":10}],"source":["# LInear Regression\n","linear_model = LinearRegression()\n","linear_model.fit(X_train_np, y_train_np)\n"]},{"cell_type":"code","source":["# Model Evaluation\n","y_pred = linear_model.predict(X_test_np)\n","mse = mean_squared_error(y_test_np, y_pred)\n","rmse = np.sqrt(mse)\n","print(f\"Linear Regression RMSE: {rmse}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MHN63jsxnO1W","executionInfo":{"status":"ok","timestamp":1715283286128,"user_tz":240,"elapsed":12,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"3eb26b63-5058-407f-853c-403143dc866e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression RMSE: 0.1515805870294571\n"]}]},{"cell_type":"markdown","source":["# Polynomial Regression with Regularization"],"metadata":{"id":"TYLTz67CmmLg"}},{"cell_type":"code","source":["from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.pipeline import make_pipeline\n","from sklearn.linear_model import Ridge\n","\n","# (Polynomial Regression) with Regularization\n","polynomial_degree = 2  # 다항식 차수\n","alpha = 1.0  # 정규화 강도\n","poly_model = make_pipeline(PolynomialFeatures(degree=polynomial_degree), Ridge(alpha=alpha))\n","\n","# Model Fit\n","poly_model.fit(X_train_np, y_train_np)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":128},"id":"y-97MQQHmxnc","executionInfo":{"status":"ok","timestamp":1715283287401,"user_tz":240,"elapsed":1280,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"d8a3cbf8-709f-429a-c2fb-bd73f385a39b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),\n","                ('ridge', Ridge())])"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;polynomialfeatures&#x27;, PolynomialFeatures()),\n","                (&#x27;ridge&#x27;, Ridge())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;polynomialfeatures&#x27;, PolynomialFeatures()),\n","                (&#x27;ridge&#x27;, Ridge())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Model Evaluation\n","y_pred_poly = poly_model.predict(X_test_np)\n","mse_poly = mean_squared_error(y_test_np, y_pred_poly)\n","rmse_poly = np.sqrt(mse_poly)\n","print(f\"Polynomial Regression (Ridge) RMSE: {rmse_poly}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zw7VTCqfnRI3","executionInfo":{"status":"ok","timestamp":1715283287401,"user_tz":240,"elapsed":15,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"5f5659ef-7ec8-4845-cb5e-49f07e1cee8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Polynomial Regression (Ridge) RMSE: 0.13483577966690063\n"]}]},{"cell_type":"markdown","metadata":{"id":"faHTxH5smikb"},"source":["#Ensemble Model: RandomForestRegressor"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"kqmcwWP1Wmsn","executionInfo":{"status":"ok","timestamp":1715283320395,"user_tz":240,"elapsed":33000,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"d32704e0-2b71-4f63-fb38-70e9b9dc5d96"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(random_state=42)"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":14}],"source":["from sklearn.ensemble import RandomForestRegressor\n","\n","# Random Forest Regressor\n","random_forest_model = RandomForestRegressor(n_estimators=100, random_state=42)\n","random_forest_model.fit(X_train_np, y_train_np)"]},{"cell_type":"code","source":["# Model Evaluation\n","y_pred_rf = random_forest_model.predict(X_test_np)\n","mse_rf = mean_squared_error(y_test_np, y_pred_rf)\n","rmse_rf = np.sqrt(mse_rf)\n","print(f\"Random Forest Regression RMSE: {rmse_rf}\")\n"],"metadata":{"id":"MRwfAz4fnU0l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715283320395,"user_tz":240,"elapsed":5,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"67a7303f-fa41-46ce-e4d6-e92efc12799c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Regression RMSE: 0.07965500925043296\n"]}]},{"cell_type":"markdown","source":["#Support Vector Regressor(SVR)"],"metadata":{"id":"Zpfyzw0NmSWL"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"yvJrJKU1evXM","executionInfo":{"status":"ok","timestamp":1715283358703,"user_tz":240,"elapsed":38312,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"e9b06358-6df4-4eb6-d9e1-18e6a2ad3d85"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVR()"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVR()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":16}],"source":["from sklearn.svm import SVR\n","\n","# Support Vector Regressor(SVR)\n","svr_model = SVR(kernel='rbf')\n","svr_model.fit(X_train_np, y_train_np)"]},{"cell_type":"code","source":["#Model Evaluation\n","y_pred_svr = svr_model.predict(X_test_np)\n","mse_svr = mean_squared_error(y_test_np, y_pred_svr)\n","rmse_svr = np.sqrt(mse_svr)\n","print(f\"Support Vector Regression RMSE: {rmse_svr}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UDbKMWuhndUV","executionInfo":{"status":"ok","timestamp":1715283371608,"user_tz":240,"elapsed":12908,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"f58b1c6b-7a37-4433-ab46-2424613846f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Support Vector Regression RMSE: 0.12134103184811038\n"]}]},{"cell_type":"markdown","metadata":{"id":"XwaeiKLLvcou"},"source":["##The best model: based on the information provided, the Random Forest model achieved the best performance with a Root Mean Square Error (RMSE) of approximately 0.08092192965975098, compared to the other models evaluated."]},{"cell_type":"markdown","source":["#Evaluation"],"metadata":{"id":"msUraaVwmi2P"}},{"cell_type":"code","source":["merged_df = pd.read_csv(\"/content/drive/MyDrive/processed_data.csv\")\n","merged_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":548},"id":"wZIXsmRSusJb","executionInfo":{"status":"ok","timestamp":1715880273210,"user_tz":240,"elapsed":842,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"8a6c8a29-424d-44e2-da0d-7dd5da8592ed"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-23762dddbdcf>:1: DtypeWarning: Columns (2,3,4) have mixed types. Specify dtype option on import or set low_memory=False.\n","  merged_df = pd.read_csv(\"/content/drive/MyDrive/processed_data.csv\")\n"]},{"output_type":"execute_result","data":{"text/plain":["                  Geography                        Geographic Area Name  \\\n","0      1400000US53001950100      CensusTract9501,AdamsCounty,Washington   \n","1      1400000US53001950100      CensusTract9501,AdamsCounty,Washington   \n","2      1400000US53001950100      CensusTract9501,AdamsCounty,Washington   \n","3      1400000US53001950100      CensusTract9501,AdamsCounty,Washington   \n","4      1400000US53001950100      CensusTract9501,AdamsCounty,Washington   \n","...                     ...                                         ...   \n","46234  1400000US53077940007  CensusTract9400.07,YakimaCounty,Washington   \n","46235  1400000US53077940007  CensusTract9400.07,YakimaCounty,Washington   \n","46236  1400000US53077940007  CensusTract9400.07,YakimaCounty,Washington   \n","46237  1400000US53077940008  CensusTract9400.08,YakimaCounty,Washington   \n","46238  1400000US53077940008  CensusTract9400.08,YakimaCounty,Washington   \n","\n","      Estimate!!Households!!Median income (dollars)  \\\n","0                                             52589   \n","1                                             52589   \n","2                                             52589   \n","3                                             52589   \n","4                                             52589   \n","...                                             ...   \n","46234                                         43721   \n","46235                                         43721   \n","46236                                         43721   \n","46237                                         43135   \n","46238                                         43135   \n","\n","      Estimate!!Families!!Median income (dollars)  \\\n","0                                           70244   \n","1                                           70244   \n","2                                           70244   \n","3                                           70244   \n","4                                           70244   \n","...                                           ...   \n","46234                                       43924   \n","46235                                       43924   \n","46236                                       43924   \n","46237                                       44098   \n","46238                                       44098   \n","\n","      Estimate!!Married-couple families!!Median income (dollars)  \\\n","0                                                  73250           \n","1                                                  73250           \n","2                                                  73250           \n","3                                                  73250           \n","4                                                  73250           \n","...                                                  ...           \n","46234                                              46533           \n","46235                                              46533           \n","46236                                              46533           \n","46237                                              46125           \n","46238                                              46125           \n","\n","       Estimate!!Nonfamily households!!Median income (dollars)  \\\n","0                                                  27684         \n","1                                                  27684         \n","2                                                  27684         \n","3                                                  27684         \n","4                                                  27684         \n","...                                                  ...         \n","46234                                              21851         \n","46235                                              21851         \n","46236                                              21851         \n","46237                                              13650         \n","46238                                              13650         \n","\n","       House Hold Less than $50,000  House Hold $50,000 to $99,999  \\\n","0                              48.2                           31.5   \n","1                              48.2                           31.5   \n","2                              48.2                           31.5   \n","3                              48.2                           31.5   \n","4                              48.2                           31.5   \n","...                             ...                            ...   \n","46234                          58.2                           29.0   \n","46235                          58.2                           29.0   \n","46236                          58.2                           29.0   \n","46237                          61.5                           23.0   \n","46238                          61.5                           23.0   \n","\n","       House Hold $100,000 to $149,999  House Hold $150,000 to $199,999  ...  \\\n","0                                 11.5                              8.2  ...   \n","1                                 11.5                              8.2  ...   \n","2                                 11.5                              8.2  ...   \n","3                                 11.5                              8.2  ...   \n","4                                 11.5                              8.2  ...   \n","...                                ...                              ...  ...   \n","46234                              8.1                              2.5  ...   \n","46235                              8.1                              2.5  ...   \n","46236                              8.1                              2.5  ...   \n","46237                             10.0                              3.9  ...   \n","46238                             10.0                              3.9  ...   \n","\n","       Married-couple Families $200,000 or more  \\\n","0                                           1.5   \n","1                                           1.5   \n","2                                           1.5   \n","3                                           1.5   \n","4                                           1.5   \n","...                                         ...   \n","46234                                       0.0   \n","46235                                       0.0   \n","46236                                       0.0   \n","46237                                       0.0   \n","46238                                       0.0   \n","\n","       Nonfamily households Less than $50,000  \\\n","0                                        69.6   \n","1                                        69.6   \n","2                                        69.6   \n","3                                        69.6   \n","4                                        69.6   \n","...                                       ...   \n","46234                                    68.1   \n","46235                                    68.1   \n","46236                                    68.1   \n","46237                                    90.4   \n","46238                                    90.4   \n","\n","       Nonfamily households $50,000 to $99,999  \\\n","0                                         18.8   \n","1                                         18.8   \n","2                                         18.8   \n","3                                         18.8   \n","4                                         18.8   \n","...                                        ...   \n","46234                                     27.4   \n","46235                                     27.4   \n","46236                                     27.4   \n","46237                                      9.6   \n","46238                                      9.6   \n","\n","       Nonfamily households $100,000 to 149,999  \\\n","0                                           2.9   \n","1                                           2.9   \n","2                                           2.9   \n","3                                           2.9   \n","4                                           2.9   \n","...                                         ...   \n","46234                                       4.6   \n","46235                                       4.6   \n","46236                                       4.6   \n","46237                                       0.0   \n","46238                                       0.0   \n","\n","       Nonfamily households $150,000 to $199,999  \\\n","0                                            8.8   \n","1                                            8.8   \n","2                                            8.8   \n","3                                            8.8   \n","4                                            8.8   \n","...                                          ...   \n","46234                                        0.0   \n","46235                                        0.0   \n","46236                                        0.0   \n","46237                                        0.0   \n","46238                                        0.0   \n","\n","       Nonfamily households $200,000 or more  Vote Count  Precinct  County  \\\n","0                                        0.0       15611     BATUM   ADAMS   \n","1                                        0.0       15612     BATUM   ADAMS   \n","2                                        0.0       15613     BATUM   ADAMS   \n","3                                        0.0       15614     BATUM   ADAMS   \n","4                                        0.0       15615     BATUM   ADAMS   \n","...                                      ...         ...       ...     ...   \n","46234                                    0.0       24159      2501  YAKIMA   \n","46235                                    0.0       24160      2501  YAKIMA   \n","46236                                    0.0       24161      2501  YAKIMA   \n","46237                                    0.0       24162      2502  YAKIMA   \n","46238                                    0.0       24163      2502  YAKIMA   \n","\n","       average_Biden_proportion  \n","0                      0.227982  \n","1                      0.227982  \n","2                      0.227982  \n","3                      0.227982  \n","4                      0.227982  \n","...                         ...  \n","46234                  0.809287  \n","46235                  0.809287  \n","46236                  0.809287  \n","46237                  0.846154  \n","46238                  0.846154  \n","\n","[46239 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-fc1b87f1-66cc-4ef8-b2e4-8593937d66e2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Geography</th>\n","      <th>Geographic Area Name</th>\n","      <th>Estimate!!Households!!Median income (dollars)</th>\n","      <th>Estimate!!Families!!Median income (dollars)</th>\n","      <th>Estimate!!Married-couple families!!Median income (dollars)</th>\n","      <th>Estimate!!Nonfamily households!!Median income (dollars)</th>\n","      <th>House Hold Less than $50,000</th>\n","      <th>House Hold $50,000 to $99,999</th>\n","      <th>House Hold $100,000 to $149,999</th>\n","      <th>House Hold $150,000 to $199,999</th>\n","      <th>...</th>\n","      <th>Married-couple Families $200,000 or more</th>\n","      <th>Nonfamily households Less than $50,000</th>\n","      <th>Nonfamily households $50,000 to $99,999</th>\n","      <th>Nonfamily households $100,000 to 149,999</th>\n","      <th>Nonfamily households $150,000 to $199,999</th>\n","      <th>Nonfamily households $200,000 or more</th>\n","      <th>Vote Count</th>\n","      <th>Precinct</th>\n","      <th>County</th>\n","      <th>average_Biden_proportion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1400000US53001950100</td>\n","      <td>CensusTract9501,AdamsCounty,Washington</td>\n","      <td>52589</td>\n","      <td>70244</td>\n","      <td>73250</td>\n","      <td>27684</td>\n","      <td>48.2</td>\n","      <td>31.5</td>\n","      <td>11.5</td>\n","      <td>8.2</td>\n","      <td>...</td>\n","      <td>1.5</td>\n","      <td>69.6</td>\n","      <td>18.8</td>\n","      <td>2.9</td>\n","      <td>8.8</td>\n","      <td>0.0</td>\n","      <td>15611</td>\n","      <td>BATUM</td>\n","      <td>ADAMS</td>\n","      <td>0.227982</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1400000US53001950100</td>\n","      <td>CensusTract9501,AdamsCounty,Washington</td>\n","      <td>52589</td>\n","      <td>70244</td>\n","      <td>73250</td>\n","      <td>27684</td>\n","      <td>48.2</td>\n","      <td>31.5</td>\n","      <td>11.5</td>\n","      <td>8.2</td>\n","      <td>...</td>\n","      <td>1.5</td>\n","      <td>69.6</td>\n","      <td>18.8</td>\n","      <td>2.9</td>\n","      <td>8.8</td>\n","      <td>0.0</td>\n","      <td>15612</td>\n","      <td>BATUM</td>\n","      <td>ADAMS</td>\n","      <td>0.227982</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1400000US53001950100</td>\n","      <td>CensusTract9501,AdamsCounty,Washington</td>\n","      <td>52589</td>\n","      <td>70244</td>\n","      <td>73250</td>\n","      <td>27684</td>\n","      <td>48.2</td>\n","      <td>31.5</td>\n","      <td>11.5</td>\n","      <td>8.2</td>\n","      <td>...</td>\n","      <td>1.5</td>\n","      <td>69.6</td>\n","      <td>18.8</td>\n","      <td>2.9</td>\n","      <td>8.8</td>\n","      <td>0.0</td>\n","      <td>15613</td>\n","      <td>BATUM</td>\n","      <td>ADAMS</td>\n","      <td>0.227982</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1400000US53001950100</td>\n","      <td>CensusTract9501,AdamsCounty,Washington</td>\n","      <td>52589</td>\n","      <td>70244</td>\n","      <td>73250</td>\n","      <td>27684</td>\n","      <td>48.2</td>\n","      <td>31.5</td>\n","      <td>11.5</td>\n","      <td>8.2</td>\n","      <td>...</td>\n","      <td>1.5</td>\n","      <td>69.6</td>\n","      <td>18.8</td>\n","      <td>2.9</td>\n","      <td>8.8</td>\n","      <td>0.0</td>\n","      <td>15614</td>\n","      <td>BATUM</td>\n","      <td>ADAMS</td>\n","      <td>0.227982</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1400000US53001950100</td>\n","      <td>CensusTract9501,AdamsCounty,Washington</td>\n","      <td>52589</td>\n","      <td>70244</td>\n","      <td>73250</td>\n","      <td>27684</td>\n","      <td>48.2</td>\n","      <td>31.5</td>\n","      <td>11.5</td>\n","      <td>8.2</td>\n","      <td>...</td>\n","      <td>1.5</td>\n","      <td>69.6</td>\n","      <td>18.8</td>\n","      <td>2.9</td>\n","      <td>8.8</td>\n","      <td>0.0</td>\n","      <td>15615</td>\n","      <td>BATUM</td>\n","      <td>ADAMS</td>\n","      <td>0.227982</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>46234</th>\n","      <td>1400000US53077940007</td>\n","      <td>CensusTract9400.07,YakimaCounty,Washington</td>\n","      <td>43721</td>\n","      <td>43924</td>\n","      <td>46533</td>\n","      <td>21851</td>\n","      <td>58.2</td>\n","      <td>29.0</td>\n","      <td>8.1</td>\n","      <td>2.5</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>68.1</td>\n","      <td>27.4</td>\n","      <td>4.6</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>24159</td>\n","      <td>2501</td>\n","      <td>YAKIMA</td>\n","      <td>0.809287</td>\n","    </tr>\n","    <tr>\n","      <th>46235</th>\n","      <td>1400000US53077940007</td>\n","      <td>CensusTract9400.07,YakimaCounty,Washington</td>\n","      <td>43721</td>\n","      <td>43924</td>\n","      <td>46533</td>\n","      <td>21851</td>\n","      <td>58.2</td>\n","      <td>29.0</td>\n","      <td>8.1</td>\n","      <td>2.5</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>68.1</td>\n","      <td>27.4</td>\n","      <td>4.6</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>24160</td>\n","      <td>2501</td>\n","      <td>YAKIMA</td>\n","      <td>0.809287</td>\n","    </tr>\n","    <tr>\n","      <th>46236</th>\n","      <td>1400000US53077940007</td>\n","      <td>CensusTract9400.07,YakimaCounty,Washington</td>\n","      <td>43721</td>\n","      <td>43924</td>\n","      <td>46533</td>\n","      <td>21851</td>\n","      <td>58.2</td>\n","      <td>29.0</td>\n","      <td>8.1</td>\n","      <td>2.5</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>68.1</td>\n","      <td>27.4</td>\n","      <td>4.6</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>24161</td>\n","      <td>2501</td>\n","      <td>YAKIMA</td>\n","      <td>0.809287</td>\n","    </tr>\n","    <tr>\n","      <th>46237</th>\n","      <td>1400000US53077940008</td>\n","      <td>CensusTract9400.08,YakimaCounty,Washington</td>\n","      <td>43135</td>\n","      <td>44098</td>\n","      <td>46125</td>\n","      <td>13650</td>\n","      <td>61.5</td>\n","      <td>23.0</td>\n","      <td>10.0</td>\n","      <td>3.9</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>90.4</td>\n","      <td>9.6</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>24162</td>\n","      <td>2502</td>\n","      <td>YAKIMA</td>\n","      <td>0.846154</td>\n","    </tr>\n","    <tr>\n","      <th>46238</th>\n","      <td>1400000US53077940008</td>\n","      <td>CensusTract9400.08,YakimaCounty,Washington</td>\n","      <td>43135</td>\n","      <td>44098</td>\n","      <td>46125</td>\n","      <td>13650</td>\n","      <td>61.5</td>\n","      <td>23.0</td>\n","      <td>10.0</td>\n","      <td>3.9</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>90.4</td>\n","      <td>9.6</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>24163</td>\n","      <td>2502</td>\n","      <td>YAKIMA</td>\n","      <td>0.846154</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>46239 rows × 30 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc1b87f1-66cc-4ef8-b2e4-8593937d66e2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fc1b87f1-66cc-4ef8-b2e4-8593937d66e2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fc1b87f1-66cc-4ef8-b2e4-8593937d66e2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e55eb8bd-b4fe-4f6c-b26c-5b2cf547d3e4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e55eb8bd-b4fe-4f6c-b26c-5b2cf547d3e4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e55eb8bd-b4fe-4f6c-b26c-5b2cf547d3e4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_90b5b698-46c8-4081-9b02-601ed503290f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('merged_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_90b5b698-46c8-4081-9b02-601ed503290f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('merged_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"merged_df"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["class CountyDataset2(Dataset):\n","    def __init__(self, finaldata):\n","        f =  finaldata.drop(columns=['Geography', 'Geographic Area Name','Precinct','County', 'Vote Count','Estimate!!Households!!Median income (dollars)','average_Biden_proportion',\n","                            'Estimate!!Families!!Median income (dollars)','Estimate!!Nonfamily households!!Median income (dollars)', 'Estimate!!Married-couple families!!Median income (dollars)']).astype(float)\n","        self.X = f.values.tolist()\n","        self.y = finaldata['average_Biden_proportion'].tolist()\n","        self.county_info = finaldata['County'].tolist()\n","\n","    def __len__(self):\n","        return len(self.X)\n","\n","    def __getitem__(self, idx):\n","        return torch.tensor(self.X[idx], dtype=torch.float32), torch.tensor(self.y[idx], dtype=torch.float32), self.county_info[idx]\n"],"metadata":{"id":"O-19L1ZKm6SV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define the CountyDataLoader class\n","class CountyDataLoader:\n","    def __init__(self, dataset, random_state=None):\n","        self.dataset = dataset\n","        self.counties = list(set(dataset.county_info))\n","        self.random_state = random_state\n","\n","    def __iter__(self):\n","        for county in self.counties:\n","            county_indices = [i for i, c in enumerate(self.dataset.county_info) if c == county]\n","            batch_X = [self.dataset.X[i] for i in county_indices]\n","            batch_y = [self.dataset.y[i] for i in county_indices]\n","            yield batch_X, batch_y\n"],"metadata":{"id":"br6YIIsdz7wo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset_evaluation = CountyDataset2(merged_df)\n","county_dataloader2 = CountyDataLoader(dataset_evaluation)"],"metadata":{"id":"UAtxUBACm-XJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","model = RandomForestRegressor()"],"metadata":{"id":"XHZjkOr35YRh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":110},"id":"ih3xwub55bp-","executionInfo":{"status":"ok","timestamp":1715283400615,"user_tz":240,"elapsed":27676,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"016b8f01-55c2-4544-9c3b-06f841e4aedd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-23-d768f88d541e>:1: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  model.fit(X_train, y_train)\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor()"],"text/html":["<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jhN7QYMHSbym","executionInfo":{"status":"ok","timestamp":1715283416419,"user_tz":240,"elapsed":15807,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"28f5e2ee-fbd0-407e-9355-4eea242403c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Regression RMSE: 0.07966222594042138\n","Evaluation took 0.20445466041564941 seconds\n"]}],"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.ensemble import RandomForestRegressor\n","import numpy as np\n","import time\n","\n","# RandomForestRegressor model trian\n","model = RandomForestRegressor()\n","model.fit(X_train_np, y_train_np.ravel())  # .ravel()을 사용하여 y_train을 1차원 배열로 변환\n","\n","start_time = time.time()\n","\n","# All test set\n","y_pred = model.predict(X_test_np)\n","\n","# Model consume\n","end_time = time.time()\n","\n","# RMSE calculation\n","mse = mean_squared_error(y_test_np, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Result\n","print(f'Random Forest Regression RMSE: {rmse}')\n","print(f'Evaluation took {end_time - start_time} seconds')"]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","from sklearn.model_selection import cross_val_score\n","\n","# 모델 정의\n","model = RandomForestRegressor()\n","\n","# cross_val_score\n","scores = cross_val_score(model, X_train_np, y_train_np, cv=5, scoring='neg_root_mean_squared_error')\n","\n","# 교차검증으로부터의 RMSE 점수 출력 (neg_root_mean_squared_error는 음수 값으로 반환됨으로, 부호를 변경합니다)\n","print(\"RMSE scores:\", -scores)\n","print(\"Average RMSE:\", -scores.mean())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YjvEWDxsHQNQ","executionInfo":{"status":"ok","timestamp":1715283487665,"user_tz":240,"elapsed":71267,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"bd33e509-e7d6-423f-9f0d-3400bdf5402a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE scores: [0.08162829 0.08064719 0.07879809 0.0783498  0.07915264]\n","Average RMSE: 0.07971520476185841\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt"],"metadata":{"id":"eDYu4OLV2Ggq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 예측 값과 실제 값의 분포 시각화\n","plt.scatter(y_test_np, y_pred, alpha=0.5)\n","plt.xlabel('Actual values')\n","plt.ylabel('Predicted values')\n","plt.title('Actual vs Predicted values')\n","plt.plot([min(y_test_np), max(y_test_np)], [min(y_test_np), max(y_test_np)], 'r')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"8nyD6EyY0EnB","executionInfo":{"status":"ok","timestamp":1715283488559,"user_tz":240,"elapsed":898,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"99fb95b4-cd7b-469f-af45-9b54c3b47115"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["The Random Forest Regression model demonstrated the best predictive performance compared to other models. With an RMSE value of 0.0797, it showed the lowest prediction error, indicating a smaller average difference between the predicted and actual values. Additionally, cross-validation confirmed the model's consistency and reliability.\n","\n","These results suggest that the Random Forest model effectively learns from various feature variables and captures the complex relationships within the data, leading to accurate predictions of the Biden proportion. Therefore, it is reasonable to select the Random Forest Regression model as the optimal model for this project."],"metadata":{"id":"z3FZVSz_c0xW"}}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"15Xf7fukMFmOL0q60cKKGY6WqQU6349RX","timestamp":1710712944084},{"file_id":"1lTdTlzIY-n4TrXe2P09o54Y1VUN7bN7P","timestamp":1706910303427}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
{"cells":[{"cell_type":"markdown","source":["#Recall the Data from Previous Code(Same with 240308 YB Voting_modeling)"],"metadata":{"id":"YMU3mp_KdhXM"}},{"cell_type":"markdown","metadata":{"id":"rUaTK5H3mLXR"},"source":["##Recall the Data"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31113,"status":"ok","timestamp":1715881046091,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"fBhyqe_BBPSp","outputId":"48e73a79-15dc-48d4-e529-952bb1b3b5ee"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.25.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.15.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.11.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.63.0)\n","Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.2)\n","Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.27.0)\n","Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (5.3.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.4.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.5)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.6.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\n","2.2.1+cu121\n"]}],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import torchvision.datasets as datasets\n","import torchvision.transforms as transforms\n","import random\n","from torch.utils.data import Dataset, DataLoader\n","import pandas as pd\n","!pip install pandas numpy scikit-learn tensorflow\n","import pandas as pd\n","from sklearn.preprocessing import StandardScaler\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","print(torch.__version__)"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25228,"status":"ok","timestamp":1715881071314,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"1rsTqBZBeOrX","outputId":"8a311eca-7e3b-43d7-b161-83049dde700a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3377,"status":"ok","timestamp":1715881074688,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"Se53dGmgkI38","outputId":"376a4c9c-0ea5-46d6-fdb8-9b099ea163be"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-7f905cc06cbe>:1: DtypeWarning: Columns (2,3,4) have mixed types. Specify dtype option on import or set low_memory=False.\n","  finaldata = pd.read_csv(\"/content/drive/MyDrive/capstone_yb/Voting ML/DATA/cleaned_finaldata.csv\")\n"]}],"source":["finaldata = pd.read_csv(\"/content/drive/MyDrive/capstone_yb/Voting ML/DATA/cleaned_finaldata.csv\")"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1715881074689,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"Kid0PrNN4tye","outputId":"cb6b5d8a-9638-4ea3-bca4-a000642da50c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["House Hold Less than $50,000                    float64\n","House Hold $50,000 to $99,999                   float64\n","House Hold $100,000 to $149,999                 float64\n","House Hold $150,000 to $199,999                 float64\n","House Hold $200,000 or more                     float64\n","Families Less than $50,000                      float64\n","Families $50,000 to $99,999                     float64\n","Families $100,000 to 149,999                    float64\n","Families $150,000 to $199,999                   float64\n","Families $200,000 or more                       float64\n","Married-couple Families Less than $50,000       float64\n","Married-couple Families $50,000 to $99,999      float64\n","Married-couple Families $100,000 to 149,999     float64\n","Married-couple Families $150,000 to $199,999    float64\n","Married-couple Families $200,000 or more        float64\n","Nonfamily households Less than $50,000          float64\n","Nonfamily households $50,000 to $99,999         float64\n","Nonfamily households $100,000 to 149,999        float64\n","Nonfamily households $150,000 to $199,999       float64\n","Nonfamily households $200,000 or more           float64\n","dtype: object"]},"metadata":{},"execution_count":4}],"source":["X = finaldata.drop(columns=['Geography', 'Geographic Area Name','Biden_proportion','Estimate!!Households!!Median income (dollars)','Vote Count', 'Precinct','County',\n","                            'Estimate!!Families!!Median income (dollars)','Estimate!!Nonfamily households!!Median income (dollars)', 'Estimate!!Married-couple families!!Median income (dollars)'])\n","X = X.astype(float)\n","X.dtypes"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":17,"status":"ok","timestamp":1715881074689,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"NjC0YvPY4xb_"},"outputs":[],"source":["y = finaldata['Biden_proportion']"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1715881074689,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"DpsiHsiq5ODV"},"outputs":[],"source":["import copy\n","import tqdm\n","from sklearn.model_selection import train_test_split\n","\n","\n","# train-test split of the dataset / chaning split of data to Pytorch\n","X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True)\n","X_train = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train = torch.tensor(y_train.values, dtype=torch.float32).reshape(-1, 1)\n","X_test = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test = torch.tensor(y_test.values, dtype=torch.float32).reshape(-1, 1)\n"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1715881074689,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"ci6tKcDL7cGB","outputId":"32434bb7-ce12-4a1a-a598-e6cd5da08460"},"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([36754, 20])\n","torch.Size([36754, 1])\n"]}],"source":["print(X_train.shape)\n","print(y_train.shape)"]},{"cell_type":"markdown","metadata":{"id":"aqi1L_J9lghk"},"source":["##Simple NN"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1715881074689,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"xjSDGThrlW-1"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":324,"status":"ok","timestamp":1715881099920,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"zWh43mzHlqhh"},"outputs":[],"source":["# Define the neural network class\n","'''class SimpleNN(nn.Module):\n","    def __init__(self):\n","        super(SimpleNN, self).__init__()\n","        self.fc1 = nn.Linear(20, 32)\n","        self.fc2 = nn.Linear(32, 1)\n","        self.relu = nn.ReLU()''from sklearn.model_selection import train_test_split'''\n","\n","class DeepNN(nn.Module):\n","    def __init__(self):\n","        super(DeepNN, self).__init__()\n","        self.fc1 = nn.Linear(20, 32)  # Input layer\n","        self.bn1 = nn.BatchNorm1d(32)  # Batch normalization after first linear layer\n","        self.fc2 = nn.Linear(32, 64)  # First hidden layer\n","        self.bn2 = nn.BatchNorm1d(64)  # Batch normalization after second linear layer\n","        self.dropout = nn.Dropout(0.5)  # Dropout for regularization\n","        self.fc3 = nn.Linear(64, 64)  # Second hidden layer\n","        self.bn3 = nn.BatchNorm1d(64)  # Batch normalization after third linear layer\n","        self.fc4 = nn.Linear(64, 1)    # Output layer\n","        self.relu = nn.ReLU()  # ReLU activation used throughout\n","\n","    def forward(self, x):\n","        x = self.relu(self.bn1(self.fc1(x)))  # Activation -> BatchNorm\n","        x = self.relu(self.bn2(self.fc2(x)))  # Activation -> BatchNorm\n","        x = self.dropout(x)  # Applying dropout after activation\n","        x = self.relu(self.bn3(self.fc3(x)))  # Activation -> BatchNorm\n","        x = self.fc4(x)  # Output layer does not need activation if regression\n","        return x\n","\n","# Instantiate the model\n","model = DeepNN()\n","\n"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":325,"status":"ok","timestamp":1715881110457,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"kqmcwWP1Wmsn","outputId":"f94386f9-4444-4791-b399-95fd56228a75"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["39"]},"metadata":{},"execution_count":10}],"source":["county_info = finaldata['County'].unique().tolist()\n","len(county_info)"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1715881112779,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"GHwEJe1_mlPr"},"outputs":[],"source":["class CountyDataset(Dataset): #classcification\n","    def __init__(self, finaldata):\n","        f =  finaldata.drop(columns=['Geography', 'Geographic Area Name','Biden_proportion','Estimate!!Households!!Median income (dollars)','Vote Count', 'Precinct','County',\n","                            'Estimate!!Families!!Median income (dollars)','Estimate!!Nonfamily households!!Median income (dollars)', 'Estimate!!Married-couple families!!Median income (dollars)']).astype(float)\n","        self.X = f.values.tolist()\n","        self.y = finaldata['Biden_proportion'].tolist()\n","        self.county_info = finaldata['County'].tolist()\n","\n","    def __len__(self):\n","        return len(self.X)\n","\n","    def __getitem__(self, idx):\n","        return torch.tensor(self.X[idx], dtype=torch.float32), torch.tensor(self.y[idx], dtype=torch.float32), self.county_info[idx]"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1715881114436,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"8KYDOAiaxaWT"},"outputs":[],"source":["dataset = CountyDataset(finaldata)"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1715881116602,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"iIjWzjpNxeFG"},"outputs":[],"source":["class CountyDataLoader: #load the data with county\n","    def __init__(self, dataset, random_state=None):\n","        self.dataset = dataset\n","        self.counties = list(set(dataset.county_info))\n","        self.random_state = random_state\n","\n","    def __iter__(self): #load the data with each county\n","        for county in self.counties:\n","            county_indices = [i for i, c in enumerate(self.dataset.county_info) if c == county]\n","            batch_X = [self.dataset.X[i] for i in county_indices]\n","            batch_y = [self.dataset.y[i] for i in county_indices]\n","            yield batch_X, batch_y"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1715881120445,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"57rqMn10vXct"},"outputs":[],"source":["county_dataloader = CountyDataLoader(dataset)"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":1,"status":"ok","timestamp":1715881125044,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"mjO-CP7i0zl8"},"outputs":[],"source":["# Define the custom loss function\n","def custom_loss(predictions, county_statistics):\n","    # Calculate the average prediction within the batch\n","    avg_prediction = torch.mean(predictions)\n","\n","    # Assume county_statistics is a tuple containing the required statistics (e.g., Biden proportion)\n","    biden_proportion = county_statistics[0]\n","\n","    # Calculate the MSE loss(Mean Squared Error)\n","    mse_loss = nn.MSELoss()(avg_prediction, biden_proportion)\n","\n","    return mse_loss"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1715881131128,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"},"user_tz":240},"id":"HsKsJA30vZ5O"},"outputs":[],"source":["# Define the loss function\n","class LossFunction(nn.Module):\n","    def __init__(self):\n","        super(LossFunction, self).__init__()\n","\n","    def forward(self, predictions, mean_l): #calculate MSE\n","        mean_p = torch.mean(predictions)\n","        mean_l = torch.tensor(mean_l, dtype=torch.float32)\n","\n","        return torch.square(mean_p - mean_l)"]},{"cell_type":"markdown","metadata":{"id":"wnRg68FBkpKX"},"source":["##Optimizer: SGD"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y-3RyCZ4knf6","executionInfo":{"status":"ok","timestamp":1715881397792,"user_tz":240,"elapsed":253024,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"17c6b699-d644-482d-e7f5-d973157e0f22"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [1/500], Loss: 0.01302518229931593\n","Epoch [11/500], Loss: 0.08523343503475189\n","Epoch [21/500], Loss: 0.07944434881210327\n","Epoch [31/500], Loss: 0.08551271259784698\n","Epoch [41/500], Loss: 0.08335608243942261\n","Epoch [51/500], Loss: 0.08095717430114746\n","Epoch [61/500], Loss: 0.07192844897508621\n","Epoch [71/500], Loss: 0.08271244913339615\n","Epoch [81/500], Loss: 0.07977677136659622\n","Epoch [91/500], Loss: 0.08216767758131027\n","Epoch [101/500], Loss: 0.08413773030042648\n","Epoch [111/500], Loss: 0.07948003709316254\n","Epoch [121/500], Loss: 0.07656210660934448\n","Epoch [131/500], Loss: 0.07463829219341278\n","Epoch [141/500], Loss: 0.07976198941469193\n","Epoch [151/500], Loss: 0.07490597665309906\n","Epoch [161/500], Loss: 0.07840202003717422\n","Epoch [171/500], Loss: 0.0693058967590332\n","Epoch [181/500], Loss: 0.06641805917024612\n","Epoch [191/500], Loss: 0.07335278391838074\n","Epoch [201/500], Loss: 0.07243935763835907\n","Epoch [211/500], Loss: 0.07212821394205093\n","Epoch [221/500], Loss: 0.0739317461848259\n","Epoch [231/500], Loss: 0.07047996670007706\n","Epoch [241/500], Loss: 0.07436932623386383\n","Epoch [251/500], Loss: 0.07277049869298935\n","Epoch [261/500], Loss: 0.07114416360855103\n","Epoch [271/500], Loss: 0.062292128801345825\n","Epoch [281/500], Loss: 0.07056920975446701\n","Epoch [291/500], Loss: 0.06331285834312439\n","Epoch [301/500], Loss: 0.062149934470653534\n","Epoch [311/500], Loss: 0.0742264837026596\n","Epoch [321/500], Loss: 0.07573241740465164\n","Epoch [331/500], Loss: 0.06339138746261597\n","Epoch [341/500], Loss: 0.06735861301422119\n","Epoch [351/500], Loss: 0.07299471646547318\n","Epoch [361/500], Loss: 0.06212495639920235\n","Epoch [371/500], Loss: 0.06718888878822327\n","Epoch [381/500], Loss: 0.06540223956108093\n","Epoch [391/500], Loss: 0.05971124768257141\n","Epoch [401/500], Loss: 0.06088664382696152\n","Epoch [411/500], Loss: 0.0605137012898922\n","Epoch [421/500], Loss: 0.06538218259811401\n","Epoch [431/500], Loss: 0.0729387179017067\n","Epoch [441/500], Loss: 0.06583008170127869\n","Epoch [451/500], Loss: 0.06813642382621765\n","Epoch [461/500], Loss: 0.059371381998062134\n","Epoch [471/500], Loss: 0.06137997284531593\n","Epoch [481/500], Loss: 0.06890474259853363\n","Epoch [491/500], Loss: 0.06251323223114014\n"]}],"source":["optimizer = torch.optim.SGD(model.parameters(), lr=0.001)\n","import torch\n","num_epochs = 500\n","losses = []\n","for epoch in range(num_epochs):\n","    for i,(train_X, train_y)  in enumerate(county_dataloader):\n","      epoch_loss = 0.0\n","      if i<32:\n","\n","        # Convert lists to PyTorch tensors\n","        features = torch.tensor(train_X)\n","        target = torch.tensor(train_y)\n","\n","        # Forward pass, loss computation, and backward pass\n","        outputs = model(features)\n","        # print(outputs) # issue here\n","        loss = custom_loss(outputs, target)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        epoch_loss += loss.item()\n","        average_epoch_loss = epoch_loss /50\n","       # losses.append(loss.item())\n","        losses.append(average_epoch_loss)\n","\n","    if epoch % 10 == 0:\n","        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"4rb1gTaukve7","executionInfo":{"status":"ok","timestamp":1715881404031,"user_tz":240,"elapsed":2,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}}},"outputs":[],"source":["import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"eXRVYbM-kuOM","outputId":"4a176ff0-ae13-41a0-e76b-4ebc441f3710","executionInfo":{"status":"ok","timestamp":1715881404881,"user_tz":240,"elapsed":10,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.plot(losses[10:], label='Training Loss') #The code plots only the data points for the training loss after excluding the first 10 epochs.\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","source":["model.eval()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0lpvybleUUeV","executionInfo":{"status":"ok","timestamp":1715881409001,"user_tz":240,"elapsed":3,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"9f310355-57b1-40a3-aa27-20760ced9554"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeepNN(\n","  (fc1): Linear(in_features=20, out_features=32, bias=True)\n","  (bn1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (fc2): Linear(in_features=32, out_features=64, bias=True)\n","  (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (dropout): Dropout(p=0.5, inplace=False)\n","  (fc3): Linear(in_features=64, out_features=64, bias=True)\n","  (bn3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (fc4): Linear(in_features=64, out_features=1, bias=True)\n","  (relu): ReLU()\n",")"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["#Different Evaluation: Model evaluation metrics:\n","1. Cross-validation\n","2. RMSE on tract-level data, MAE\n","3. R^2\n","\n","\n"],"metadata":{"id":"GR3vIbxlUJ__"}},{"cell_type":"code","source":["import numpy as np\n","import time\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","\n","# 초기화\n","rmse_scores = []\n","mae_scores = []\n","r2_scores = []\n","num_batches = 0\n","losses = []\n","timestamps = []\n","\n","for i, (val_X, val_y) in enumerate(county_dataloader):\n","    if i >= 32:\n","        start_time = time.time()\n","\n","        features = torch.tensor(val_X)\n","        target = torch.tensor(val_y)\n","\n","        model.train()\n","        outputs = model(features)\n","\n","        # Loss\n","        loss = custom_loss(outputs, target)\n","        losses.append(loss.item())\n","\n","        # RMSE, MAE, R^2\n","        actuals = target.cpu().numpy()  # Actual\n","        predictions = outputs.detach().cpu().numpy()  # Prediction\n","        rmse_scores.append(np.sqrt(mean_squared_error(actuals, predictions)))\n","        mae_scores.append(mean_absolute_error(actuals, predictions))\n","        r2_scores.append(r2_score(actuals, predictions))\n","\n","        # Optimizer backing and Zero\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        # Recoding the time\n","        end_time = time.time()\n","        timestamps.append(end_time - start_time)\n","        num_batches += 1\n","\n","# Evaluation\n","print(\"Average RMSE:\", np.mean(rmse_scores))\n","print(\"Average MAE:\", np.mean(mae_scores))\n","print(\"Average R^2:\", np.mean(r2_scores))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aZQetgqeYf1U","executionInfo":{"status":"ok","timestamp":1715881413920,"user_tz":240,"elapsed":400,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"1a16733c-c1f0-4b82-ec86-9d38c1f74b9a"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Average RMSE: 0.46020898\n","Average MAE: 0.32783264\n","Average R^2: -14.465105065716525\n"]}]},{"cell_type":"code","source":["# Plotting the loss versus time for both training and test data\n","plt.plot(timestamps, losses, marker='o')\n","plt.xlabel('Time (seconds)')\n","plt.ylabel('Loss')\n","plt.title('Loss Versus Time for Test Data')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"7iqS8pIcUIcy","executionInfo":{"status":"ok","timestamp":1715881417609,"user_tz":240,"elapsed":446,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"bf4f728a-cc58-47fd-a1b7-3250c9745b96"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Loss Versus Time for Test Data')"]},"metadata":{},"execution_count":22},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["from torch.utils.data import DataLoader, Subset\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","\n","# Prepare the dataset (using the previously defined CountyDataset class)\n","dataset = CountyDataset(finaldata)  # Using the dataset defined earlier\n","\n","# Set up K-Fold cross-validation\n","kf = KFold(n_splits=5, shuffle=True, random_state=42)  # 5-fold cross-validation\n","\n","# Lists to store cross-validation results\n","cv_results = {'rmse': [], 'mae': [], 'r2': []}\n","\n","# Train and validate across each fold\n","for fold, (train_idx, val_idx) in enumerate(kf.split(dataset)):\n","    # Split dataset\n","    train_subs = Subset(dataset, train_idx)\n","    val_subs = Subset(dataset, val_idx)\n","\n","    # Create data loaders\n","    train_loader = DataLoader(train_subs, batch_size=10, shuffle=True)\n","    val_loader = DataLoader(val_subs, batch_size=10)\n","\n","    # Initialize the model\n","    model = DeepNN()\n","    optimizer = torch.optim.SGD(model.parameters(), lr=0.001)\n","\n","    # Train the model\n","    for epoch in range(100):  # For simplicity, training for 100 epochs\n","        model.train()\n","        for X_batch, y_batch, _ in train_loader:\n","            optimizer.zero_grad()\n","            output = model(X_batch)\n","            loss = torch.nn.functional.mse_loss(output, y_batch)\n","            loss.backward()\n","            optimizer.step()\n","\n","    # Evaluate the model on the validation set\n","    model.eval()\n","    val_rmse, val_mae, val_r2 = [], [], []\n","    with torch.no_grad():\n","        for X_batch, y_batch, _ in val_loader:\n","            output = model(X_batch)\n","            val_rmse.append(np.sqrt(mean_squared_error(y_batch.numpy(), output.numpy())))\n","            val_mae.append(mean_absolute_error(y_batch.numpy(), output.numpy()))\n","            val_r2.append(r2_score(y_batch.numpy(), output.numpy()))\n","\n","    # Calculate and store average scores\n","    cv_results['rmse'].append(np.mean(val_rmse))\n","    cv_results['mae'].append(np.mean(val_mae))\n","    cv_results['r2'].append(np.mean(val_r2))\n","\n","    print(f'Fold {fold+1} - RMSE: {cv_results[\"rmse\"][-1]}, MAE: {cv_results[\"mae\"][-1]}, R^2: {cv_results[\"r2\"][-1]}')\n","\n","# Print average scores across all folds\n","print(f\"Average RMSE across folds: {np.mean(cv_results['rmse'])}\")\n","print(f\"Average MAE across folds: {np.mean(cv_results['mae'])}\")\n","print(f\"Average R^2 across folds: {np.mean(cv_results['r2'])}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dIu3StFjh-ED","executionInfo":{"status":"ok","timestamp":1715884744745,"user_tz":240,"elapsed":3300853,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"3d847e90-491a-49aa-9de9-56accd841bca"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([10])) that is different to the input size (torch.Size([10, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n","<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([4])) that is different to the input size (torch.Size([4, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n"]},{"output_type":"stream","name":"stdout","text":["Fold 1 - RMSE: 0.19212426245212555, MAE: 0.18136610090732574, R^2: -45377979601.33733\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([10])) that is different to the input size (torch.Size([10, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n","<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n","  warnings.warn(msg, UndefinedMetricWarning)\n","<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([10])) that is different to the input size (torch.Size([10, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n"]},{"output_type":"stream","name":"stdout","text":["Fold 2 - RMSE: 0.1918826401233673, MAE: 0.18070955574512482, R^2: nan\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n","  warnings.warn(msg, UndefinedMetricWarning)\n","<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([10])) that is different to the input size (torch.Size([10, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n"]},{"output_type":"stream","name":"stdout","text":["Fold 3 - RMSE: 0.19119195640087128, MAE: 0.18004903197288513, R^2: nan\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n","  warnings.warn(msg, UndefinedMetricWarning)\n","<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([10])) that is different to the input size (torch.Size([10, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n"]},{"output_type":"stream","name":"stdout","text":["Fold 4 - RMSE: 0.19042398035526276, MAE: 0.17963816225528717, R^2: nan\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-25-d837c129457f>:34: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = torch.nn.functional.mse_loss(output, y_batch)\n"]},{"output_type":"stream","name":"stdout","text":["Fold 5 - RMSE: 0.19211654365062714, MAE: 0.1808927357196808, R^2: nan\n","Average RMSE across folds: 0.19154788553714752\n","Average MAE across folds: 0.1805311143398285\n","Average R^2 across folds: nan\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n","  warnings.warn(msg, UndefinedMetricWarning)\n"]}]},{"cell_type":"code","execution_count":29,"metadata":{"id":"Y6l1xrVszh12","executionInfo":{"status":"ok","timestamp":1715886002921,"user_tz":240,"elapsed":930,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c35d20d2-0dfb-4232-b24e-8a8f44a8f5aa"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-29-c19498293693>:1: DtypeWarning: Columns (2,3,4) have mixed types. Specify dtype option on import or set low_memory=False.\n","  merged_df = pd.read_csv(\"/content/drive/MyDrive/processed_data.csv\")\n"]}],"source":["merged_df = pd.read_csv(\"/content/drive/MyDrive/processed_data.csv\")"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"rOsYwIy0AheP","executionInfo":{"status":"ok","timestamp":1715886005687,"user_tz":240,"elapsed":2,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}}},"outputs":[],"source":["class CountyDataset2(Dataset):\n","    def __init__(self, finaldata):\n","        f =  finaldata.drop(columns=['Geography', 'Geographic Area Name','Precinct','County', 'Vote Count','Estimate!!Households!!Median income (dollars)','average_Biden_proportion',\n","                            'Estimate!!Families!!Median income (dollars)','Estimate!!Nonfamily households!!Median income (dollars)', 'Estimate!!Married-couple families!!Median income (dollars)']).astype(float)\n","        self.X = f.values.tolist()\n","        self.y = finaldata['average_Biden_proportion'].tolist()\n","        self.county_info = finaldata['County'].tolist()\n","\n","    def __len__(self):\n","        return len(self.X)\n","\n","    def __getitem__(self, idx):\n","        return torch.tensor(self.X[idx], dtype=torch.float32), torch.tensor(self.y[idx], dtype=torch.float32), self.county_info[idx]\n"]},{"cell_type":"code","source":["dataset_evaluation = CountyDataset2(merged_df)\n","county_dataloader2 = CountyDataLoader(dataset_evaluation)"],"metadata":{"id":"6GQmWj6xUkLk","executionInfo":{"status":"ok","timestamp":1715886007672,"user_tz":240,"elapsed":2,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["# Initialization\n","rmse_scores = []\n","mae_scores = []\n","r2_scores = []\n","num_batches = 0\n","losses1 = [] # Use losses1 instead of losses\n","timestamps1 = [] # Use timestamps1 instead of timestamps\n","\n","for i, (val_X, val_y) in enumerate(county_dataloader2):\n","    if i >= 32:\n","        start_time = time.time()\n","\n","        features = torch.tensor(val_X)\n","        target = torch.tensor(val_y)\n","\n","        model.train()\n","        outputs = model(features)\n","\n","        # Loss\n","        loss = custom_loss(outputs, target)\n","        losses1.append(loss.item()) # Store loss in losses1\n","\n","        # RMSE, MAE, R^2\n","        actuals = target.cpu().numpy()  # Actual\n","        predictions = outputs.detach().cpu().numpy()  # Prediction\n","        rmse_scores.append(np.sqrt(mean_squared_error(actuals, predictions)))\n","        mae_scores.append(mean_absolute_error(actuals, predictions))\n","        r2_scores.append(r2_score(actuals, predictions))\n","\n","        # Optimizer backing and Zero\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        # Recoding the time\n","        end_time = time.time()\n","        timestamps1.append(end_time - start_time)  # Store time in timestamps1\n","        num_batches += 1\n","\n","# Evaluation\n","print(\"Average RMSE:\", np.mean(rmse_scores))\n","print(\"Average MAE:\", np.mean(mae_scores))\n","print(\"Average R^2:\", np.mean(r2_scores))"],"metadata":{"id":"c3naSay8br8R","executionInfo":{"status":"ok","timestamp":1715886009014,"user_tz":240,"elapsed":11,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b02f61f5-4427-4902-ad05-e7b6859cf54b"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Average RMSE: 0.26857597\n","Average MAE: 0.25422728\n","Average R^2: -4.095946430173255\n"]}]},{"cell_type":"code","execution_count":33,"metadata":{"id":"k-3dHIJiRO33","executionInfo":{"status":"ok","timestamp":1715886013220,"user_tz":240,"elapsed":11,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"e632784d-3bd2-45ae-b624-8a0dccd0294f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Plotting the loss versus time\n","plt.plot(timestamps1, losses1, marker='o')\n","plt.xlabel('Time (seconds)')\n","plt.ylabel('Loss')\n","plt.title('Loss Versus Time for Evaluation Data')\n","plt.show()"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"15Xf7fukMFmOL0q60cKKGY6WqQU6349RX","timestamp":1710712944084},{"file_id":"1lTdTlzIY-n4TrXe2P09o54Y1VUN7bN7P","timestamp":1706910303427}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}